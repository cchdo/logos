%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(r) 6.0.1%%For: (Sheelagh Collyer) (Southampton Oceanography Ctr)%%Title: (wocecol.eps)%%CreationDate: (24/11/97) (5:28 pm)%%BoundingBox: -91 -176 264 179%%HiResBoundingBox: -90.9846 -175.3479 263.1546 178.7913%%DocumentProcessColors: Cyan Yellow Black%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.0 0%%+ procset Adobe_Illustrator_AI6_vars Adobe_Illustrator_AI6%%+ procset Adobe_Illustrator_AI5 1.0 0%AI5_FileFormat 2.1%AI3_ColorUsage: Color%AI3_IncludePlacedImages%%CMYKCustomColor: 0 0 0 0 (Auto Color 1)%%+ 0.18 0 0.12 0.93 (Auto Color 2)%%+ 0.88 0.76 0 0 (Auto Color 3)%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set)%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 ()%AI3_TemplateBox: 87 1.75 87 1.75%AI3_TileBox: -196 -328.25 371 362.75%AI3_DocumentPreview: Macintosh_ColorPic%AI5_ArtSize: 595 842%AI5_RulerUnits: 1%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0%AI5_TargetResolution: 600%AI5_NumLayers: 3%AI5_OpenToView: -105 241.75 -1 565 550 18 1 1 3 40%AI5_OpenViewLayers: 777%%EndComments%%BeginProlog% ------------------------------------------------------%%BeginResource: procset Adobe_level2_AI5 1.2 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.2 0%%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)% ------------------------------------------------------userdict /Adobe_level2_AI5 23 dict dup begin	put% use packed arrays immediately	% packedarray emulation	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def		end		0	} if	pop% activate packing now	userdict /defaultpacking currentpacking put true setpacking% initialize, terminate	% note : no binding loop needed here by design	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{			end		} if	} bind def% mark for later stack clean-up	mark% custom color business	/setcustomcolor where not	{		/findcmykcustomcolor		{			5 packedarray		} bind def		/setcustomcolor		{			exch aload pop pop			4			{				4 index mul 4 1 roll			} repeat			5 -1 roll pop			setcmykcolor		}	% don't bind 'setcmykcolor in this procedure		def	} if%	new version checks for non-numeric version strings (5.0.1 fix bh 10/25/93)%	/gt38? {version cvx exec} stopped {pop true} {38 gt} ifelse def	%	newer version handles errors on clones with cvx or exec which would leave junk on the stack%	(bh 12/2/93)	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put% test for Level 2 availability	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put/level2ScreenFreq		%	halftoneDict level2ScreenFreq screenFreq{	begin		60	% 60 lpi is default		HalftoneType 1 eq		{			pop Frequency		} if		HalftoneType 2 eq		{			pop GrayFrequency		} if		HalftoneType 5 eq		{			pop Default level2ScreenFreq		} if	end} bind defuserdict /currentScreenFreq  	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse putlevel2? not	{		% LEVEL 1+ EMULATIONS (typesetter/color printer extensions)		% cmyk => gray conversion emulation		% note this revision approved by Ed Taft		% for correcting the out of gamut problem		% in our current emulations		% don't bind these guys so 'setgray/currentgray can be overloaded		/setcmykcolor where not		{			% see red book II, pp. 305			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		% LEVEL 2 EMULATIONS		% setoverprint emulation		/setoverprint where not		{			/setoverprint /pop load def		} if		% selectfont emulation		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		% cshow emulation		/cshow where not		{			% {proc} (string)			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if% clean up	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	level2?	{		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore		add add add 4 eq	}	{		1 0 0 0 testCMYKColorThrough		0 1 0 0 testCMYKColorThrough		0 0 1 0 testCMYKColorThrough		0 0 0 1 testCMYKColorThrough		and and and	} ifelse	put% *** other separation state tests if we're not on a composite page		composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def		end	} if	end defaultpacking setpacking%%EndResource% ------------------------------------------------------%%BeginProcSet: Adobe_ColorImage_AI6 1.0 0% ColorImage Emulation and Separation Code for Grayscale, RGB and CMYK images% Version 1.0 12/25/95% Copyright (C) 1995-96% Adobe Systems Incorporated% All Rights Reserved% ------------------------------------------------------userdict /Adobe_ColorImage_AI6 known not{	userdict /Adobe_ColorImage_AI6 17 dict put } ifuserdict /Adobe_ColorImage_AI6 get begin% ------------------------------------------------------% Routine Overview% %	String Iterators%		WalkRGBString (given a single source string, convert each pixel to cmyk and call a proc)%		WalkCMYKString (given a single source string, get the components and call a proc)% %	Level1 Emulator Routines%		StuffRGBIntoGrayString%		RGBToGrayImageProc%		StuffCMYKIntoGrayString %		CMYKToGrayImageProc %		ColorImageCompositeEmulator % %	ColorImage CMYK Separation Hacks (For [Applications] that only support planar images)%		CMYKToSeparatedCMYKImageProc% %	ColorImage and Utility Routines.%		FourEqual%		TestPlateIndex%		colorimage% % ------------------------------------------------------	/initialize{ 	Adobe_ColorImage_AI6 begin	Adobe_ColorImage_AI6	{		dup type /arraytype eq		{			dup xcheck			{				bind			} if		} if		pop pop	} forall} def/terminate { end } defcurrentdict /Adobe_ColorImage_AI6_Vars known not{	/Adobe_ColorImage_AI6_Vars 14 dict def} ifAdobe_ColorImage_AI6_Vars begin	/channelcount 0 def	/sourcecount 0 def	/sourcearray 4 array def	/plateindex -1 def	/XIMask 0 def	/XIBinary 0 def	/XIChannelCount 0 def	/XIBitsPerPixel 0 def	/XIImageHeight 0 def	/XIImageWidth 0 def	/XIImageMatrix null def	/XIBuffer null def	/XIDataProc null defend/WalkRGBString null def/WalkCMYKString null def/StuffRGBIntoGrayString null def/RGBToGrayImageProc null def/StuffCMYKIntoGrayString null def/CMYKToGrayImageProc null def/ColorImageCompositeEmulator null def/SeparateCMYKImageProc null def/FourEqual null def/TestPlateIndex null def% define _colorimage if it doesn't already existcurrentdict /_colorimage known not{	/colorimage where	{		% sourcedictionary (systemdict or a separation proc redefinition)		/colorimage get /_colorimage exch def	}	{		/_colorimage null def	} ifelse} if/_currenttransfer systemdict /currenttransfer get def/colorimage null def/XI null def% ------------------------------------------------------% rgb proc out --WalkRGBString--% ------------------------------------------------------/WalkRGBString{	% rgb proc out	0 3 index	% rgb proc out outindex rgb	dup length 1 sub 0 3 3 -1 roll	{		% rgb proc out outindex rgb index		3 getinterval { } forall		% call the stuff proc		% rgb proc out outindex r g b		5 index exec		% push rgb for the next loop iteration		% rgb proc out outindex		3 index		% rgb proc out outindex rgb	} for		% clean up the stack	% rgb proc out outindex rgb	 5 { pop } repeat} def% ------------------------------------------------------% cmyk proc gray --WalkCMYKString--% ------------------------------------------------------/WalkCMYKString{	% cmyk proc gray	0 3 index	% cmyk proc gray grayindex cmyk	dup length 1 sub 0 4 3 -1 roll	{		% cmyk proc gray grayindex cmyk index		4 getinterval { } forall				% cmyk proc gray grayindex c m y k		6 index exec				% cmyk proc gray grayindex		3 index				% cmyk proc gray grayindex cmyk	} for		% clean up the stack	% cmyk proc gray grayindex cmyk	5 { pop } repeat	} def% ------------------------------------------------------% gray grayindex r g b --StuffRGBIntoGrayString-- gray grayindex% ------------------------------------------------------/StuffRGBIntoGrayString{	% gray grayindex r g b	.11 mul exch		% gray grayindex r bk g	.59 mul add exch		% gray grayindex bkgk r	.3 mul add		% gray grayindex k	cvi 3 copy put		% gray grayindex k	pop 1 add} def% ------------------------------------------------------% --RGBToGrayImageProc-- string% ------------------------------------------------------/RGBToGrayImageProc{		Adobe_ColorImage_AI6_Vars begin			% call the source proc to get the chunky rgb string		sourcearray 0 get exec		% make a grayscale string of the same pixel count (ouch, pull me out of this loop)		% rgb		dup length 3 idiv string		% roll off a copy of the gray string		% rgb gray		dup 3 1 roll 				% push the stuff proc that we want called by WalkRGBString		% gray rgb gray		/StuffRGBIntoGrayString load exch		% call the rgb conversion iterator		% gray rgb proc gray		WalkRGBString		% return the gray string		% gray		end} def% ------------------------------------------------------% gray grayindex c m y k --StuffCMYKIntoGrayString-- gray grayindex% ------------------------------------------------------/StuffCMYKIntoGrayString{	% gray grayindex c m y k	exch .11 mul add		% gray grayindex c m yk	exch .59 mul add		% gray grayindex c mkyk	exch .3 mul add		% pin k to 255	% gray gray index k	dup 255 gt { pop 255 } if		% gray grayindex k	255 exch sub cvi 3 copy put		% gray grayindex k	pop 1 add} def% ------------------------------------------------------% --CMYKToGrayImageProc-- string% ------------------------------------------------------/CMYKToGrayImageProc{		Adobe_ColorImage_AI6_Vars begin		% call the source proc to get the chunky cmyk string		sourcearray 0 get exec		% make a grayscale string of the same pixel count (ouch, pull me out of this loop)		% cmyk		dup length 4 idiv string		% roll off a copy of the gray string		% cmyk gray		dup 3 1 roll 				% push the stuff proc that we want called by WalkCMYKString		% gray cmyk gray		/StuffCMYKIntoGrayString load exch		% call the cmyk iterator		% gray cmyk proc gray		WalkCMYKString		% return the gray string		% gray	end} def% ------------------------------------------------------% width height bitsperpixel matrix firstsource...lastsource multiplesources channelcount --ColorImageCompositeEmulator--% ------------------------------------------------------/ColorImageCompositeEmulator{	% Channelcount is already saved in Adobe_ColorImage_AI6_Vars. Our data is always in chunky form so punt if someone	% calls colorimage on a level 1 device with planar data.	% channelcount and multiplesources are already saved in Adobe_ColorImage_AI6_Vars. The image operator isn't going to use them.	pop true eq	{		% pop off the parameters and return		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat	}	{		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne		{			Adobe_ColorImage_AI6_Vars begin				% save off the original chunky source function				sourcearray 0 3 -1 roll put							% push the appropriate cover proc				channelcount 3 eq 				{ 					/RGBToGrayImageProc 				}				{ 					/CMYKToGrayImageProc				} ifelse				load			end		} if		image	} ifelse} def% ------------------------------------------------------% --SeparateCMYKImageProc-- string% ------------------------------------------------------/SeparateCMYKImageProc{		Adobe_ColorImage_AI6_Vars begin		sourcecount 0 ne		{			% planar case: call the source proc for the current plate and return its result			sourcearray plateindex get exec		}		{						% call the source proc to get the chunky cmyk string			sourcearray 0 get exec						% make a grayscale string of the same pixel count (ouch, pull me out of this loop)			% cmyk			dup length 4 idiv string						% cmyk			0 2 index						% cmyk gray grayindex cmyk			plateindex 4 2 index length 1 sub			{				% cmyk gray grayindex cmyk channelindex				get 255 exch sub								% cmyk gray grayindex grayvalue				3 copy put pop 1 add								% cmyk gray grayindex				2 index			} for			% return the gray string			% cmyk gray grayindex cmyk			pop pop exch pop		} ifelse	end} def	% ------------------------------------------------------% s1 s2 s3 s4 c1 c2 c3 c4 --FourEqual--% ------------------------------------------------------/FourEqual{	% s1 s2 s3 s4 c1 c2 c3 c4	4 index ne	{		pop pop pop false	}	{		% s1 s2 s3 s4 c1 c2 c3		4 index ne		{			pop pop false		}		{			% s1 s2 s3 s4 c1 c2			4 index ne			{				pop false			}			{				% s1 s2 s3 s4 c1				4 index eq			} ifelse		} ifelse	} ifelse} def% ------------------------------------------------------%  --TestPlateIndex-- plateindex% ------------------------------------------------------/TestPlateIndex{	Adobe_ColorImage_AI6_Vars begin		% assume we're not separating		/plateindex -1 def		/setcmykcolor where		{			pop			gsave			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub			grestore			% cyan plate?			1 0 0 0 FourEqual 			{ 				/plateindex 0 def			}			{				% magenta plate?				0 1 0 0 FourEqual				{ 					/plateindex 1 def				}				{					% yellow plate?					0 0 1 0 FourEqual					{						/plateindex 2 def					}					{						% black plate						0 0 0 1 FourEqual						{ 							/plateindex 3 def						}						{							0 0 0 0 FourEqual							{								/plateindex 5 def							} if						} ifelse					} ifelse				} ifelse			} ifelse			pop pop pop pop		} if		plateindex	end} def% ------------------------------------------------------% width height bitsperpixel matrix firstsource...lastsource multiplesources channelcount --colorimage--% ------------------------------------------------------/colorimage{	Adobe_ColorImage_AI6_Vars begin		/channelcount 1 index def		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def		% setup for following if statement		4 sourcecount add index dup 		8 eq exch 1 eq or not	end		% is this not 1 or 8 bit?	{		% Call the original proc if the image is at a weird bit depth. This will display a composite if we're separating, but too bad.		/_colorimage load null ne		{			% call the original (they probably punt if we're separating)			_colorimage		}		{			% pop off the parameters and return			Adobe_ColorImage_AI6_Vars /sourcecount get			7 add { pop } repeat		} ifelse	}	{		% Call the saved colorimage operator if this an rgb, we're printing a composite or we're separating		% an image to a custom plate. The last case assumes that the separation procs surrounding us		% take care of punching out		dup 3 eq		TestPlateIndex		dup -1 eq exch 5 eq or or		{			% Call the colorimage emulator if we're printing to a level 1 device			/_colorimage load null eq			{				ColorImageCompositeEmulator			}			{				% call image if this is a grayscale so that Quark doesn't die on custom plates				dup 1 eq				{					pop pop image				}				{					% draw to the null device if we're on a custom plate					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq					{						gsave												% stolen from PhotoShop						0 _currenttransfer exec						1 _currenttransfer exec						eq						{ 0 _currenttransfer exec 0.5 lt }						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse												% push the appropriate transfer proc (first case is negative						% second case is positive) and call settransfer						{ { pop 0 } } { { pop 1 } } ifelse						systemdict /settransfer get exec					} if										_colorimage										% restore from the null device if necessary					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq					{						grestore					} if				} ifelse			} ifelse		}		{			% Are we separating a grayscale image?			dup 1 eq			{				% let the surrounding separation procset handle the separation				pop pop				image			}			{				% pop channelcount and multiplesources since they're not used by the image operator				pop pop				% Prepare to call the image operator with a cover proc				Adobe_ColorImage_AI6_Vars begin					% save off the source procs for our cover proc					% width height bitsperpixel matrix firstsource...lastsource					sourcecount -1 0					{									% width height bitsperpixel matrix firstsource...lastsource index						exch sourcearray 3 1 roll put					} for					/SeparateCMYKImageProc load				end				% bypass the separation procset since some applications don't handle chunky and the				% old separator doesn't handle colorimage				systemdict /image get exec			} ifelse		} ifelse	} ifelse} def% ------------------------------------------------------% --XI--% ------------------------------------------------------/XI{	Adobe_ColorImage_AI6_Vars begin		gsave		/XIMask exch 0 ne def		/XIBinary exch 0 ne def		pop		pop		/XIChannelCount exch def		/XIBitsPerPixel exch def		/XIImageHeight exch def		/XIImageWidth exch def		pop pop pop pop		/XIImageMatrix exch def				XIBitsPerPixel 1 eq		{			XIImageWidth 8 div ceiling cvi		}		{			XIImageWidth XIChannelCount mul		} ifelse		/XIBuffer exch string def				XIBinary		{			/XIDataProc { currentfile XIBuffer readstring pop } def			% skip the %BeginBinary comment			currentfile 128 string readline pop pop		}		{			/XIDataProc { currentfile XIBuffer readhexstring pop } def		} ifelse				0 0 moveto		XIImageMatrix concat		XIImageWidth XIImageHeight scale				XIMask		{			XIImageWidth XIImageHeight			false			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]			/XIDataProc load						% synch the PostScript fill with Illustrator's notion of the current fill			/_lp /null ddef			_fc			/_lp /imagemask ddef						imagemask		}		{			XIImageWidth XIImageHeight			XIBitsPerPixel			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]			/XIDataProc load						% call image if passed grayscale or bitmap data. Some applications			% die if colorimage is called with gray data.			XIChannelCount 1 eq			{				% Some applications refuse to separate a grayscale image to the black plate if				% the currentgray is white. Hack around.								gsave				0 setgray								image								grestore			}			{				false				XIChannelCount				colorimage			} ifelse		} ifelse		grestore	end} def	end%%EndProcSet% ------------------------------------------------------%%BeginResource: procset Adobe_Illustrator_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Full Prolog)%%Version: 1.1 0%%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)% ------------------------------------------------------currentpacking true setpacking% 71 vars, but leave slack of 10 entries for custom Postscript fragmentsuserdict /Adobe_Illustrator_AI5_vars 81 dict dup beginput% paint operands/_eo false def/_lp /none def/_pf{} def	% paint fill/_ps{} def	% paint stroke/_psf{} def	% paint string fill/_pss{} def	% paint string stroke/_pjsf{} def	% paint justified string fill/_pjss{} def	% paint justified string stroke/_pola 0 def/_doClip 0 def% paint operators/cf currentflat def	% - cf flatness% typography operands/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_rise 0 def/_ax 0 def	% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)/_ay 0 def	% y character spacing/_cx 0 def	% x word spacing/_cy 0 def	% y word spacing/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fScl 0 def/_cnt 0 def/_hs 1 def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_wv 0 def% typography operators/Tx{} def/Tj{} def% compound path operators/CRender{} def% printing/_AI3_savepage{} def% color operands/_gf null def/_cf 4 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_is null def/_os false def/_sc{} def% pattern operands/_pd 1 dict def/_ed 15 dict def/_pm matrix def/_fm null def/_fd null def/_fdd null def/_sm null def/_sd null def/_sdd null def/_i null def% discard variables (12 total)/discardSave null def	% holds save used in discard loop/buffer 256 string def	% line buffer string : assume 256 chars/line/beginString null def	% begin delimiter/endString null def	% end delimiter/endStringLength null def	% holds buffer size for reading by byte technique/layerCnt 1 def	% internal variables for discard loop/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def% variable for doing clipping without rendering/clipForward? false def% end the vars dictionaryend% =========================================userdict /Adobe_Illustrator_AI5 known not {	userdict /Adobe_Illustrator_AI5 91 dict put} ifuserdict /Adobe_Illustrator_AI5 get begin% initialization/initialize	% - initialize -{	% pushing main on the stack	Adobe_Illustrator_AI5 dup begin	% push the vars dictionary	Adobe_Illustrator_AI5_vars begin	% at this point the main and vars dictionaries	% are in the state we wish them to be	% on exit from the initialize call	% bind the procedures in the discard dictionary	discardDict	{		bind pop pop	} forall	% begin the nc dictionary	dup /nc get begin	% bind the procs in main	{		% added a test for type = operatortype so procedures like Ln can be defined as an alias for 'pop		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall	% turn off 'nc	end	newpath	% on exit we have main and vars on top of dict stack} def/terminate	% - terminate -{	end	end} def% definition operators/_	% - _ nullnull def/ddef	% key value ddef -{	Adobe_Illustrator_AI5_vars 3 1 roll put} def/xput	% key value literal xput -{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def	end} def/npop	% integer npop -{	{		pop	} repeat} def% marking operators/sw	% ax ay string sw x y{	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add} def/swj	% cx cy fillchar ax ay string swj x y{	dup 4 1 roll	dup length exch stringwidth	exch 5 -1 roll 3 index mul add	4 1 roll 3 1 roll mul add	6 2 roll /_cnt 0 ddef	{		1 index eq		{			/_cnt _cnt 1 add ddef		} if	} forall	pop	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop} def/ss	% ax ay string matrix ss -{	4 1 roll	{		% matrix ax ay char 0 0 {proc} -		2 npop		(0) exch 2 copy 0 exch put pop		gsave		false charpath currentpoint		4 index setmatrix		stroke		grestore		moveto		2 copy rmoveto	} exch cshow	3 npop} def/jss	% cx cy fillchar ax ay string matrix jss -{	4 1 roll	{		% cx cy fillchar matrix ax ay char 0 0 {proc} -   		2 npop		(0) exch 2 copy 0 exch put		gsave		_sp eq		{			exch 6 index 6 index 6 index 5 -1 roll widthshow			currentpoint		}		{			false charpath currentpoint			4 index setmatrix stroke		} ifelse		grestore		moveto		2 copy rmoveto	} exch cshow	6 npop} def% path operators/sp	% ax ay string sp -{	{		2 npop (0) exch		2 copy 0 exch put pop		false charpath		2 copy rmoveto	} exch cshow	2 npop} def/jsp	% cx cy fillchar ax ay string jsp -{	{		% cx cy fillchar ax ay char 0 0 {proc} -		2 npop		(0) exch 2 copy 0 exch put		_sp eq		{			exch 5 index 5 index 5 index 5 -1 roll widthshow		}		{			false charpath		} ifelse		2 copy rmoveto	} exch cshow	5 npop} def% path construction operators/pl	% x y pl x y{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	% x1 y1 x2 y2 x3 y3 c -	{		curveto	} def	/C	/c load def	/v	% x2 y2 x3 y3 v -	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	% x1 y1 x2 y2 y -	{		2 copy curveto	} def	/Y	/y load def	/l	% x y l -	{		lineto	} def	/L	/l load def	/m	% x y m -	{		moveto	} def}{	% else	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse% graphic state operators/d	% array phase d -{	setdash} def/cf{} def	% - cf flatness/i	% flatness i -{	dup 0 eq	{		pop cf	} if	setflat} def/j	% linejoin j -{	setlinejoin} def/J	% linecap J -{	setlinecap} def/M	% miterlimit M -{	setmiterlimit} def/w	% linewidth w -{	setlinewidth} def% path painting operators/XR	% flag XR -{	0 ne	/_eo exch ddef} def/H	% - H -{} def/h	% - h -{	closepath} def/N	% - N -{	_pola 0 eq	{		_doClip 1 eq		{			_eo {eoclip} {clip} ifelse /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n	% - n -{	N} def/F	% - F -{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f	% - f -{	closepath	F} def/S	% - S -{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s	% - s -{	closepath	S} def/B	% - B -{	_pola 0 eq	{		_doClip 1 eq	% F clears _doClip		gsave F grestore		{			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b	% - b -{	closepath	B} def/W	% - W -{	/_doClip 1 ddef} def/*	% - [string] * -{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	% used to call newpath only if _polo was 0; now newpath is called unconditionally (bh 3/24/94)	newpath} def% group operators/u	% - u -{} def/U	% - U -{} def/q	% - q -{	_pola 0 eq	{		gsave	} if} def/Q	% - Q -{	_pola 0 eq	{		grestore	} if} def/*u	% - *u -{	_pola 1 add /_pola exch ddef} def/*U	% - *U -{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D	% polarized D -{	pop} def/*w	% - *w -{} def/*W	% - *W -{} def% place operators/`	% matrix llx lly urx ury string ` -{	/_i save ddef% * special case of clipping forward without rendering	% use 'nulldevice if true	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~	% - ~ -{	end	_i restore} def% color operators/O	% flag O -{	0 ne	/_of exch ddef	/_lp /none ddef} def/R	% flag R -{	0 ne	/_os exch ddef	/_lp /none ddef} def/g	% gray g -{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/G	% gray G -{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k	% cyan magenta yellow black k -{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/K	% cyan magenta yellow black K -{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x	% cyan magenta yellow black name gray x -{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		ashow	} ddef	/_pjsf	{		_fc		awidthshow	} ddef	/_lp /none ddef} def/X	% cyan magenta yellow black name gray X -{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def% locked object operator/A	% value A -{	pop} def% annotate page operator/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def% object tag operator% joe holt November 20, 1994% /name (value) XT/XT {	pop pop} def% begin layer PostScript implementation% general purpose discard loop% works on early level 1 (v.23, v.38) PostScript printers% version 0.02 04/03/93% Bill Woodruff% constraints :% if nested discards must be handled% then the begin and end delimiting% strings must be of equal length% arguments% #nestingFlag% #nestingFlag = 0  				no nesting% #nestingFlag = 1  				nesting% non-nested case% note : since the non-nested case is invoked% after the ocurrence of a beginning string% we only have to look for the ending string% it is not necessary to specify a beginning string% 0 (endString) % nested case% (beginString) 1 (endString) % the discard procedure is defined in the main dictionary% it turns the discard dictionary on to execute the discard function/discard{	% test for version, hash a key	% get and execute the discard procedure from dictionary	% execute it in a stopped context so we can bail with 'stop	% wrap it in a save so we don't have to reset variables	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop	end	discardSave restore} bind def% build the discard dictionary which will contain only proceduresuserdict /discardDict 7 dict dup beginput% pre 38 initialization/pre38Initialize{	% used as buffer size for reading by byte technique		/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	%	new buffer equal in length to end string	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	%	pointer to from 2nd to last char in new buffer	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store	%	pointer to last char in new buffer} def% for <=38	/shiftBuffer{	% shift last chars of newBuff to start of newBuff	newBuff 0 newBuffButFirst putinterval	% new character into last byte of newBuff	newBuffLast 0	currentfile read not	{	stop	} if	put} def% discard procedures% no nesting, older ps0{	pre38Initialize	mark	% fill the buffer	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def% nesting, older ps1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	} if} def% no nesting, newer ps2{	mark	{		% read a line : exit if end of file reached		currentfile buffer readline not		{		stop		} if		% end of layer ?		endString eq		{			cleartomark stop		} if	} loop} def% nesting, newer ps3{	/beginString exch store	/layerCnt 1 store	mark	{		% read a line : exit if end of file reached		currentfile buffer readline not		{		stop		} if		% start of layer ?		dup beginString eq		{			% update layer counter			pop /layerCnt dup load 1 add store		}		{			% end of layer ?			endString eq			{				% stop if we're not nested				layerCnt 1 eq				{					cleartomark stop				}				{					% nested : decrement layer counter					/layerCnt dup load 1 sub store				} ifelse			} if		} ifelse	} loop} def% end discard dictionaryend% define the dictionary for clipping without renderinguserdict /clipRenderOff 15 dict dup beginput% flag for marking this dictionary as active% so we can test in /` and wrap placed% elements in nulldevice% /clipForward? true def% re-define rendering primitives to clip and newpath% based on value of /_doClip flag{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef _eo {eoclip} {clip} ifelse		} if		newpath	} def} forall% modify 'Tr so Tj and Tx are never set up by% the calls to 'a0, 'e0, etc./Tr /pop load def% special case of 'cshow ?% is so, we'll have to overload toplevels% /patternashow /patternawidthshow% /patternashowstroke% /patternawidthshowstroke% /ss /jss /sp /jsp% perhaps we can bracket out patterns at a higher level ?% for example, by modifying 'E to pop off its parameters% call to 'show in 'patternpath ?% calls to 'ashow in '_psf ?% calls to 'awidthshow in '_pjsf ?% calls to 'widthshow in '_jss and '_jsp ?% disable gradient operators/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} def% end dictionary for clipping without renderingend/Lb	% visible preview enabled printing dimmed masks colorIndex red green blue  ==> Lb{	4 npop	6 1 roll	pop	4 1 roll	pop pop pop	% #masks #printing 	% assume that	% masks = 1 masks forward, masks = 0 no masking or only local masking		% do the right thing for printing and masking layer	0 eq	{		% non-printing layer		0 eq		{			% no masking forward from this layer			% nested discard call			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{			% masking forward from this layer			% no printing, but clip path must survive						% set the clipForward? flag in the vars dict			/clipForward? true def						% redefine Tx and Tj in the vars dict			/Tx /pop load def			/Tj /pop load def						% turn on the no rendering dictionary			currentdict end clipRenderOff begin begin		} ifelse	}	{		% printing layer		% encapsulate layer with 'save		% only if there is no masking forward		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def% end layer :% assume that if discardSave is non-null% then the layer was bracketed by 'save...restore% else we must test for clipping forward/LB	% ==> Lb ==> .....{	discardSave dup null ne	{		% undo the save		restore	}	{		pop		clipForward?		{			% assume dictionary stack :			%		vars						%		clipRenderOff						%		main			currentdict			end			end			begin			% dictionary stack :			%		vars						%		main								/clipForward? false ddef		} if	} ifelse} bind def% begin palette discard% assume no nesting/Pb	% topLeftCell selected Pb -{	pop pop	% non nested discard	0 (%AI5_EndPalette) discard} bind def% other type of discard% assume no nesting/Np{	0 (%AI5_End_NonPrinting--) discard} bind def% express layer name/Ln /pop load def	% ==> Ln ==> .....% path center-point flag operator/Ap	% value Ap -/pop load def% device-independent flatness/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def% multi-layer clipping/Mb{	q} def/Md{} def/MB{	Q} def% null color operators/nc 3 dict defnc begin/setgray	% gray setgray -{	pop} bind def/setcmykcolor	% cyan magenta yellow black setcmykcolor -{	4 npop} bind def/setcustomcolor	% object tint setcustomcolor -{	2 npop} bind def% exit 'nc dictionarycurrentdict readonly popend% exit main dictionary% currentdict readonly popendsetpacking%%EndResource%%EndProlog%%BeginSetupAdobe_level2_AI5 /initialize get execAdobe_ColorImage_AI6 /initialize get execAdobe_Illustrator_AI5 /initialize get exec%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Yellow Stripe)(Yellow Stripe) 8.4499 4.6 80.4499 76.6 [%AI3_Tile(0 O 0 R 0 0.4 1 0 k 0 0.4 1 0 K) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 3.6 w 4 M []0 d%AI3_Note:0 D0 XR8.1999 8.1999 m80.6999 8.1999 LS8.1999 22.6 m80.6999 22.6 LS8.1999 37.0001 m80.6999 37.0001 LS8.1999 51.3999 m80.6999 51.3999 LS8.1999 65.8 m80.6999 65.8 LS8.1999 15.3999 m80.6999 15.3999 LS8.1999 29.8 m80.6999 29.8 LS8.1999 44.1999 m80.6999 44.1999 LS8.1999 58.6 m80.6999 58.6 LS8.1999 73.0001 m80.6999 73.0001 LS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp3 Bn%AI5_BeginGradient: (Black & White)(Black & White) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_Bs1 0 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Red & Yellow)(Red & Yellow) 0 2 Bd[0<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><FFFFFEFEFDFDFDFCFCFBFBFBFAFAF9F9F9F8F8F7F7F7F6F6F5F5F5F4F4F3F3F3F2F2F1F1F1F0F0EFEFEFEEEEEDEDEDECECEBEBEBEAEAE9E9E9E8E8E7E7E7E6E6E5E5E5E4E4E3E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D5D5D5D4D4D3D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCDCCCCCBCBCBCACAC9C9C9C8C8C7C7C7C6C6C5C5C5C4C4C3C3C3C2C2C1C1C1C0C0BFBFBFBEBEBDBDBDBCBCBBBBBBBABAB9B9B9B8B8B7B7B7B6B6B5B5B5B4B4B3B3B3B2B2B1B1B1B0B0AFAFAFAEAEADADADACACABABABAAAAA9A9A9A8A8A7A7A7A6A6A5A5A5A4A4A3A3A3A2A2A1A1A1A0A09F9F9F9E9E9D9D9D9C9C9B9B9B9A9A9999>01 %_Br[0 1 0.6 0 1 50 100 %_Bs0 0 1 0 1 50 0 %_BsBD%AI5_EndGradient%AI5_BeginGradient: (Yellow & Blue Radial)(Yellow & Blue Radial) 1 2 Bd[<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><1415161718191A1B1C1D1E1F1F202122232425262728292A2A2B2C2D2E2F30313233343536363738393A3B3C3D3E3F40414142434445464748494A4B4C4D4D4E4F50515253545556575858595A5B5C5D5E5F60616263646465666768696A6B6C6D6E6F6F707172737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C9CACBCBCCCDCECFD0D1D2D3D4D5D6D7D7D8D9DADBDCDDDEDFE0E1E2E2E3E4E5E6E7E8E9EAEBECEDEEEEEFF0F1F2F3F4F5F6F7F8F9F9FAFBFCFDFEFF><ABAAAAA9A8A7A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A9999989797969595949393929191908F8F8E8D8D8C8B8B8A8989888787868585848383828181807F7F7E7D7D7C7B7B7A7979787777767575747373727171706F6F6E6D6D6C6B6B6A6969686767666565646362626160605F5E5E5D5C5C5B5A5A5958585756565554545352525150504F4E4E4D4C4C4B4A4A4948484746464544444342424140403F3E3E3D3C3C3B3A3A3938383736363534343332323130302F2E2E2D2C2C2B2A2A29282827262625242423222121201F1F1E1D1D1C1B1B1A1919181717161515141313121111100F0F0E0D0D0C0B0B0A090908070706050504030302010100>01 %_Br[0 0.08 0.67 0 1 50 14 %_Bs1 1 0 0 1 50 100 %_BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 1 PbPnPc1 gPc0 gPc0 0 0 0 kPc0.75 gPc0.5 gPc0.25 gPc0 gPcBb2 (Black & White) -4233 4321.75 0 0 1 0 0 1 0 0 Bg0 BBPc0.25 0 0 0 kPc0.5 0 0 0 kPc0.75 0 0 0 kPc1 0 0 0 kPc0.25 0.25 0 0 kPc0.5 0.5 0 0 kPc0.75 0.75 0 0 kPc1 1 0 0 kPcBb2 (Red & Yellow) -4233 4321.75 0 0 1 0 0 1 0 0 Bg0 BBPc0 0.25 0 0 kPc0 0.5 0 0 kPc0 0.75 0 0 kPc0 1 0 0 kPc0 0.25 0.25 0 kPc0 0.5 0.5 0 kPc0 0.75 0.75 0 kPc0 1 1 0 kPcBb0 0 0 0 Bh2 (Yellow & Blue Radial) -4233 4321.75 0 0 1 0 0 1 0 0 Bg0 BBPc0 0 0.25 0 kPc0 0 0.5 0 kPc0 0 0.75 0 kPc0 0 1 0 kPc0.25 0 0.25 0 kPc0.5 0 0.5 0 kPc0.75 0 0.75 0 kPc1 0 1 0 kPc(Yellow Stripe) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] pPc0.25 0.125 0 0 kPc0.5 0.25 0 0 kPc0.75 0.375 0 0 kPc1 0.5 0 0 kPc0.125 0.25 0 0 kPc0.25 0.5 0 0 kPc0.375 0.75 0 0 kPc0.5 1 0 0 kPc0 0 0 0 kPc0 0.25 0.125 0 kPc0 0.5 0.25 0 kPc0 0.75 0.375 0 kPc0 1 0.5 0 kPc0 0.125 0.25 0 kPc0 0.25 0.5 0 kPc0 0.375 0.75 0 kPc0 0.5 1 0 kPc0 0 0 0 kPc0.125 0 0.25 0 kPc0.25 0 0.5 0 kPc0.375 0 0.75 0 kPc0.5 0 1 0 kPc0.25 0 0.125 0 kPc0.5 0 0.25 0 kPc0.75 0 0.375 0 kPc1 0 0.5 0 kPc0 0 0 0 kPc0.25 0.125 0.125 0 kPc0.5 0.25 0.25 0 kPc0.75 0.375 0.375 0 kPc1 0.5 0.5 0 kPc0.25 0.25 0.125 0 kPc0.5 0.5 0.25 0 kPc0.75 0.75 0.375 0 kPc1 1 0.5 0 kPc0 0 0 0 kPc0.125 0.25 0.125 0 kPc0.25 0.5 0.25 0 kPc0.375 0.75 0.375 0 kPc0.5 1 0.5 0 kPc0.125 0.25 0.25 0 kPc0.25 0.5 0.5 0 kPc0.375 0.75 0.75 0 kPc0.5 1 1 0 kPc0 0 0 0 kPc0.125 0.125 0.25 0 kPc0.25 0.25 0.5 0 kPc0.375 0.375 0.75 0 kPc0.5 0.5 1 0 kPc0.25 0.125 0.25 0 kPc0.5 0.25 0.5 0 kPc0.75 0.375 0.75 0 kPc1 0.5 1 0 kPcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 2 79 255 79 Lb(Outer Circle) Ln0 A800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D0 XR262 -4318.25 m(N) *262 4321.75 m(N) *-90.5 -4318.25 m(N) *-90.5 4321.75 m(N) *4407 177.75 m(N) *-4233 177.75 m(N) *4407 -174.75 m(N) *-4233 -174.75 m(N) *86 -4318.25 m(N) *86 4321.75 m(N) *4407 1.75 m(N) *-4233 1.75 m(N) *1 Ap0 R0 G600 Ar2 w86.085 -174.3479 m183.3241 -174.3479 262.1546 -95.5175 262.1546 1.7217 c262.1546 98.9608 183.3241 177.7913 86.085 177.7913 c-11.1541 177.7913 -89.9846 98.9608 -89.9846 1.7217 c-89.9846 -95.5175 -11.1541 -174.3479 86.085 -174.3479 cs0 Ap800 Ar1 w-61 -4318.25 m(N) *-61 4321.75 m(N) *-60.5 -4318.25 m(N) *-60.5 4321.75 m(N) *230 -4318.25 m(N) *230 4321.75 m(N) *4407.5 -143.75 m(N) *-4232.5 -143.75 m(N) *4407.5 147.75 m(N) *-4232.5 147.75 m(N) *LB%AI5_EndLayer--%AI5_BeginLayer1 1 1 1 0 0 1 255 79 79 Lb(Inner Logo) Ln0 A1 Ap0 O0.7 0 0.01 0 k0 R0 G600 Ar0 J 0 j 2 w 4 M []0 d%AI3_Note:0 D0 XR86.2544 -144.0124 m166.62 -144.0124 231.7714 -78.8611 231.7714 1.5045 c231.7714 81.8701 166.62 147.0214 86.2544 147.0214 c5.8889 147.0214 -59.2625 81.8701 -59.2625 1.5045 c-59.2625 -78.8611 5.8889 -144.0124 86.2544 -144.0124 cb0 Ap800 Ar2 J 1.2 w 2 M93.2461 -97.2893 m76.6459 -99.3893 34.2335 -92.0268 24.546 -92.7893 c14.8585 -93.5518 6.6085 -98.0143 12.546 -107.1894 c18.4835 -116.3643 30.9365 -120.6447 41.846 -125.3893 c58.171 -132.4893 77.9461 -133.2893 90.846 -133.5893 C103.2461 -132.8893 121.4461 -130.0893 134.2461 -122.9893 C141.1459 -118.8893 153.6459 -113.5893 154.6459 -103.2893 c155.0037 -99.6054 151.6323 -96.8218 148.6459 -95.3893 c133.6085 -88.1768 111.7461 -96.6894 93.2461 -97.2893 cS0 J 1 w 4 M84.25 -4318.25 m(N) *84.25 4321.75 m(N) *95.375 -4318.25 m(N) *95.375 4321.75 m(N) *u0 O1 g0 R0 G0.2 w93.614 53.3748 m93.615 53.3227 93.6261 53.267 93.6495 53.2085 C94.3495 53.2085 L94.3495 53.5084 L94 54.25 l94.125 55.25 l92.7331 54.3689 92.875 54 v93.1875 53.1875 93.614 53.3748 Yb70.5495 38.6085 m70.7495 38.2085 70.3495 37.9085 70.0495 37.6085 C69.6495 37.6085 L69.6495 38.8085 L69.9495 38.9085 70.1495 38.4085 70.5495 38.6085 Cbu204.7495 28.8085 m204.9495 27.0084 204.4495 25.2085 203.2495 24.4085 C203.3495 26.5084 204.3495 29.4085 202.8495 31.4085 C203.4495 33.8085 204.4495 29.8085 204.7495 28.8085 Cb181.2495 22.3085 m181.4495 21.6085 180.8495 21.3085 180.4495 20.8085 C179.5495 20.4085 179.4495 21.4085 179.5495 22.0084 C179.4495 22.5084 179.5495 22.9085 180.0495 23.2085 C180.8495 23.4085 181.2495 23.0084 181.2495 22.3085 Cb166.8495 18.7085 m166.0495 17.8085 165.5495 19.2085 164.8495 19.4085 C164.9495 20.2085 165.0495 21.1085 165.8495 21.6085 C167.5495 21.1085 165.4495 19.5084 166.8495 18.7085 Cb178.5495 13.4085 m178.0495 13.0084 177.7495 12.1085 176.8495 12.4085 C176.9495 14.2085 177.5495 16.0084 178.3495 17.2085 C180.0495 16.4085 177.8495 15.0084 178.5495 13.4085 Cb73.2495 14.1085 m72.1495 13.8085 72.7495 15.0084 72.2495 15.3085 C72.7495 16.3085 L73.6495 15.9085 73.0495 14.8085 73.2495 14.1085 Cb81.6495 15.1085 m81.9495 14.2085 81.1495 13.8085 80.8495 13.2085 C80.2495 12.9085 80.2495 13.6085 79.9495 13.9085 C79.9495 14.7085 80.7495 15.4085 81.6495 15.1085 Cb69.1495 12.4085 m69.1495 12.2085 69.1495 11.8085 68.8495 11.7085 C68.1495 11.7085 L67.8495 12.4085 68.6495 12.5084 69.1495 12.4085 Cb80.6495 8.8085 m80.1495 8.6085 79.6495 8.2085 78.9495 8.4085 C78.5495 8.5084 78.7495 9.0084 78.7495 9.3085 C79.2495 10.2085 80.7495 9.7085 80.6495 8.8085 Cb191.7495 5.2085 m192.0495 5.2085 L192.6495 5.7085 192.8495 6.8085 192.4495 7.2085 C192 7.8125 l191.4375 7.25 l191.5 6.3125 l191.7495 5.2085 Lb185.7337 1.3891 m185.2073 2.5772 186.0495 4.1959 186.0495 5.5084 C186.7495 5.5084 L186.2995 4.4585 187.2557 3.0147 186.9183 1.8944 C186.8125 -0.625 L186.9146 -0.8295 186.1728 -1.9615 186.2495 -2.1915 C186.0495 -2.1915 L185.4375 -0.75 L185.7337 1.3891 Lb25.2495 -102.2915 m25.0495 -102.5915 24.7495 -102.4916 24.4495 -102.4916 C23.8495 -100.8915 24.6495 -99.2915 24.7495 -97.6915 C27.3495 -98.2915 24.9495 -100.6915 25.2495 -102.2915 Cbu155 62.875 m153.9 63.5751 150.9495 66.4085 150.2495 68.1085 C150.2495 70.5084 L152.5495 71.1085 152.5495 68.2085 153.8495 67.2085 C156 63.125 L159.5 56.875 L160 55.125 162.0495 53.9085 162.4495 53.0084 C162.4495 52.3085 L161.5495 51.5084 158.725 55.7251 158.625 56.625 C155 62.875 Lb66.4495 14.4085 m66.4495 13.9085 66.6495 13.3085 66.2495 12.9085 C65.4495 13.2085 64.4495 13.7085 64.0495 14.6085 C63.1495 17.4085 66.6495 15.6085 66.4495 14.4085 Cbu65.0495 67.2085 m66.9495 68.1085 69.0495 69.4085 71.0495 69.3085 C72.3495 68.2085 72.4495 66.7085 73.2495 65.5084 C72.8495 64.4085 73.0495 62.7085 71.5495 62.6085 C68.125 62.25 l64.75 62.625 l61.375 62.625 61.375 63.75 v61.375 64.875 65.0495 67.2085 Yb49.9495 58.3085 m49.9495 57.6085 50.0495 56.7085 49.2495 56.6085 C47.6495 56.3085 46.6495 57.9085 46.0495 59.0084 C46.0495 60.4085 L47.4495 60.0084 49.0495 59.6085 49.9495 58.3085 Cb69.8495 50.1085 m69.9495 49.6085 69.7495 48.9085 69.1495 49.2085 C68.6495 49.1085 68.2495 49.2085 67.9495 49.6085 C67.8495 50.2085 67.9495 50.4085 68.4495 50.6085 C69.0495 50.8085 69.3495 50.3085 69.8495 50.1085 Cb61.9495 48.9085 m61.8495 48.3085 61.6495 47.6085 60.9495 47.5084 C59.6495 47.1085 58.8495 48.1085 57.8495 48.4085 C57.8495 50.4085 L59.5495 50.6085 60.8495 50.1085 61.9495 48.9085 Cb62.4495 35.5084 m62.4495 33.9085 60.9495 32.5084 62.8495 31.4085 C61.8495 30.1085 59.5495 31.0084 58.3495 29.7085 C57.0495 31.8085 61.1495 32.9085 60.7495 35.2085 C60.6495 36.0084 60.7495 36.7085 61.4495 37.2085 C62.7495 37.4085 61.8495 36.0084 62.4495 35.5084 Cb57.3495 34.0084 m56.8495 33.4085 56.1495 33.3085 55.4495 33.1085 C55.3495 33.9085 55.8495 34.7085 56.6495 35.0084 C57.1495 34.8085 57.5495 34.8085 57.3495 34.0084 Cb209.7495 31.6085 m209.5495 31.0084 209.2495 30.0084 208.3495 30.0084 C207.7495 30.7085 207.2495 31.9085 208.3495 32.6085 C209.0495 32.9085 209.5495 32.1085 209.7495 31.6085 Cb202.0495 26.1085 m202.2495 25.5084 201.7495 25.2085 201.6495 24.7085 C200.8495 24.4085 200.3495 25.2085 200.1495 25.6085 C200.2495 26.2085 199.8495 27.0084 200.6495 27.3085 C201.2495 27.1085 201.9495 26.8085 202.0495 26.1085 Cbu53.2495 67.9085 m51.0495 66.3085 48.8495 64.5084 45.6495 65.2085 C46.2495 66.6085 46.8495 68.1085 48.2495 68.8085 C49.9495 69.0084 51.7495 69.3085 53.0495 70.5084 C54.625 71.5 56.625 72.625 v58.625 73.75 59.75 72.25 58 71.125 c56.25 70 53.2495 67.9085 Yb30.2495 52.0084 m30.0495 51.0084 29.7495 49.8085 28.5495 49.6085 C27.8495 49.6085 L27.3495 50.8085 28.8495 52.9085 30.2495 52.0084 Cb75.7586 39.2395 m77.3722 40.6109 78.0839 44.1415 81.1495 43.4085 C84.0495 41.5084 79.7495 40.0084 80.6495 38.1085 C80.6495 36.7085 L80.4495 33.6085 L77.2495 31.9085 74.1495 28.7085 70.0495 30.4085 C69.5495 30.9085 70.1495 31.7085 69.6495 32.1085 C65.7495 31.5084 63.6495 25.4085 59.0495 25.9085 C57.0495 25.4085 58.2495 23.5084 58.5495 22.5084 C56.6495 19.7085 53.4495 22.7085 51.3495 22.8085 C50.8495 20.6085 50.4495 18.4085 49.9495 16.3085 C51.6495 14.2085 53.8495 16.2085 55.9495 16.3085 C56.6495 18.3085 58.3495 19.5084 60.2495 20.1085 C64.6495 22.8085 66.7495 17.7085 69.8495 16.0084 C70.2495 17.7085 69.9495 18.7085 69.6495 20.4085 C69.9495 22.3085 71.5495 20.5084 72.4495 20.6085 C74.8495 19.2085 73.6495 15.3085 76.3495 13.9085 C77.1495 17.1085 81.8495 15.3085 81.8495 18.9085 C81.9495 20.5084 83.7495 21.0084 84.7495 22.0084 C86.2495 23.1085 86.5495 21.3085 87.6495 20.6085 C88.6495 20.8085 89.3495 22.0084 90.2495 22.8085 C91.0495 23.1085 92.2495 24.0084 93.1495 23.0084 C91.4495 21.1085 L92.1495 20.4085 92.7495 19.5084 93.8495 19.9085 C95.1495 19.5084 95.1495 18.1085 95.7495 17.2085 C94.9495 15.2085 92.8495 15.2085 90.9495 15.3085 C87.6495 18.7085 85.6495 13.2085 82.8495 12.7085 C83.2495 10.2085 86.0495 12.4085 87.8495 11.7085 C89.1495 10.6085 91.3495 9.3085 90.4495 7.4085 C89.0495 5.8085 88.7495 4.1085 86.8495 2.8085 C85.7495 2.4085 84.3495 2.6085 83.5495 3.6085 C82.2495 4.1085 81.7495 2.7085 80.8495 2.1085 C79.5495 2.3085 78.6495 3.6085 77.5495 4.3085 C75.8495 4.4085 73.6495 4.2085 72.0495 3.6085 C70.7495 5.7085 68.6495 3.6085 67.2495 5.2085 C66.9495 7.8085 64.5495 6.0084 63.1495 6.2085 C61.1495 7.0084 64.1495 9.6085 61.4495 10.0084 C56.6495 10.1085 51.6495 11.9085 46.5495 11.2085 C45.6495 10.4085 44.8495 9.3085 43.6495 9.1085 C40.8993 7.4214 L38.0627 6.5408 35.7749 3.4087 33.1495 1.9085 C33.3495 -0.6915 33.9495 -3.6915 32.6495 -6.2915 C31.4495 -11.5915 34.2495 -15.7915 36.0495 -20.1915 C37.3495 -20.9916 38.5495 -21.6915 40.3495 -21.3915 C45.0495 -25.2915 49.9495 -20.8915 54.9495 -23.2915 C55.0495 -23.9916 54.7495 -24.5915 54.2495 -24.9916 C58.2495 -24.7915 57.9495 -29.2915 59.5495 -31.4916 C60.0495 -33.5915 L61.3495 -36.2915 62.0495 -39.3915 63.6495 -41.9916 C63.3495 -45.4916 65.5495 -49.7915 61.6495 -52.0915 C60.7495 -53.7915 63.3495 -54.4916 63.1495 -56.1915 C67.2495 -59.7915 66.7495 -65.8915 72.4495 -68.1915 C74.1495 -70.0915 L76.5495 -70.3915 L76.875 -69.875 77.8125 -69.5625 v78.75 -69.25 84.5625 -70.375 85.6495 -68.3915 C86.424 -65.4705 89.1495 -62.9916 91.9495 -61.9916 C92.4495 -60.6915 90.9495 -59.6915 91.4495 -58.0915 C89.7495 -54.4916 95.7495 -54.0915 96.0495 -50.6915 C99.6495 -48.7915 97.9495 -43.1915 98.4495 -40.0915 C97.3495 -37.9916 98.2495 -36.4916 99.6495 -34.7915 C101.2495 -32.8915 L104.0495 -28.9916 108.7495 -25.4916 108.7495 -20.6915 C106.2495 -19.3915 103.8495 -22.3915 101.7495 -19.9916 C98.0495 -16.4916 95.1495 -11.6915 90.9495 -8.8915 C90.0495 -7.1915 87.4495 -5.5915 89.0495 -3.3915 C89.4495 -2.2915 90.1495 -1.0915 89.0495 0.0084 C89.2752 1.3769 L90.1704 1.3944 91.0662 1.4226 91.9626 1.4617 C92.1685 -0.0348 L92.3796 -0.4737 92.8586 -0.1945 93.1495 -0.2915 C97.6495 -6.7915 L98.6495 -9.6915 99.4495 -13.8915 103.2495 -14.3915 C104.9495 -15.1915 106.9495 -14.2915 107.5495 -12.4916 C111.5495 -12.0915 113.2495 -7.6915 116.8495 -6.2915 C116.9495 -4.4916 119.2495 -3.4916 118.5495 -1.6915 C117.1495 -1.2915 116.8495 -3.4916 115.4495 -2.8915 C113.7495 -2.3915 115.6495 -1.0915 114.7495 -0.4916 C114.2495 -0.9916 L111.9495 -0.1915 110.8495 -3.4916 108.2495 -2.3915 C106.8495 -1.4916 105.6495 -0.0915 105.1495 1.4085 C104.1495 3.1085 L103.9495 3.6085 103.5495 4.0084 103.6495 4.8085 C105.337 7.7147 107.0245 3.5897 109.2064 3.7219 C115.0851 3.0924 L118.958 2.6724 123.5865 5.3646 126.7495 1.6085 C126.9495 -1.8915 130.2495 1.3085 132.2495 0.7085 C132.9495 0.4085 133.8495 -0.4916 133.2495 -1.1915 C131.1495 -4.6915 135.7495 -3.4916 136.8495 -5.0915 C138.2495 -8.6915 140.8495 -13.4916 145.2495 -13.4916 C145.2495 -12.4916 L143.1495 -10.3915 143.3495 -7.1915 142.3495 -4.5915 C135.2495 -0.6915 146.2495 1.8085 144.4495 6.7085 C144.1495 7.2085 143.1495 7.5084 143.5495 8.4085 C146.1495 10.1085 148.8495 11.6085 151.6495 12.7085 C152.4495 11.7085 152.4495 10.6085 151.6495 9.6085 C154.0495 7.2085 157.2495 10.3085 159.3495 6.9085 C160.3495 3.7085 161.5495 0.0084 164.6495 -1.6915 C165.8495 -2.8915 166.4495 -5.6915 168.2495 -5.2915 C170.0495 -1.6915 165.4495 -2.2915 163.9495 -0.4916 C162.0495 1.1085 161.7495 3.6085 162.2495 6.0084 C162.7495 11.0084 166.7495 5.2085 168.7495 8.4085 C170.8495 13.8085 164.2495 13.6085 162.2495 16.8085 C162.6495 20.0084 163.0495 23.5084 165.6495 25.6085 C165.9495 29.3085 165.3495 33.8085 162.9495 36.9085 C161.5591 40.0606 L160.4726 42.6357 156.6077 44.3769 156.0495 47.0084 C154.7495 48.1085 154.8495 46.2085 153.8495 45.8085 C150.1495 45.4085 151.9495 50.4085 150.4495 52.5084 C152.8495 54.7085 155.4495 51.5084 157.9495 51.1085 C157.5495 52.8085 155.7495 53.8085 154.3495 54.4085 C153.0265 54.7864 151.6638 57.4269 150.4614 57.9786 C147.7328 61.4418 l143.3162 65.7752 l143.0495 67.6085 L141.1495 72.0084 L140.1495 73.9085 138.5495 73.3085 136.5495 73.4085 C133.5495 74.7085 129.4495 73.5084 126.9495 76.3085 C126.8295 77.3876 123.75 79.375 v122.7235 80.0375 119.3125 81 118.5 81.375 c117.5812 81.7991 116.1259 84.25 115.375 84.25 c113.375 84.25 112.3995 84.6085 y108.9495 86.6085 L106.5495 88.2085 103.6495 88.8085 101.2495 90.7085 C100.1495 90.6085 99.1495 90.3085 98.1495 89.7085 C97.9495 86.1085 102.7495 86.2085 104.1495 83.2085 C106.7495 76.3085 104.5495 68.2085 103.2495 61.4085 C101.7495 60.1085 102.6495 57.9085 101.0495 56.6085 C98.2495 55.6085 100.3495 53.1085 100.3495 51.1085 C99.7495 49.7085 98.1495 50.8085 97.2495 50.1085 C96.5495 49.1085 93.4495 50.3085 94.8495 48.2085 C94.5495 47.1085 93.1495 47.4085 92.4495 47.0084 C92.2495 46.6085 92.6495 46.3085 92.8495 46.0084 C92.9495 43.5084 90.0495 44.1085 88.8495 42.7085 C87.4495 42.7085 85.9495 41.6085 84.7495 42.7085 C84.7495 44.4085 85.9495 45.7085 86.8495 46.8085 C86.1495 47.5084 L83.0495 48.2085 79.3495 47.5084 76.8495 45.3085 C75.8495 41.9085 72.1495 42.1085 69.8495 40.5084 C72.2495 39.6085 L73.2495 37.9085 L72.7495 36.7085 73.0495 35.0084 72.9495 34.0084 C74.2495 33.9085 74.6495 35.1085 75.1495 36.0084 C75.5265 36.4797 75.5581 36.8227 75.3991 37.0776 C75.7586 39.2395 Lb168.0495 33.6085 m167.1495 33.7085 166.8495 35.0084 166.3495 35.7085 C167.2495 37.6085 L168.2495 36.8085 168.4495 34.9085 168.0495 33.6085 Cb-6.7505 34.5084 m-5.8505 33.3085 -7.1505 32.4085 -7.4505 31.4085 C-8.4505 31.0084 -8.6505 31.9085 -8.8505 32.6085 C-8.3505 34.1085 -9.9505 36.0084 -8.1505 36.4085 C-6.7505 34.5084 Lb176.8495 24.7085 m177.0495 24.1085 176.6495 23.6085 176.1495 23.5084 C174.5495 23.5084 174.2495 25.3085 173.7495 26.4085 C173.9495 27.3085 173.3495 28.6085 174.2495 29.0084 C175.5495 27.7085 174.4495 25.0084 176.8495 24.7085 Cb171.6495 25.9085 m171.9495 25.1085 171.5495 24.0084 171.1495 23.2085 C170.5495 23.4085 169.5495 22.8085 169.4495 23.7085 C169.3495 24.7085 170.5495 25.9085 171.6495 25.9085 Cb194.0625 10.3125 m194.8495 9.8085 L196.6495 10.0084 196.3495 12.3085 197.7495 13.2085 C200.6495 12.4085 198.1495 9.5084 199.9495 7.9085 C200.8495 8.5084 200.0495 9.9085 200.6495 10.8085 C201.6495 11.5084 201.8495 13.8085 203.7495 12.9085 C209.0495 15.6085 200.8495 16.0084 203.0495 19.6085 C201.6495 21.6085 L199.8495 21.7085 200.8495 19.2085 199.2495 18.9085 C198.7495 19.1085 198.4495 19.6085 198.0495 19.2085 c197.8837 19.035 197.681 18.823 v197.4783 18.611 197.9952 17.8266 197.5 17.5625 c196.875 17 l196.3798 16.7359 195.1703 17.1844 194.8437 16.875 c194.5172 16.5656 194.2755 15.854 194.3066 15.2936 c194.3184 15.0814 l194.3495 14.521 194.2766 13.6406 194.1562 13.125 c194.0359 12.6094 193.9656 11.7656 194 11.25 c194.0344 10.7344 194.0625 10.3125 yb185.5495 20.8085 m186.3495 18.1085 184.2495 17.1085 182.6495 15.6085 C182.1495 15.6085 L182.2495 17.5084 183.8495 18.9085 184.0495 20.8085 C184.5495 21.0084 185.1495 21.7085 185.5495 20.8085 Cb191.7495 12.4085 m191.7495 12.0084 L190.7495 11.5084 189.3495 11.7085 188.6495 12.7085 C188.5495 13.2085 188.7495 13.6085 189.1495 13.9085 C190.3495 14.1085 191.6495 13.6085 191.7495 12.4085 Cb178.0495 -6.7915 m176.8495 -2.2915 180.3495 2.1085 178.8495 6.7085 C178.1495 7.6085 178.9495 8.7085 179.7495 9.3085 C181.4495 8.6085 180.2495 5.4085 182.6495 5.0084 C181.8495 2.4085 180.9495 -0.4916 182.1495 -3.1915 C182.3125 -4.375 l181.6875 -5.4375 l180.3125 -5.625 l178.9375 -6.3125 l178.0495 -6.7915 Lb188.6495 -7.1915 m188.9495 -9.1915 187.0495 -10.4916 185.7495 -11.5915 C185.2495 -11.5915 L185.7495 -9.7915 187.1495 -8.0915 188.6495 -7.1915 Cb181.6495 -13.4916 m181.0495 -14.5915 179.2495 -15.0915 178.0495 -15.8915 C177.2495 -16.3915 177.0495 -17.6915 175.9495 -17.0915 C175.5495 -15.1915 179.3495 -15.1915 178.8495 -12.7915 C179.8495 -12.5915 180.8495 -12.8915 181.6495 -13.4916 Cb172.5495 -13.1915 m172.2495 -13.8915 172.2495 -14.6915 171.6495 -15.1915 C171.0495 -15.2915 170.4167 -14.75 170 -14.0833 C169.2495 -12.9916 L167.5495 -9.6915 163.4495 -10.1915 161.7495 -7.4916 C164.4495 -5.5915 166.8495 -8.6915 169.4495 -9.3915 C171.1495 -9.8915 L171.4078 -10.5804 172.4818 -10.4536 172.4559 -11.1713 C172.5495 -13.1915 Lb77.7278 96.2539 m70.7181 96.443 L66.2504 97.5971 61.2096 97.026 57.1495 98.8085 C50.9495 97.3085 46.9495 103.3085 41.2495 102.9085 C36.2495 100.2085 30.7495 98.3085 25.6495 95.7085 C22.9495 94.6085 21.0495 91.2085 17.7495 91.2085 C16.5495 90.4085 14.1828 89.7085 12.8162 87.5252 C6.4495 83.2085 L4.3495 82.0084 L2.8495 77.1085 -2.6505 78.3085 -5.0505 74.4085 C-5.2505 73.3085 -7.7475 70.7527 -7.0475 69.7527 C-6.9823 69.7889 -9.5833 66.9907 -9.5172 67.0252 C-11.8622 60.0084 L-13.8622 56.2085 -15.2505 52.3085 -16.5505 48.2085 C-19.3505 44.1085 -19.7505 39.0084 -21.8505 34.5084 C-22.8505 32.5084 -20.9505 31.2085 -21.1505 29.2085 C-22.7505 26.4085 -21.4505 21.9085 -25.1505 20.4085 c-26.6505 19.2085 L-26.9505 18.3085 -26.6505 17.3085 -27.1505 16.5084 C-30.9505 12.5084 -28.4505 6.8085 -29.5505 1.6085 C-29.3505 -1.4916 -31.0505 -5.1915 -29.0505 -7.9916 C-28.0505 -15.2915 -26.0505 -22.4916 -26.1505 -29.9916 C-24.2505 -33.8915 -24.8505 -38.5915 -23.7505 -42.7915 C-23.0505 -44.8915 L-20.8505 -50.5915 -20.1505 -57.4916 -16.0505 -62.6915 C-10.4505 -71.5915 -5.2505 -82.3915 4.5495 -87.8915 C-0.2505 -85.0915 1.6495 -79.1915 -3.8505 -76.7915 C-8.2505 -74.0915 -4.1505 -68.6915 -8.8505 -65.9916 C-8.3505 -63.5915 -9.1505 -60.7915 -9.1505 -58.3915 C-8.5505 -55.9916 -6.6505 -59.1915 -5.9505 -57.1915 C-5.6977 -56.2646 -5.5159 -54.9827 -5.9436 -54.0637 C-6.2505 -51.5915 L-5.6505 -49.4916 -6.4505 -46.6915 -5.5505 -44.6915 C-3.8505 -40.6915 -0.8505 -45.0915 1.4495 -44.3915 C2.4495 -42.2915 0.5495 -40.3915 1.2495 -38.3915 C-1.0505 -32.2915 6.1495 -28.4916 4.3495 -22.0915 C-0.4505 -16.6915 -7.7505 -12.1915 -7.9505 -4.7915 C-7.4505 -3.5915 L-7.4505 -1.9916 L-9.6505 3.7085 -13.0505 9.4085 -11.5505 16.0084 C-14.9505 18.1085 -12.8505 22.6085 -15.8505 24.9085 C-19.0505 26.5084 -14.3505 29.7085 -18.4505 30.7085 C-19.9505 33.8085 -19.0505 38.3085 -16.5505 41.0084 C-14.9505 45.1085 -14.9505 49.8085 -12.4505 53.5084 C-11.5505 54.4085 -12.4505 56.2085 -11.2505 57.1085 C-10.9505 57.9085 -11.7672 57.5252 -10.0388 59.2752 C-9.7672 59.4418 L-7.1005 61.8585 l-4.5172 68.3585 l-3.8535 71.1143 l-3.0072 71.555 -2.0998 71.8737 -1.4505 72.7085 C0.3495 73.5084 1.8495 71.5084 2.6495 70.5084 C3.5662 69.1918 l5.6495 66.2752 l5.5662 63.3585 l7.7328 61.6085 l8.6495 59.6918 l9.8495 57.3085 L12.6495 56.8085 14.4495 60.7085 16.8495 58.8085 C17.7495 59.3085 19.2495 59.8085 19.2495 60.9085 C20.0662 60.7752 l23.3333 60.8334 l23.625 59 l25.25 58.25 L25.6799 58.4698 27.8533 56.3945 28.375 56.75 C30.1277 57.9445 27.625 60.625 30.7495 62.4085 C31.587 64.4835 l33.25 66.125 34.212 68.296 v35.174 70.467 35.462 75.4835 y37.25 82.5 l38.6495 85.921 l39.6495 87.1085 L40.5495 88.0084 L47.75 88.25 50.125 88.625 v52.5 89 57.125 88.75 Y69 88.5 69.8269 86.8287 78.75 86.5 C81.7004 86.3913 87 86.5 89.0495 88.5084 C90.7495 88.5084 91.0495 90.5084 90.4495 91.6085 C90.8495 92.8085 92.1495 91.9085 92.6495 92.8085 C91.9495 93.4085 91.5495 94.0084 91.4495 94.8085 C92.0495 95.5084 92.7495 96.0084 93.6495 96.2085 C93.25 97.0625 93.1495 98.1085 V93.4375 99.5625 95.4495 98.6085 96.0495 99.6085 C94.0495 99.5084 91.9615 98.817 90.4495 98.4085 C82.6875 96.4375 77.7278 96.2539 Yb110.4495 -49.4916 m111.2495 -53.6915 106.8495 -56.2915 105.3495 -59.7915 C105.5495 -60.5915 105.0495 -61.1915 104.4495 -61.6915 C103.9495 -61.6915 L103.5495 -59.5915 106.7495 -56.3915 103.2495 -55.4916 C103.0495 -53.9916 104.2495 -53.3915 105.3495 -52.7915 C106.6495 -53.4916 107.5495 -51.6915 108.7495 -51.1915 C109.0495 -50.4916 109.2495 -49.1915 110.4495 -49.4916 Cb183.75 -51.8125 m183.85 -52.5126 181.2495 -55.0915 180.7495 -55.4916 C180.4495 -55.4916 L179.8495 -54.6915 180.25 -54 180.5 -53 C180.4495 -52.3915 L181.3495 -45.2915 180.0495 -37.1915 185.2495 -31.9916 C187.2495 -30.9916 188.5495 -28.7915 189.8495 -27.1915 C189.4495 -21.4916 191.9495 -16.9916 194.8495 -12.7915 C197.3495 -12.4916 196.3495 -9.4916 197.5495 -7.9916 C197.2495 -5.6915 197.7495 -3.5915 198.9495 -1.9916 C201.1495 -2.4916 199.5495 -5.8915 201.3495 -7.1915 C201.7495 -7.9916 202.5495 -7.9916 203.2495 -7.9916 C205.8495 -4.7915 205.5495 0.3085 204.4495 4.0084 C204.7495 6.2085 L205.6495 6.3085 205.9495 5.2085 206.1495 4.5084 C207.3495 -4.5915 211.2495 -13.1915 209.7495 -22.7915 C208.3101 -26.3156 208.2996 -30.6281 207.419 -34.396 C206.4495 -40.0915 L205.3495 -45.5915 200.3495 -49.3915 197.2495 -53.9916 C196.7495 -54.1915 196.3495 -54.6915 195.6495 -54.4916 C194.7495 -52.1915 198.6495 -48.0915 194.1495 -47.9916 C194.1495 -47.5915 L194.712 -47.0165 194.6495 -45.3915 v194.5499 -42.8036 191.1495 -43.3915 189.1495 -43.9916 C188.0031 -45.6839 186.8566 -47.9425 185.3197 -49.6935 C183.75 -51.8125 Lb196.0495 -59.7915 m196.9495 -62.4916 193.8495 -63.2915 192.2495 -64.7915 C191.8495 -62.8915 194.1495 -61.5915 195.3495 -59.7915 C196.0495 -59.7915 Lb193.2495 -75.8915 m191.0495 -79.3915 188.4495 -83.0915 185.2495 -85.6915 C184.2495 -87.8915 181.9495 -88.2915 180.2495 -89.5915 C180.3495 -87.8915 182.5495 -86.3915 183.3495 -84.7915 C185.4495 -80.5915 190.2495 -78.9916 192.7495 -75.3915 C193.2495 -75.8915 Lb176.1495 -92.8915 m176.7495 -95.5915 173.1495 -96.7915 171.6495 -98.6915 C170.4495 -98.6915 L171.3495 -96.2915 173.8495 -94.6915 175.6495 -92.8915 C176.1495 -92.8915 Lb135.6495 -100.5915 m135.6495 -101.0915 135.4495 -102.5915 136.5495 -102.7915 C137.9495 -102.4916 139.0495 -101.6915 140.6495 -101.9916 C141.0495 -102.7915 139.7495 -103.4916 140.8495 -103.9916 C143.2495 -103.9916 L143.4495 -104.9916 141.9495 -104.7915 142.0495 -105.8915 C142.5495 -106.9916 143.6495 -106.4916 144.4495 -106.5915 C142.5495 -108.6915 139.3495 -108.3915 138.0495 -111.3915 C133.5495 -113.0915 129.4495 -115.6915 125.0495 -117.3915 C122.8495 -119.2915 120.1495 -120.3915 117.3495 -119.9916 C114.3495 -116.3915 110.9495 -120.6915 107.7495 -120.9916 C101.1495 -122.0915 94.6495 -124.9916 87.3495 -123.1915 C82.1495 -125.4916 76.4495 -123.7915 70.8495 -123.5915 C62.8495 -124.3915 57.6495 -118.6915 49.9495 -118.7915 C44.1495 -118.7915 46.6495 -111.2915 41.2495 -110.6915 C38.1495 -110.3915 34.6495 -110.6915 33.3495 -107.0915 C31.5495 -105.3915 27.1495 -105.7915 27.8495 -101.9916 C31.9495 -100.9916 32.5495 -106.8915 36.7495 -106.3915 C40.0495 -108.8915 44.3495 -108.8915 47.5495 -111.5915 C51.6495 -112.3915 55.6495 -113.0915 60.2495 -112.7915 C60.6495 -112.2915 61.5495 -111.9916 61.2495 -111.1915 C60.9495 -110.3915 59.8495 -109.9916 60.2495 -108.9916 C62.2495 -108.7915 62.5495 -106.4916 63.3495 -105.1915 C70.9495 -105.7915 78.7495 -105.2915 85.6495 -103.4916 C88.8495 -103.6915 93.1495 -106.8915 95.2495 -102.4916 C96.9495 -101.4916 98.6495 -103.3915 100.8495 -102.7915 C101.9495 -102.1915 102.6495 -100.5915 104.1495 -101.0915 C105.9495 -105.4916 108.0495 -99.7915 110.8495 -101.2915 C111.8495 -101.8915 112.6495 -102.8915 113.5495 -103.6915 C119.6495 -105.8915 124.4495 -98.3915 130.5495 -102.7915 C132.3495 -102.2915 133.6495 -100.7915 135.6495 -100.5915 CbUUUUU1 Ap600 Ar1.2 w85.6667 95.8513 m109.2605 95.8513 128.3877 82.0005 128.3877 64.9154 c128.3877 47.8302 109.2605 33.9794 85.6667 33.9794 c62.0728 33.9794 42.9456 47.8302 42.9456 64.9154 c42.9456 82.0005 62.0728 95.8513 85.6667 95.8513 cs84.25 0.5424 m130.3312 0.5424 167.6886 27.6107 167.6886 61 c167.6886 94.3893 130.3312 121.4576 84.25 121.4576 c38.1688 121.4576 0.8114 94.3893 0.8114 61 c0.8114 27.6107 38.1688 0.5424 84.25 0.5424 cs2 J 2 M84.3333 -34.4933 m147.8577 -34.4933 199.356 3.0751 199.356 49.4167 c199.356 95.7582 147.8577 133.3267 84.3333 133.3267 c20.809 133.3267 -30.6894 95.7582 -30.6894 49.4167 c-30.6894 3.0751 20.809 -34.4933 84.3333 -34.4933 cs0 J 4 M-58.4662 -12.6526 m-24.0304 -48.8771 24.5244 -70.2277 85.6667 -70.2083 C148.4346 -70.2276 196.8435 -49.2444 230.7774 -13.588 cSLB%AI5_EndLayer--%AI5_BeginLayer1 1 1 1 0 0 0 79 128 255 Lb(Text) Ln0 A*u0 Ap0 O0 g600 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D0 XR-16.6607 88.2105 m-6.1411 88.2105 L1.3244 62.6804 L1.4213 62.6804 L10.3411 88.2105 L20.3274 88.2105 L29.2472 62.6804 L29.3442 62.6804 L36.8097 88.2105 L47.3292 88.2105 L35.9371 53.4665 L23.5754 53.4665 L15.3827 76.4052 L15.2858 76.4052 L7.0932 53.4665 L-5.2685 53.4665 L-16.6607 88.2105 lf*U*u50.5314 76.0213 m50.5314 86.1949 56.3001 88.5944 65.9956 88.5944 c83.2534 88.5944 L92.9489 88.5944 98.7177 86.1949 98.7177 76.0213 c98.7177 65.6557 L98.7177 55.482 92.9489 53.0826 83.2534 53.0826 c65.9956 53.0826 L56.3001 53.0826 50.5314 55.482 50.5314 65.6557 C50.5314 76.0213 lf1 D61.5841 68.9669 m61.5841 63.9281 62.6506 62.0085 67.7407 62.0085 c81.5083 62.0085 L86.5984 62.0085 87.6649 63.9281 87.6649 68.9669 c87.6649 72.71 L87.6649 77.029 86.5984 79.6684 80.9265 79.6684 c68.3225 79.6684 L62.6506 79.6684 61.5841 77.029 61.5841 72.71 C61.5841 68.9669 lf*U*u0 D104.4319 76.0213 m104.4319 86.1949 110.2007 88.5944 119.8961 88.5944 c132.5487 88.5944 L147.8675 88.5944 149.855 85.3311 149.7581 75.4934 c138.9962 75.4934 L138.9962 76.4532 L138.9962 78.9486 137.154 79.6684 133.9545 79.6684 c122.223 79.6684 L116.5512 79.6684 115.4847 77.029 115.4847 72.71 c115.4847 68.9669 L115.4847 63.9281 116.5512 62.0085 121.6413 62.0085 c133.1304 62.0085 L137.9781 62.0085 139.4324 62.4884 139.4324 66.8074 c150.1944 66.8074 L150.1944 63.5442 L150.1944 57.6895 148.0614 53.0826 137.251 53.0826 c119.8961 53.0826 L110.2007 53.0826 104.4319 55.482 104.4319 65.6557 C104.4319 76.0213 lf*U*u156.6818 88.2105 m195.0757 88.2105 L195.0757 80.1483 L167.4437 80.1483 L167.4437 74.5816 L193.6214 74.5816 L193.6214 67.3833 L167.4437 67.3833 L167.4437 61.8166 L195.7059 61.8166 L195.7059 53.4665 L156.6818 53.4665 L156.6818 88.2105 lf*U*u-38.5843 89.0178 m-40.8657 85.0743 L-52.1529 87.8687 L-52.174 87.8323 L-44.4403 78.8954 L-46.606 75.1517 L-58.2086 77.4009 L-58.2296 77.3645 L-50.1805 68.9728 L-52.4619 65.0292 L-63.1487 76.9115 L-60.4678 81.5457 L-50.0043 79.5916 L-49.9832 79.628 L-56.8933 87.7246 L-54.2124 92.3588 L-38.5843 89.0178 lf*U*u-57.7304 65.6898 m-53.5606 64.1338 -53.4506 61.4263 -54.9185 57.4925 c-57.5314 50.4905 L-58.9992 46.5568 -60.8561 44.5832 -65.0258 46.1392 c-69.2742 47.7245 L-73.444 49.2805 -73.554 51.988 -72.0861 55.9217 c-69.4732 62.9238 L-68.0054 66.8575 -66.1485 68.8311 -61.9788 67.2751 C-57.7304 65.6898 lf1 D-62.2951 62.2842 m-64.3603 63.0549 -65.3085 62.9158 -66.0791 60.8506 c-68.1635 55.2647 L-68.9342 53.1995 -68.3089 52.4732 -66.2437 51.7025 c-64.7095 51.1301 L-62.9394 50.4695 -61.6961 50.4985 -60.8374 52.7998 c-58.9291 57.9136 L-58.0704 60.2148 -58.9907 61.0512 -60.7609 61.7118 C-62.2951 62.2842 lf*U*u0 D-60.6943 41.6438 m-63.5875 27.8729 L-64.3259 24.3582 -66.2716 23.7798 -68.9436 24.3412 c-69.889 24.5398 L-71.8827 24.9587 -72.9593 25.657 -73.0121 27.8571 c-73.0532 27.8657 L-73.5849 26.561 -74.4184 25.5558 -76.8643 26.0697 c-79.3924 26.6008 L-78.4338 31.1637 L-76.6456 30.788 L-75.0835 30.4598 -74.4747 30.8041 -74.1767 32.2223 c-72.6697 39.3955 L-76.5337 40.2073 L-75.5751 44.7702 L-60.6943 41.6438 lf1 D-68.97 38.6182 m-70.5548 31.075 L-70.8139 29.8418 -70.4156 29.286 -69.3468 29.0614 c-68.8535 28.9578 L-67.5381 28.6814 -67.1533 29.2873 -66.851 30.7261 c-65.3526 37.8582 L-68.97 38.6182 lf*U*u0 D-64.8171 20.2874 m-65.1762 15.6398 L-76.4393 16.51 L-77.2464 6.0634 L-81.1403 6.3642 L-79.9741 21.4584 L-64.8171 20.2874 lf*U*u-66.1185 3.1052 m-65.3211 -10.9418 L-65.0569 -15.5961 -66.4945 -17.3183 -70.2474 -17.5314 c-74.8598 -17.7932 L-78.6126 -18.0062 -80.236 -16.4578 -80.5002 -11.8034 c-81.2976 2.2435 L-66.1185 3.1052 lf1 D-77.1338 -2.1895 m-76.6649 -10.4499 L-76.5518 -12.4417 -75.9417 -13.1853 -73.7822 -13.0627 c-71.7276 -12.946 L-69.5681 -12.8234 -69.0461 -12.0156 -69.1592 -10.0238 c-69.6281 -1.7634 L-77.1338 -2.1895 lf*U*u0 D-67.8688 -31.5781 m-63.5955 -30.3327 -61.8886 -32.4376 -60.7137 -36.469 c-58.6223 -43.6448 L-57.4474 -47.6762 -57.7562 -50.3686 -62.0294 -51.614 c-66.3833 -52.8829 L-70.6566 -54.1284 -72.3635 -52.0234 -73.5384 -47.992 c-75.6298 -40.8162 L-76.8047 -36.7848 -76.4959 -34.0924 -72.2227 -32.847 C-67.8688 -31.5781 lf1 D-69.4924 -37.0374 m-71.6089 -37.6543 -72.2859 -38.3327 -71.6691 -40.4492 c-70.0007 -46.1737 L-69.3839 -48.2902 -68.4484 -48.4987 -66.3319 -47.8818 c-64.7597 -47.4236 L-62.9455 -46.8949 -61.9662 -46.1283 -62.6535 -43.77 c-64.1809 -38.5292 L-64.8682 -36.1708 -66.1061 -36.0505 -67.9202 -36.5792 C-69.4924 -37.0374 lf*U*u0 D-60.8658 -54.5677 m-56.8287 -52.6947 -54.8252 -54.5191 -53.0582 -58.3277 c-50.7523 -63.2979 L-47.9605 -69.3155 -48.8932 -70.697 -52.8147 -72.4701 c-54.776 -68.2425 L-54.3951 -68.0658 L-53.4049 -67.6064 -53.455 -66.7503 -54.0381 -65.4934 c-56.1761 -60.885 L-57.2098 -58.657 -58.4515 -58.724 -60.1654 -59.5191 c-61.6507 -60.2082 L-63.6502 -61.1359 -64.2176 -61.9082 -63.2899 -63.9077 c-61.1961 -68.4209 L-60.3126 -70.3252 -59.8571 -70.8081 -58.1433 -70.013 c-56.1819 -74.2406 L-57.4768 -74.8413 L-59.8001 -75.9192 -62.0169 -75.9294 -63.9871 -71.6828 c-67.15 -64.8655 L-68.917 -61.0569 -69.0162 -58.349 -64.979 -56.476 C-60.8658 -54.5677 lf*U*u-46.2456 -72.6617 m-37.2423 -86.644 L-40.2083 -88.5538 L-46.6879 -78.4907 L-48.7358 -79.8094 L-42.5972 -89.3428 L-45.2454 -91.048 L-51.384 -81.5146 L-53.4319 -82.8332 L-46.8045 -93.1258 L-49.8763 -95.1038 L-59.0274 -80.892 L-46.2456 -72.6617 lf*U*u-31.1135 -94.2745 m-27.1623 -98.8783 L-33.2543 -115.117 L-36.6313 -111.1822 L-35.5356 -108.333 L-41.6879 -101.1645 L-44.6157 -101.879 L-48.0063 -97.9283 L-31.1135 -94.2745 lf1 D-38.068 -100.3538 m-34.1852 -104.878 L-31.821 -98.8653 L-38.068 -100.3538 lf*U*u0 D-20.5592 -106.2904 m-15.095 -111.0092 L-15.6867 -125.0847 L-15.6549 -125.1121 L-8.4394 -116.7569 L-4.9131 -119.8022 L-14.8447 -131.3025 L-20.3089 -126.5837 L-19.7172 -112.5082 L-19.749 -112.4808 L-26.9645 -120.836 L-30.4908 -117.7907 L-20.5592 -106.2904 lf*U*u3.6343 -132.0807 m5.7434 -128.1632 8.4398 -128.4232 12.1355 -130.413 c16.9583 -133.0096 L22.7975 -136.1534 22.8786 -137.8178 20.8022 -141.586 c16.6999 -139.3774 L16.8989 -139.0078 L17.4163 -138.0469 16.8633 -137.3917 15.6437 -136.7351 c11.172 -134.3275 L9.01 -133.1635 8.0563 -133.9609 7.1609 -135.624 c6.3849 -137.0653 L5.3403 -139.0055 5.3489 -139.9635 7.2891 -141.0081 c11.6685 -143.366 L13.5163 -144.3609 14.1701 -144.4745 15.0655 -142.8115 c19.1677 -145.0201 L18.4912 -146.2766 L17.2775 -148.531 15.5093 -149.8672 11.3887 -147.6486 c4.7734 -144.087 L1.0777 -142.0972 -0.6238 -139.9894 1.4854 -136.072 C3.6343 -132.0807 lf*U*u26.5862 -137.7691 m30.8917 -139.5543 L25.0697 -153.5955 L20.7642 -151.8103 L26.5862 -137.7691 lf*U*u34.0381 -141.0455 m47.5125 -145.0939 L50.9515 -146.1272 51.363 -148.1146 50.5775 -150.729 c50.2995 -151.6541 L49.7134 -153.6049 48.9266 -154.6183 46.7302 -154.4846 c46.7181 -154.5249 L47.9729 -155.165 48.9038 -156.0805 48.1848 -158.4738 c47.4415 -160.9474 L42.9769 -159.606 L43.5026 -157.8563 L43.9618 -156.3279 43.6704 -155.6922 42.2828 -155.2752 c35.264 -153.1664 L34.128 -156.9473 L29.6633 -155.6059 L34.0381 -141.0455 lf1 D36.3516 -149.5464 m43.7324 -151.764 L44.9391 -152.1266 45.5265 -151.7768 45.8407 -150.7311 c45.9858 -150.2484 L46.3725 -148.9613 45.8014 -148.5266 44.3937 -148.1036 c37.4151 -146.0069 L36.3516 -149.5464 lf*U*u0 D53.7644 -152.3248 m54.4081 -147.9189 57.0331 -147.2412 61.1896 -147.8485 c66.6138 -148.641 L73.1811 -149.6005 73.8267 -151.1382 73.1626 -155.3926 c68.5489 -154.7185 L68.6096 -154.3028 L68.7675 -153.2221 68.0233 -152.795 66.6517 -152.5946 c61.6223 -151.8598 L59.1908 -151.5045 58.5666 -152.5807 58.2933 -154.4511 c58.0564 -156.0722 L57.7376 -158.2543 58.0734 -159.1524 60.2555 -159.4713 c65.181 -160.1909 L67.2592 -160.4946 67.9131 -160.3778 68.1863 -158.5074 c72.8 -159.1815 L72.5936 -160.5947 L72.2231 -163.1302 71.0172 -164.9917 66.3827 -164.3146 c58.9426 -163.2275 L54.7861 -162.6202 52.4648 -161.2197 53.1085 -156.8138 C53.7644 -152.3248 lf*U*u76.8342 -150.0771 m81.4954 -150.0636 L81.5209 -158.84 L81.5265 -160.7716 82.2216 -161.5254 84.1322 -161.5199 c88.7514 -161.5065 L90.662 -161.5009 91.3527 -160.743 91.3471 -158.8114 c91.3215 -150.035 L95.9827 -150.0215 L96.0111 -159.8057 L96.0221 -163.585 94.0747 -165.3963 89.7915 -165.4087 c83.1148 -165.4282 L78.8316 -165.4406 76.8737 -163.6406 76.8627 -159.8613 C76.8342 -150.0771 lf*U*u99.0946 -149.6331 m103.7151 -149.0099 L105.2256 -160.2072 L115.6113 -158.8062 L116.1335 -162.6775 L101.1273 -164.7017 L99.0946 -149.6331 lf*U*u122.5403 -145.5333 m128.3921 -143.9238 L140.4832 -156.367 L135.4819 -157.7426 L133.3719 -155.5351 L124.2601 -158.0414 L123.6568 -160.9952 L118.6352 -162.3764 L122.5403 -145.5333 lf1 D125.0718 -154.4204 m130.8224 -152.8386 L126.3917 -148.1331 L125.0718 -154.4204 lf*U*u0 D135.4614 -141.892 m151.8428 -135.0373 L153.3013 -138.5227 L147.2599 -141.0507 L151.6676 -151.5844 L147.3689 -153.3831 L142.9612 -142.8494 L136.9198 -145.3774 L135.4614 -141.892 lf*U*u153.8967 -133.7428 m158.0192 -131.568 L165.1116 -145.0127 L160.9891 -147.1874 L153.8967 -133.7428 lf*U*u163.9566 -134.7192 m161.4819 -131.0218 162.9737 -128.7607 166.4619 -126.4261 c172.6708 -122.2705 L176.159 -119.9359 178.8181 -119.4189 181.2928 -123.1163 c183.8141 -126.8835 L186.2888 -130.581 184.797 -132.8421 181.3088 -135.1767 c175.0999 -139.3323 L171.6117 -141.6669 168.9526 -142.1839 166.478 -138.4865 C163.9566 -134.7192 lf1 D169.649 -134.6216 m170.8747 -136.4529 171.7253 -136.8937 173.5566 -135.6681 c178.5098 -132.3529 L180.3411 -131.1273 180.2578 -130.1728 179.0322 -128.3415 c178.1217 -126.9812 L177.0711 -125.4115 176.0454 -124.7091 174.0048 -126.0748 c169.4702 -129.1098 L167.4297 -130.4755 167.688 -131.6916 168.7385 -133.2612 C169.649 -134.6216 lf*U*u0 D180.4586 -116.9925 m185.7863 -112.1162 L199.7009 -114.3515 L199.7319 -114.3232 L192.2756 -106.1767 L195.7139 -103.0297 L205.9769 -114.2428 L200.6492 -119.1191 L186.7345 -116.8838 L186.7035 -116.9121 L194.1598 -125.0586 L190.7216 -128.2056 L180.4586 -116.9925 lf*U*u204.5914 -92.709 m214.2835 -79.198 L217.1495 -81.2539 L210.1741 -90.9777 L212.153 -92.3973 L218.7613 -83.1853 L221.3202 -85.0209 L214.7119 -94.2329 L216.6908 -95.6525 L223.8253 -85.7069 L226.7936 -87.8362 L216.9424 -101.569 L204.5914 -92.709 lf*U*u225.488 -74.8454 m215.5561 -77.4531 L218.3588 -72.1191 L225.2581 -70.4082 L222.7533 -63.7558 L225.5561 -58.4218 L229.0427 -68.0803 L239.2559 -65.0275 L236.3457 -70.5659 L229.1239 -72.4394 L231.6778 -79.4496 L228.7676 -84.988 L225.488 -74.8454 lf*U*u226.3037 -56.3749 m230.541 -44.4016 L232.0188 -40.2258 234.4738 -39.9588 237.284 -40.9534 c238.5111 -41.3876 L240.6484 -42.144 242.7733 -43.9427 241.6737 -47.0498 c238.585 -55.7775 L242.1869 -57.0522 L240.6321 -61.4457 L226.3037 -56.3749 lf1 D235.0227 -54.5168 m237.439 -47.689 L237.8032 -46.6599 237.2704 -46.026 236.4194 -45.7248 c235.8653 -45.5287 L234.8955 -45.1855 234.1733 -45.4644 233.7041 -46.7903 c231.4208 -53.2421 L235.0227 -54.5168 lf*U*u0 D232.9825 -36.795 m236.3663 -20.5166 L239.8193 -21.2344 L237.384 -32.9499 L239.7682 -33.4455 L242.0754 -22.3466 L245.1584 -22.9875 L242.8513 -34.0864 L245.2355 -34.582 L247.7263 -22.5993 L251.3027 -23.3427 L247.8633 -39.8883 L232.9825 -36.795 lf*U*u236.8498 -17.5015 m237.7802 -3.4648 L238.0176 0.1177 239.8623 0.9634 242.5858 0.7829 c243.5495 0.719 L245.5817 0.5843 246.7453 0.0442 247.1065 -2.126 c247.1484 -2.1288 L247.4915 -0.7627 248.1754 0.3493 250.6685 0.184 c253.2454 0.0132 L252.9371 -4.6377 L251.1144 -4.5169 L249.5222 -4.4114 248.9679 -4.8376 248.8721 -6.2832 c248.3875 -13.5948 L252.3261 -13.8559 L252.0179 -18.5068 L236.8498 -17.5015 lf1 D244.6164 -13.3449 m245.126 -5.6561 L245.2093 -4.3991 244.7371 -3.9049 243.6477 -3.8327 c243.1448 -3.7993 L241.804 -3.7105 241.5082 -4.3642 241.411 -5.8307 c240.9292 -13.1005 L244.6164 -13.3449 lf*U*u0 D237.7928 4.5965 m237.6336 9.2543 L252.8237 9.7735 L252.9829 5.1158 L237.7928 4.5965 lf*U*u237.9157 12.7695 m236.797 19.8407 L245.6369 26.5744 L235.1501 30.2505 L234.0314 37.3217 L249.0448 39.6969 L249.7534 35.2178 L238.9703 33.5119 L238.9769 33.4704 L250.7147 29.1419 L251.2592 25.6997 L241.4308 17.9593 L241.4374 17.9179 L252.2205 19.6238 L252.9291 15.1447 L237.9157 12.7695 lf*U*u232.9953 40.1414 m227.8229 55.9485 L231.176 57.0457 L234.8985 45.6694 L237.2137 46.4269 L233.6871 57.2045 L236.6809 58.1841 L240.2075 47.4065 L242.5227 48.1641 L238.7152 59.7999 L242.188 60.9363 L247.4453 44.8697 L232.9953 40.1414 lf*U*u226.806 58.7911 m223.5936 65.2579 L229.5877 78.009 L229.569 78.0466 L219.6809 73.1346 L217.6077 77.3079 L231.2181 84.0689 L234.4305 77.6021 L228.4364 64.851 L228.4551 64.8134 L238.3433 69.7254 L240.4164 65.5521 L226.806 58.7911 lf*U*u216.5056 78.9627 m206.4753 93.6272 L209.5954 95.7613 L213.2945 90.3531 L222.7242 96.8028 L225.3563 92.9547 L215.9266 86.505 L219.6257 81.0968 L216.5056 78.9627 lf*ULB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get execAdobe_ColorImage_AI6 /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF