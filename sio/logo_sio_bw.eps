%!PS-Adobe-3.1 EPSF-3.0%%Title: Scripps Seal EPSF [Converted]%%Creator: Adobe Illustrator(R) 11%%AI8_CreatorVersion: 11.0.0%AI9_PrintingDataBegin%%For: Steve Diggs%%CreationDate: 1/27/05%%BoundingBox: 0 0 232 232%%HiResBoundingBox: 0 0 231.9756 231.9756%%CropBox: 0 0 231.9756 231.9756%%LanguageLevel: 2%%DocumentData: Clean7Bit%%Pages: 1%%DocumentNeededResources: %%DocumentSuppliedResources: procset Adobe_AGM_Image (1.0 0)%%+ procset Adobe_CoolType_Utility_T42 (1.0 0)%%+ procset Adobe_CoolType_Utility_MAKEOCF (1.19 0)%%+ procset Adobe_CoolType_Core (2.23 0)%%+ procset Adobe_AGM_Core (2.0 0)%%+ procset Adobe_AGM_Utils (1.0 0)%%DocumentFonts: %%DocumentNeededFonts: %%DocumentNeededFeatures: %%DocumentSuppliedFeatures: %%DocumentProcessColors:  Black%%DocumentCustomColors: %%CMYKCustomColor: %%RGBCustomColor: %ADO_ContainsXMP: MainFirst%%EndComments%%BeginDefaults%%ViewingOrientation: 1 0 0 1%%EndDefaults%%BeginProlog%%BeginResource: procset Adobe_AGM_Utils 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Utils 68 dict dup begin put/bdf{	bind def} bind def/nd{	null def}bdf/xdf{	exch def}bdf/ldf {	load def}bdf/ddf{	put}bdf	/xddf{	3 -1 roll put}bdf	/xpt{	exch put}bdf/ndf{ 	exch dup where{		pop pop pop	}{		xdf	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/bdict{	mark}bdf/edict{	counttomark 2 idiv dup dict begin {def} repeat pop currentdict end}def/ps_level	/languagelevel where{		pop systemdict /languagelevel get exec	}{		1	}ifelsedef/level2 	ps_level 2 gedef/level3 	ps_level 3 gedef/ps_version	{version cvr} stopped {		-1	}ifdef/makereadonlyarray{	/packedarray where{		pop packedarray	}{		array astore readonly	}ifelse}bdf/map_reserved_ink_name{	dup type /stringtype eq{		dup /Red eq{			pop (_Red_)		}{			dup /Green eq{				pop (_Green_)			}{				dup /Blue eq{					pop (_Blue_)				}{					dup () cvn eq{						pop (Process)					}if				}ifelse			}ifelse		}ifelse	}if}bdf/AGMUTIL_GSTATE 22 dict def/get_gstate{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_clr_spc currentcolorspace def	/AGMUTIL_GSTATE_clr_indx 0 def	/AGMUTIL_GSTATE_clr_comps 12 array def	mark currentcolor counttomark		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop	/AGMUTIL_GSTATE_fnt rootfont def	/AGMUTIL_GSTATE_lw currentlinewidth def	/AGMUTIL_GSTATE_lc currentlinecap def	/AGMUTIL_GSTATE_lj currentlinejoin def	/AGMUTIL_GSTATE_ml currentmiterlimit def	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf	/AGMUTIL_GSTATE_sa currentstrokeadjust def	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def	/AGMUTIL_GSTATE_op currentoverprint def	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf	/AGMUTIL_GSTATE_ht currenthalftone def	/AGMUTIL_GSTATE_flt currentflat def	end}def/set_gstate{	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_clr_spc setcolorspace	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor	AGMUTIL_GSTATE_fnt setfont	AGMUTIL_GSTATE_lw setlinewidth	AGMUTIL_GSTATE_lc setlinecap	AGMUTIL_GSTATE_lj setlinejoin	AGMUTIL_GSTATE_ml setmiterlimit	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash	AGMUTIL_GSTATE_sa setstrokeadjust	AGMUTIL_GSTATE_clr_rnd setcolorrendering	AGMUTIL_GSTATE_op setoverprint	AGMUTIL_GSTATE_bg cvx setblackgeneration	AGMUTIL_GSTATE_ucr cvx setundercolorremoval	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or		{		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne			{			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark			} if		}{		AGMUTIL_GSTATE_ht sethalftone		} ifelse	AGMUTIL_GSTATE_flt setflat	end}def/get_gstate_and_matrix{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_ctm matrix currentmatrix def	end	get_gstate}def/set_gstate_and_matrix{	set_gstate	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_ctm setmatrix	end}def/AGMUTIL_str256 256 string def/AGMUTIL_src256 256 string def/AGMUTIL_dst64 64 string def/AGMUTIL_srcLen nd/AGMUTIL_ndx nd/agm_sethalftone{ 	dup	begin		/_Data load		/Thresholds xdf	end	level3 	{ sethalftone }{		dup /HalftoneType get 3 eq {			sethalftone		} {pop} ifelse	}ifelse} def /rdcmntline{	currentfile AGMUTIL_str256 readline pop	(%) anchorsearch {pop} if} bdf/filter_cmyk{		dup type /filetype ne{		exch () /SubFileDecode filter	}	{		exch pop	}	ifelse	[	exch	{		AGMUTIL_src256 readstring pop		dup length /AGMUTIL_srcLen exch def		/AGMUTIL_ndx 0 def		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{			1 index exch get			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put			/AGMUTIL_ndx AGMUTIL_ndx 1 add def		}for		pop		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval	}	bind	/exec cvx	] cvx} bdf/filter_indexed_devn{	cvi Names length mul names_index add Lookup exch get} bdf/filter_devn{		4 dict begin	/srcStr xdf	/dstStr xdf	dup type /filetype ne{		0 () /SubFileDecode filter	}if	[	exch		[			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx			currentdict /srcStr get /readstring cvx /pop cvx			/dup cvx /length cvx 0 /gt cvx [				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx				names_index Names length currentdict /srcStr get length 1 sub {					1 /index cvx /exch cvx /get cvx					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx				} for				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx			] cvx /if cvx			/end cvx		] cvx		bind		/exec cvx	] cvx	end} bdf/AGMUTIL_imagefile nd/read_image_file{	AGMUTIL_imagefile 0 setfileposition	10 dict begin	/imageDict xdf	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def	/imbufIdx 0 def	/origDataSource imageDict /DataSource get def	/origMultipleDataSources imageDict /MultipleDataSources get def	/origDecode imageDict /Decode get def	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def	/srcDataStrs [ imageDict begin		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse		{			Width Decode length 2 div mul cvi string		} repeat		end ] def	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse	{		/imbufCnt imageDict /DataSource get length def		/imbufs imbufCnt array def		0 1 imbufCnt 1 sub {			/imbufIdx xdf			imbufs imbufIdx imbufLen string put			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put		} for		DeviceN_PS2 {			imageDict begin		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def			/MultipleDataSources false def			/Decode [0 1] def			end		} if	}{		/imbuf imbufLen string def		Indexed_DeviceN level3 not and DeviceN_NoneName or {			imageDict begin		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def			/Decode [0 1] def			end		}{			imageDict /DataSource {AGMUTIL_imagefile imbuf readstring pop} put		} ifelse	} ifelse	imageDict exch	load exec	imageDict /DataSource origDataSource put	imageDict /MultipleDataSources origMultipleDataSources put	imageDict /Decode origDecode put		end} bdf/write_image_file{	begin	{ (AGMUTIL_imagefile) (w+) file } stopped{		false	}{		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 		2 dict begin		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {			/imbuf imbufLen string def		}if		1 1 Height { 			pop			MultipleDataSources {			 	0 1 DataSource length 1 sub {					DataSource type dup					/arraytype eq {						pop DataSource exch get exec					}{						/filetype eq {							DataSource exch get imbuf readstring pop						}{							DataSource exch get						} ifelse					} ifelse					AGMUTIL_imagefile exch writestring				} for			}{				DataSource type dup				/arraytype eq {					pop DataSource exec				}{					/filetype eq {						DataSource imbuf readstring pop					}{						DataSource					} ifelse				} ifelse				AGMUTIL_imagefile exch writestring			} ifelse		}for		end		true	}ifelse	end} bdf/close_image_file{	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile}defstatusdict /product known userdict /AGMP_current_show known not and{	/pstr statusdict /product get def	pstr (HP LaserJet 2200) eq 		pstr (HP LaserJet 4000 Series) eq or	pstr (HP LaserJet 4050 Series ) eq or	pstr (HP LaserJet 8000 Series) eq or	pstr (HP LaserJet 8100 Series) eq or	pstr (HP LaserJet 8150 Series) eq or	pstr (HP LaserJet 5000 Series) eq or	pstr (HP LaserJet 5100 Series) eq or	pstr (HP Color LaserJet 4500) eq or	pstr (HP Color LaserJet 4600) eq or	pstr (HP LaserJet 5Si) eq or	pstr (HP LaserJet 1200 Series) eq or	pstr (HP LaserJet 1300 Series) eq or	pstr (HP LaserJet 4100 Series) eq or 	{ 		userdict /AGMP_current_show /show load put		userdict /show {		  currentcolorspace 0 get		  /Pattern eq		  {false charpath f}		  {AGMP_current_show} ifelse		} put	}if	currentdict /pstr undef} if/consumeimagedata{	begin	currentdict /MultipleDataSources known not		{/MultipleDataSources false def} if	MultipleDataSources		{		1 dict begin		/flushbuffer Width cvi string def		1 1 Height cvi			{			pop			0 1 DataSource length 1 sub				{				DataSource exch get				dup type dup 				/filetype eq					{					exch flushbuffer readstring pop pop					}if				/arraytype eq					{					exec pop					}if				}for			}for		end		}		{		/DataSource load type dup 		/filetype eq			{			1 dict begin			/flushbuffer Width Decode length 2 div mul cvi string def			1 1 Height { pop DataSource flushbuffer readstring pop pop} for			end			}if		/arraytype eq			{			1 1 Height { pop DataSource pop } for			}if		}ifelse	end}bdf/addprocs{	  2{/exec load}repeat	  3 1 roll	  [ 5 1 roll ] bind cvx}def/modify_halftone_xfer{	currenthalftone dup length dict copy begin	 currentdict 2 index known{	 	1 index load dup length dict copy begin		currentdict/TransferFunction known{			/TransferFunction load		}{			currenttransfer		}ifelse		 addprocs /TransferFunction xdf 		 currentdict end def		currentdict end sethalftone	}{ 		currentdict/TransferFunction known{			/TransferFunction load 		}{			currenttransfer		}ifelse		addprocs /TransferFunction xdf		currentdict end sethalftone				pop	}ifelse}def/clonearray{	dup xcheck exch	dup length array exch	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 	{	Adobe_AGM_Core/AGMCORE_tmp AGMCORE_tmp 1 add ddf 	dup type /dicttype eq		{			AGMCORE_tmp			exch			clonedict			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	dup type /arraytype eq		{			AGMCORE_tmp exch			clonearray			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	exch dup	AGMCORE_tmp 4 -1 roll put	}forall	exch {cvx} if}bdf/clonedict{	dup length dict	begin		{		dup type /dicttype eq			{				clonedict			} if		dup type /arraytype eq			{				clonearray			} if		def		}forall	currentdict	end}bdf/DeviceN_PS2{	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and} bdf/Indexed_DeviceN{	/indexed_colorspace_dict AGMCORE_gget dup null ne {		/CSD known	}{		pop false	} ifelse} bdf/DeviceN_NoneName{		/Names where {		pop		false Names		{			(None) eq or		} forall	}{		false	}ifelse} bdf/DeviceN_PS2_inRip_seps{	/AGMCORE_in_rip_sep where	{		pop dup type dup /arraytype eq exch /packedarraytype eq or		{			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and			{				/currentcolorspace exch AGMCORE_gput				false			}			{				true			}ifelse		}		{			true		} ifelse	}	{		true	} ifelse} bdf/base_colorspace_type{	dup type /arraytype eq {0 get} if} bdf/doc_setup{	Adobe_AGM_Utils begin}bdf/doc_trailer{	currentdict Adobe_AGM_Utils eq{		end	}if}bdfsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_AGM_Core 2.0 0%%Version: 2.0 0%%Copyright: Copyright (C) 1997-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Core 216 dict dup begin put/nd{	null def}bind def/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def/AGMCORE_str256 256 string def/AGMCORE_save nd/AGMCORE_graphicsave nd/AGMCORE_c 0 def/AGMCORE_m 0 def/AGMCORE_y 0 def/AGMCORE_k 0 def/AGMCORE_cmykbuf 4 array def/AGMCORE_screen [currentscreen] cvx def/AGMCORE_tmp 0 def/AGMCORE_&setgray nd/AGMCORE_&setcolor nd/AGMCORE_&setcolorspace nd/AGMCORE_&setcmykcolor nd/AGMCORE_cyan_plate nd/AGMCORE_magenta_plate nd/AGMCORE_yellow_plate nd/AGMCORE_black_plate nd/AGMCORE_plate_ndx nd/AGMCORE_get_ink_data nd/AGMCORE_is_cmyk_sep nd/AGMCORE_host_sep nd/AGMCORE_avoid_L2_sep_space nd/AGMCORE_distilling nd/AGMCORE_composite_job nd/AGMCORE_producing_seps nd/AGMCORE_ps_level -1 def/AGMCORE_ps_version -1 def/AGMCORE_environ_ok nd/AGMCORE_CSA_cache 0 dict def/AGMCORE_CSD_cache 0 dict def/AGMCORE_pattern_cache 0 dict def/AGMCORE_currentoverprint false def/AGMCORE_deltaX nd/AGMCORE_deltaY nd/AGMCORE_name nd/AGMCORE_sep_special nd/AGMCORE_err_strings 4 dict def/AGMCORE_cur_err nd/AGMCORE_ovp nd/AGMCORE_current_spot_alias false def/AGMCORE_inverting false def/AGMCORE_feature_dictCount nd/AGMCORE_feature_opCount nd/AGMCORE_feature_ctm nd/AGMCORE_ConvertToProcess false def/AGMCORE_Default_CTM matrix def/AGMCORE_Default_PageSize nd/AGMCORE_currentbg nd/AGMCORE_currentucr nd/AGMCORE_gradientcache 32 dict def/AGMCORE_in_pattern false def/knockout_unitsq nd/AGMCORE_CRD_cache where{	pop}{	/AGMCORE_CRD_cache 0 dict def}ifelse/AGMCORE_key_known{	where{		/Adobe_AGM_Core_Id known	}{		false	}ifelse}ndf/flushinput{	save	2 dict begin	/CompareBuffer 3 -1 roll def	/readbuffer 256 string def	mark	{	currentfile readbuffer {readline} stopped		{cleartomark mark}		{		not			{pop exit}		if		CompareBuffer eq			{exit}		if		}ifelse	}loop	cleartomark	end	restore}bdf/getspotfunction{	AGMCORE_screen exch pop exch pop	dup type /dicttype eq{		dup /HalftoneType get 1 eq{			/SpotFunction get		}{			dup /HalftoneType get 2 eq{				/GraySpotFunction get			}{ 				pop				{					abs exch abs 2 copy add 1 gt{						1 sub dup mul exch 1 sub dup mul add 1 sub					}{						dup mul exch dup mul add 1 exch sub					}ifelse				}bind			}ifelse		}ifelse	}if} def/clp_npth{	clip newpath} def/eoclp_npth{	eoclip newpath} def/npth_clp{	newpath clip} def/add_grad{	AGMCORE_gradientcache 3 1 roll put}bdf/exec_grad{	AGMCORE_gradientcache exch get exec}bdf/graphic_setup{	/AGMCORE_graphicsave save def	concat	0 setgray	0 setlinecap	0 setlinejoin	1 setlinewidth	[] 0 setdash	10 setmiterlimit	newpath	false setoverprint	false setstrokeadjust	Adobe_AGM_Core/spot_alias get exec	/Adobe_AGM_Image where {		pop		Adobe_AGM_Image/spot_alias 2 copy known{			get exec		}{			pop pop		}ifelse	} if	100 dict begin	/dictstackcount countdictstack def	/showpage {} def	mark} def/graphic_cleanup{	cleartomark	dictstackcount 1 countdictstack 1 sub {end}for	end	AGMCORE_graphicsave restore} def/compose_error_msg{	grestoreall initgraphics		/Helvetica findfont 10 scalefont setfont	/AGMCORE_deltaY 100 def	/AGMCORE_deltaX 310 def	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath	0 AGMCORE_&setgray	gsave 1 AGMCORE_&setgray fill grestore 	1 setlinewidth gsave stroke grestore	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto	/AGMCORE_deltaY 12 def	/AGMCORE_tmp 0 def	AGMCORE_err_strings exch get		{		dup 32 eq			{			pop			AGMCORE_str256 0 AGMCORE_tmp getinterval			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt				{				currentpoint AGMCORE_deltaY sub exch pop				clippath pathbbox pop pop pop 44 add exch moveto				} if			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show			0 1 AGMCORE_str256 length 1 sub				{				AGMCORE_str256 exch 0 put				}for			/AGMCORE_tmp 0 def			}			{				AGMCORE_str256 exch AGMCORE_tmp xpt				/AGMCORE_tmp AGMCORE_tmp 1 add def			} ifelse		} forall} bdf/doc_setup{	Adobe_AGM_Core begin	/AGMCORE_ps_version xdf	/AGMCORE_ps_level xdf	errordict /AGM_handleerror known not{		errordict /AGM_handleerror errordict /handleerror get put		errordict /handleerror {			Adobe_AGM_Core begin			$error /newerror get AGMCORE_cur_err null ne and{				$error /newerror false put				AGMCORE_cur_err compose_error_msg			}if			$error /newerror true put			end			errordict /AGM_handleerror get exec			} bind put		}if	/AGMCORE_environ_ok 		ps_level AGMCORE_ps_level ge		ps_version AGMCORE_ps_version ge and 		AGMCORE_ps_level -1 eq or	def	AGMCORE_environ_ok not		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if	/AGMCORE_&setgray systemdict/setgray get def	level2{		/AGMCORE_&setcolor systemdict/setcolor get def		/AGMCORE_&setcolorspace systemdict/setcolorspace get def	}if	/AGMCORE_currentbg currentblackgeneration def	/AGMCORE_currentucr currentundercolorremoval def	/AGMCORE_distilling		/product where{			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and		}{			false		}ifelse	def	level2 not{		/xput{			dup load dup length exch maxlength eq{				dup dup load dup				length dup 0 eq {pop 1} if 2 mul dict copy def			}if			load begin				def 			end		}def	}{		/xput{			load 3 1 roll put		}def	}ifelse	/AGMCORE_GSTATE AGMCORE_key_known not{		/AGMCORE_GSTATE 21 dict def		/AGMCORE_tmpmatrix matrix def		/AGMCORE_gstack 32 array def		/AGMCORE_gstackptr 0 def		/AGMCORE_gstacksaveptr 0 def		/AGMCORE_gstackframekeys 10 def		/AGMCORE_&gsave /gsave ldf		/AGMCORE_&grestore /grestore ldf		/AGMCORE_&grestoreall /grestoreall ldf		/AGMCORE_&save /save ldf		/AGMCORE_gdictcopy {			begin			{ def } forall			end		}def		/AGMCORE_gput {			AGMCORE_gstack AGMCORE_gstackptr get			3 1 roll			put		}def		/AGMCORE_gget {			AGMCORE_gstack AGMCORE_gstackptr get			exch			get		}def		/gsave {			AGMCORE_&gsave			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			Adobe_AGM_Core exch			/AGMCORE_gstackptr xpt			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/grestore {			AGMCORE_&grestore			AGMCORE_gstackptr 1 sub			dup AGMCORE_gstacksaveptr lt {1 add} if			Adobe_AGM_Core exch			/AGMCORE_gstackptr xpt		}def		/grestoreall {			AGMCORE_&grestoreall			Adobe_AGM_Core			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 		}def		/save {			AGMCORE_&save			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			Adobe_AGM_Core begin				/AGMCORE_gstackptr exch def				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def			end			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		0 1 AGMCORE_gstack length 1 sub {				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put		} for	}if	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and	{		/AGMCORE_&sysshfill systemdict/shfill get def		/AGMCORE_&usrshfill /shfill load def		/AGMCORE_&sysmakepattern systemdict/makepattern get def		/AGMCORE_&usrmakepattern /makepattern load def	}if	/currentcmykcolor [0 0 0 0] AGMCORE_gput	/currentstrokeadjust false AGMCORE_gput	/currentcolorspace [/DeviceGray] AGMCORE_gput	/sep_tint 0 AGMCORE_gput	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput	/sep_colorspace_dict null AGMCORE_gput	/devicen_colorspace_dict null AGMCORE_gput	/indexed_colorspace_dict null AGMCORE_gput	/currentcolor_intent () AGMCORE_gput	/customcolor_tint 1 AGMCORE_gput	<<	/MaxPatternItem currentsystemparams /MaxPatternCache get	>>	setuserparams	end}def/page_setup{	/setcmykcolor where{		pop		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put	}if	Adobe_AGM_Core begin	/setcmykcolor	{		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput		1 sub 4 1 roll		3 {			3 index add neg dup 0 lt {				pop 0			} if			3 1 roll		} repeat		setrgbcolor pop	}ndf	/currentcmykcolor	{		/currentcmykcolor AGMCORE_gget aload pop	}ndf	/setoverprint	{		pop	}ndf	/currentoverprint	{		false	}ndf	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def	/AGMCORE_plate_ndx 		AGMCORE_cyan_plate{ 			0		}{			AGMCORE_magenta_plate{				1			}{				AGMCORE_yellow_plate{					2				}{					AGMCORE_black_plate{						3					}{						4					}ifelse				}ifelse			}ifelse		}ifelse		def	/AGMCORE_have_reported_unsupported_color_space false def	/AGMCORE_report_unsupported_color_space	{		AGMCORE_have_reported_unsupported_color_space false eq		{			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf		} if	}def	/AGMCORE_composite_job		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def	/AGMCORE_in_rip_sep		/AGMCORE_in_rip_sep where{			pop AGMCORE_in_rip_sep		}{			AGMCORE_distilling 			{				false			}{				userdict/Adobe_AGM_OnHost_Seps known{					false				}{					level2{						currentpagedevice/Separations 2 copy known{							get						}{							pop pop false						}ifelse					}{						false					}ifelse				}ifelse			}ifelse		}ifelse	def	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def	/AGM_preserve_spots 		/AGM_preserve_spots where{			pop AGM_preserve_spots		}{			AGMCORE_distilling AGMCORE_producing_seps or		}ifelse	def	/AGM_is_distiller_preserving_spotimages	{		currentdistillerparams/PreserveOverprintSettings known		{			currentdistillerparams/PreserveOverprintSettings get				{					currentdistillerparams/ColorConversionStrategy known					{						currentdistillerparams/ColorConversionStrategy get						/LeaveColorUnchanged eq					}{						true					}ifelse				}{					false				}ifelse		}{			false		}ifelse	}def	/convert_spot_to_process where {pop}{		/convert_spot_to_process		{			dup map_alias {				/Name get exch pop			} if			dup dup (None) eq exch (All) eq or				{				pop false				}{				AGMCORE_host_sep				{ 					gsave					1 0 0 0 setcmykcolor currentgray 1 exch sub					0 1 0 0 setcmykcolor currentgray 1 exch sub					0 0 1 0 setcmykcolor currentgray 1 exch sub					0 0 0 1 setcmykcolor currentgray 1 exch sub					add add add 0 eq					{						pop false					}{						false setoverprint						1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor						currentgray 0 eq					}ifelse					grestore				}{					AGMCORE_distilling					{						pop AGM_is_distiller_preserving_spotimages not					}{						Adobe_AGM_Core/AGMCORE_name xddf						false						Adobe_AGM_Core/AGMCORE_in_pattern known {Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse						not currentpagedevice/OverrideSeparations known and							{							currentpagedevice/OverrideSeparations get								{								/HqnSpots /ProcSet resourcestatus									{									pop pop pop true									}if								}if							}if												{							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not							}{							gsave							[/Separation AGMCORE_name /DeviceGray {}]setcolorspace							false							currentpagedevice/SeparationColorNames 2 copy known							{								get								{ AGMCORE_name eq or}forall							not							}{								pop pop pop true							}ifelse							grestore						}ifelse					}ifelse				}ifelse			}ifelse		}def	}ifelse	/convert_to_process where {pop}{		/convert_to_process		{			dup length 0 eq				{				pop false				}{				AGMCORE_host_sep				{ 				dup true exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or						{pop}						{convert_spot_to_process and}ifelse					}				forall					{					true exch						{						dup (Cyan) eq exch						dup (Magenta) eq 3 -1 roll or exch						dup (Yellow) eq 3 -1 roll or exch						(Black) eq or and						}forall						not					}{pop false}ifelse				}{				false exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or					{pop}					{convert_spot_to_process or}ifelse					}				forall				}ifelse			}ifelse		}def	}ifelse		/AGMCORE_avoid_L2_sep_space  		version cvr 2012 lt 		level2 and 		AGMCORE_producing_seps not and	def	/AGMCORE_is_cmyk_sep		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or	def	/AGM_avoid_0_cmyk where{		pop AGM_avoid_0_cmyk	}{		AGM_preserve_spots 		userdict/Adobe_AGM_OnHost_Seps known 		userdict/Adobe_AGM_InRip_Seps known or		not and	}ifelse	{		/setcmykcolor[			{				4 copy add add add 0 eq currentoverprint and{					pop 0.0005				}if			}/exec cvx			/AGMCORE_&setcmykcolor load dup type/operatortype ne{				/exec cvx			}if		]cvx def	}if	AGMCORE_host_sep{		/setcolortransfer		{ 			AGMCORE_cyan_plate{				pop pop pop			}{			  	AGMCORE_magenta_plate{			  		4 3 roll pop pop pop			  	}{			  		AGMCORE_yellow_plate{			  			4 2 roll pop pop pop			  		}{			  			4 1 roll pop pop pop			  		}ifelse			  	}ifelse			}ifelse			settransfer  		}			def		/AGMCORE_get_ink_data			AGMCORE_cyan_plate{				{pop pop pop}			}{			  	AGMCORE_magenta_plate{			  		{4 3 roll pop pop pop}			  	}{			  		AGMCORE_yellow_plate{			  			{4 2 roll pop pop pop}			  		}{			  			{4 1 roll pop pop pop}			  		}ifelse			  	}ifelse			}ifelse		def		/AGMCORE_RemoveProcessColorNames			{			1 dict begin			/filtername				{				dup /Cyan eq 1 index (Cyan) eq or					{pop (_cyan_)}if				dup /Magenta eq 1 index (Magenta) eq or					{pop (_magenta_)}if				dup /Yellow eq 1 index (Yellow) eq or					{pop (_yellow_)}if				dup /Black eq 1 index (Black) eq or					{pop (_black_)}if				}def			dup type /arraytype eq				{[exch {filtername}forall]}				{filtername}ifelse			end			}def		/AGMCORE_IsSeparationAProcessColor			{			dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or			}def		level3 {			/AGMCORE_IsCurrentColor				{				gsave				false setoverprint				1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor				currentgray 0 eq 				grestore				}def			/AGMCORE_filter_functiondatasource				{					5 dict begin				/data_in xdf				data_in type /stringtype eq					{					/ncomp xdf					/comp xdf					/string_out data_in length ncomp idiv string def					0 ncomp data_in length 1 sub						{						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put						}for					string_out					}{					string /string_in xdf					/string_out 1 string def					/component xdf					[					data_in string_in /readstring cvx						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx						[/pop cvx ()]cvx /ifelse cvx					]cvx /ReusableStreamDecode filter				}ifelse				end				}def			/AGMCORE_separateShadingFunction				{				2 dict begin				/paint? xdf				/channel xdf					begin					FunctionType 0 eq						{						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def						currentdict /Decode known							{/Decode Decode channel 2 mul 2 getinterval def}if						paint? not							{/Decode [1 1]def}if						}if					FunctionType 2 eq						{						paint?							{							/C0 [C0 channel get 1 exch sub] def							/C1 [C1 channel get 1 exch sub] def							}{							/C0 [1] def							/C1 [1] def							}ifelse									}if					FunctionType 3 eq						{						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def									}if					currentdict /Range known						{/Range [0 1] def}if					currentdict					end				end				}def			/AGMCORE_separateShading				{				3 -1 roll begin				currentdict /Function known					{					currentdict /Background known						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf					/ColorSpace [/DeviceGray] def					}{					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq						{						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def						}{						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put						}ifelse					ColorSpace 0 get /Separation eq						{							{								[1 /exch cvx /sub cvx]cvx							}{								[/pop cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll put							pop						}{							{								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx							}{								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll bind put						}ifelse					ColorSpace 2 /DeviceGray put																							}ifelse				end				}def			/AGMCORE_separateShadingDict				{				dup /ColorSpace get				dup type /arraytype ne					{[exch]}if				dup 0 get /DeviceCMYK eq					{					exch begin 					currentdict					AGMCORE_cyan_plate						{0 true}if					AGMCORE_magenta_plate						{1 true}if					AGMCORE_yellow_plate						{2 true}if					AGMCORE_black_plate						{3 true}if					AGMCORE_plate_ndx 4 eq						{0 false}if							dup not currentoverprint and						{/AGMCORE_ignoreshade true def}if					AGMCORE_separateShading					currentdict					end exch					}if				dup 0 get /Separation eq					{					exch begin					ColorSpace 1 get dup /None ne exch /All ne and						{						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and							{							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 								{								/ColorSpace									[									/Separation									ColorSpace 1 get									/DeviceGray										[										ColorSpace 3 get /exec cvx										4 AGMCORE_plate_ndx sub -1 /roll cvx										4 1 /roll cvx										3 [/pop cvx]cvx /repeat cvx										1 /exch cvx /sub cvx										]cvx																		]def								}{								AGMCORE_report_unsupported_color_space								AGMCORE_black_plate not									{									currentdict 0 false AGMCORE_separateShading									}if								}ifelse							}{							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor							0 exch 							dup not currentoverprint and								{/AGMCORE_ignoreshade true def}if							AGMCORE_separateShading							}ifelse							}if								currentdict					end exch					}if				dup 0 get /DeviceN eq					{					exch begin					ColorSpace 1 get convert_to_process						{						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 							{							/ColorSpace								[								/DeviceN								ColorSpace 1 get								/DeviceGray									[									ColorSpace 3 get /exec cvx									4 AGMCORE_plate_ndx sub -1 /roll cvx									4 1 /roll cvx									3 [/pop cvx]cvx /repeat cvx									1 /exch cvx /sub cvx									]cvx																	]def							}{							AGMCORE_report_unsupported_color_space							AGMCORE_black_plate not								{								currentdict 0 false AGMCORE_separateShading								/ColorSpace [/DeviceGray] def								}if							}ifelse						}{						currentdict						false -1 ColorSpace 1 get							{							AGMCORE_IsCurrentColor								{								1 add								exch pop true exch exit								}if							1 add							}forall						exch 						dup not currentoverprint and							{/AGMCORE_ignoreshade true def}if						AGMCORE_separateShading						}ifelse					currentdict					end exch					}if				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not					{					exch begin					ColorSpace dup type /arraytype eq						{0 get}if					/DeviceGray ne						{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate not							{							ColorSpace 0 get /CIEBasedA eq								{								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def								}if							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or								{								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def								}if							ColorSpace 0 get /CIEBasedDEFG eq								{								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}]								}if							currentdict 0 false AGMCORE_separateShading							}if						}if					currentdict					end exch					}if				pop				dup /AGMCORE_ignoreshade known					{					begin					/ColorSpace [/Separation (None) /DeviceGray {}] def					currentdict end					}if				}def			/shfill				{				clonedict				AGMCORE_separateShadingDict 				dup /AGMCORE_ignoreshade known					{pop}					{AGMCORE_&sysshfill}ifelse				}def			/makepattern				{				exch				dup /PatternType get 2 eq					{					clonedict					begin					/Shading Shading AGMCORE_separateShadingDict def					currentdict end					exch AGMCORE_&sysmakepattern					}{					exch AGMCORE_&usrmakepattern					}ifelse				}def		}if	}if	AGMCORE_in_rip_sep{		/setcustomcolor		{			exch aload pop			dup 7 1 roll inRip_spot_has_ink not	{ 				4 {4 index mul 4 1 roll}				repeat				/DeviceCMYK setcolorspace				6 -2 roll pop pop			}{ 				Adobe_AGM_Core begin					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf				end				[/Separation 4 -1 roll /DeviceCMYK				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}				]				setcolorspace			}ifelse			setcolor		}ndf		/setseparationgray		{			[/Separation (All) /DeviceGray {}] setcolorspace_opt			1 exch sub setcolor		}ndf	}{		/setseparationgray		{			AGMCORE_&setgray		}ndf	}ifelse	/findcmykcustomcolor	{		5 makereadonlyarray	}ndf	/setcustomcolor	{		exch aload pop pop		4 {4 index mul 4 1 roll} repeat		setcmykcolor pop	}ndf	/has_color		/colorimage where{			AGMCORE_producing_seps{				pop true			}{				systemdict eq			}ifelse		}{			false		}ifelse	def	/map_index	{		1 index mul exch getinterval {255 div} forall	} bdf	/map_indexed_devn	{		Lookup Names length 3 -1 roll cvi map_index	} bdf	/n_color_components	{		base_colorspace_type		dup /DeviceGray eq{			pop 1		}{			/DeviceCMYK eq{				4			}{				3			}ifelse		}ifelse	}bdf	level2{		/mo /moveto ldf		/li /lineto ldf		/cv /curveto ldf		/knockout_unitsq		{			1 setgray			0 0 1 1 rectfill		}def		/level2ScreenFreq{			begin			60			HalftoneType 1 eq{				pop Frequency			}if			HalftoneType 2 eq{				pop GrayFrequency			}if			HalftoneType 5 eq{				pop Default level2ScreenFreq			}if			 end		}def		/currentScreenFreq{			currenthalftone level2ScreenFreq		}def		level2 /setcolorspace AGMCORE_key_known not and{			/AGMCORE_&&&setcolorspace /setcolorspace ldf			/AGMCORE_ReplaceMappedColor			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get dup /Separation eq					{						pop						dup length array copy						dup dup 1 get						current_spot_alias						{							dup map_alias							{								begin								/sep_colorspace_dict currentdict AGMCORE_gput								pop pop	pop								[ 									/Separation Name 									CSA map_csa									dup /MappedCSA xdf 									/sep_colorspace_proc load								]								dup Name								end							}if						}if						map_reserved_ink_name 1 xpt					}{						/DeviceN eq 						{							dup length array copy							dup dup 1 get [ 								exch {									current_spot_alias{										dup map_alias{											/Name get exch pop										}if									}if									map_reserved_ink_name								} forall 							] 1 xpt						}if					}ifelse				}if			}def			/setcolorspace			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get /Indexed eq					{						AGMCORE_distilling						{							/PhotoshopDuotoneList where							{								pop false							}{								true							}ifelse						}{							true						}ifelse						{							aload pop 3 -1 roll							AGMCORE_ReplaceMappedColor							3 1 roll 4 array astore						}if					}{						AGMCORE_ReplaceMappedColor					}ifelse				}if				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if			}def		}if		}{		/adj		{			currentstrokeadjust{				transform				0.25 sub round 0.25 add exch				0.25 sub round 0.25 add exch				itransform			}if		}def		/mo{			adj moveto		}def		/li{			adj lineto		}def		/cv{			6 2 roll adj			6 2 roll adj			6 2 roll adj curveto		}def		/knockout_unitsq		{			1 setgray			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image		}def		/currentstrokeadjust{			/currentstrokeadjust AGMCORE_gget		}def		/setstrokeadjust{			/currentstrokeadjust exch AGMCORE_gput		}def		/currentScreenFreq{			currentscreen pop pop		}def		/setcolorspace		{			/currentcolorspace exch AGMCORE_gput		} def		/currentcolorspace		{			/currentcolorspace AGMCORE_gget		} def		/setcolor_devicecolor		{			base_colorspace_type			dup /DeviceGray eq{				pop setgray			}{				/DeviceCMYK eq{					setcmykcolor				}{					setrgbcolor				}ifelse			}ifelse		}def		/setcolor		{			currentcolorspace 0 get			dup /DeviceGray ne{				dup /DeviceCMYK ne{					dup /DeviceRGB ne{						dup /Separation eq{							pop							currentcolorspace 3 get exec							currentcolorspace 2 get						}{							dup /Indexed eq{								pop								currentcolorspace 3 get dup type /stringtype eq{									currentcolorspace 1 get n_color_components									3 -1 roll map_index								}{									exec								}ifelse								currentcolorspace 1 get							}{								/AGMCORE_cur_err /AGMCORE_invalid_color_space def								AGMCORE_invalid_color_space							}ifelse						}ifelse					}if				}if			}if			setcolor_devicecolor		} def	}ifelse	/sop /setoverprint ldf	/lw /setlinewidth ldf	/lc /setlinecap ldf	/lj /setlinejoin ldf	/ml /setmiterlimit ldf	/dsh /setdash ldf	/sadj /setstrokeadjust ldf	/gry /setgray ldf	/rgb /setrgbcolor ldf	/cmyk /setcmykcolor ldf	/sep /setsepcolor ldf	/devn /setdevicencolor ldf	/idx /setindexedcolor ldf	/colr /setcolor ldf	/csacrd /set_csa_crd ldf	/sepcs /setsepcolorspace ldf	/devncs /setdevicencolorspace ldf	/idxcs /setindexedcolorspace ldf	/cp /closepath ldf	/clp /clp_npth ldf	/eclp /eoclp_npth ldf	/f /fill ldf	/ef /eofill ldf	/@ /stroke ldf	/nclp /npth_clp ldf	/gset /graphic_setup ldf	/gcln /graphic_cleanup ldf	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {			bind		}if		def	}forall	/currentpagedevice currentpagedevice def/getrampcolor {/indx exch def0 1 NumComp 1 sub {dupSamples exch getdup type /stringtype eq { indx get } ifexchScaling exch get aload pop3 1 rollmul add} forColorSpaceFamily /Separation eq	{	sep	}	{	ColorSpaceFamily /DeviceN eq		{		devn		}		{		setcolor		}ifelse	}ifelse} bind def/sssetbackground { aload pop setcolor } bind def/RadialShade {40 dict begin/ColorSpaceFamily exch def/background exch def/ext1 exch def/ext0 exch def/BBox exch def/r2 exch def/c2y exch def/c2x exch def/r1 exch def/c1y exch def/c1x exch def/rampdict exch def/setinkoverprint where {pop /setinkoverprint{pop}def}ifgsaveBBox length 0 gt {newpathBBox 0 get BBox 1 get movetoBBox 2 get BBox 0 get sub 0 rlineto0 BBox 3 get BBox 1 get sub rlinetoBBox 2 get BBox 0 get sub neg 0 rlinetoclosepathclipnewpath} ifc1x c2x eq{c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse}{/slope c2y c1y sub c2x c1x sub div def/theta slope 1 atan defc2x c1x lt c2y c1y ge and { /theta theta 180 sub def} ifc2x c1x lt c2y c1y lt and { /theta theta 180 add def} if}ifelsegsaveclippathc1x c1y translatetheta rotate-90 rotate{ pathbbox } stopped{ 0 0 0 0 } if/yMax exch def/xMax exch def/yMin exch def/xMin exch defgrestorexMax xMin eq yMax yMin eq or{grestoreend}{/max { 2 copy gt { pop } {exch pop} ifelse } bind def/min { 2 copy lt { pop } {exch pop} ifelse } bind deframpdict begin40 dict beginbackground length 0 gt { background sssetbackground gsave clippath fill grestore } ifgsavec1x c1y translatetheta rotate-90 rotate/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def/c1y 0 def/c1x 0 def/c2x 0 defext0 {0 getrampcolorc2y r2 add r1 sub 0.0001 lt{c1x c1y r1 360 0 arcnpathbbox/aymax exch def/axmax exch def/aymin exch def/axmin exch def/bxMin xMin axmin min def/byMin yMin aymin min def/bxMax xMax axmax max def/byMax yMax aymax max defbxMin byMin movetobxMax byMin linetobxMax byMax linetobxMin byMax linetobxMin byMin linetoeofill}{c2y r1 add r2 le{c1x c1y r1 0 360 arcfill}{c2x c2y r2 0 360 arc fillr1 r2 eq{/p1x r1 neg def/p1y c1y def/p2x r1 def/p2y c1y defp1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin linetofill}{/AA r2 r1 sub c2y div def/theta AA 1 AA dup mul sub sqrt div 1 atan def/SS1 90 theta add dup sin exch cos div def/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def/p1y p1x SS1 div neg def/SS2 90 theta sub dup sin exch cos div def/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def/p2y p2x SS2 div neg defr1 r2 gt{/L1maxX p1x yMin p1y sub SS1 div add def/L2maxX p2x yMin p2y sub SS2 div add def}{/L1maxX 0 def/L2maxX 0 def}ifelsep1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add linetoL1maxX L1maxX p1x sub SS1 mul p1y add linetofill}ifelse}ifelse} ifelse} ifc1x c2x sub dup mulc1y c2y sub dup muladd 0.5 exp0 dtransformdup mul exch dup mul add 0.5 exp 72 div0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt1 index 1 index lt { exch } if pop/hires exch defhires mul/numpix exch def/numsteps NumSamples def/rampIndxInc 1 def/subsampling false defnumpix 0 ne{NumSamples numpix div 0.5 gt{/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def/rampIndxInc NumSamples 1 sub numsteps div def/subsampling true def} if} if/xInc c2x c1x sub numsteps div def/yInc c2y c1y sub numsteps div def/rInc r2 r1 sub numsteps div def/cx c1x def/cy c1y def/radius r1 defnewpathxInc 0 eq yInc 0 eq rInc 0 eq and and{0 getrampcolorcx cy radius 0 360 arcstrokeNumSamples 1 sub getrampcolorcx cy radius 72 hires div add 0 360 arc0 setlinewidthstroke}{0numsteps{dupsubsampling { round cvi } ifgetrampcolorcx cy radius 0 360 arc/cx cx xInc add def/cy cy yInc add def/radius radius rInc add defcx cy radius 360 0 arcneofillrampIndxInc add}repeatpop} ifelseext1 {c2y r2 add r1 lt{c2x c2y r2 0 360 arcfill}{c2y r1 add r2 sub 0.0001 le{c2x c2y r2 360 0 arcnpathbbox/aymax exch def/axmax exch def/aymin exch def/axmin exch def/bxMin xMin axmin min def/byMin yMin aymin min def/bxMax xMax axmax max def/byMax yMax aymax max defbxMin byMin movetobxMax byMin linetobxMax byMax linetobxMin byMax linetobxMin byMin linetoeofill}{c2x c2y r2 0 360 arc fillr1 r2 eq{/p1x r2 neg def/p1y c2y def/p2x r2 def/p2y c2y defp1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax linetofill}{/AA r2 r1 sub c2y div def/theta AA 1 AA dup mul sub sqrt div 1 atan def/SS1 90 theta add dup sin exch cos div def/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def/p1y c2y p1x SS1 div sub def/SS2 90 theta sub dup sin exch cos div def/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def/p2y c2y p2x SS2 div sub defr1 r2 lt{/L1maxX p1x yMax p1y sub SS1 div add def/L2maxX p2x yMax p2y sub SS2 div add def}{/L1maxX 0 def/L2maxX 0 def}ifelsep1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add linetoL1maxX L1maxX p1x sub SS1 mul p1y add linetofill}ifelse}ifelse} ifelse} ifgrestoregrestoreendendend} ifelse} bind def/GenStrips {40 dict begin/ColorSpaceFamily exch def/background exch def/ext1 exch def/ext0 exch def/BBox exch def/y2 exch def/x2 exch def/y1 exch def/x1 exch def/rampdict exch def/setinkoverprint where {pop /setinkoverprint{pop}def}ifgsaveBBox length 0 gt {newpathBBox 0 get BBox 1 get movetoBBox 2 get BBox 0 get sub 0 rlineto0 BBox 3 get BBox 1 get sub rlinetoBBox 2 get BBox 0 get sub neg 0 rlinetoclosepathclipnewpath} ifx1 x2 eq{y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse}{/slope y2 y1 sub x2 x1 sub div def/theta slope 1 atan defx2 x1 lt y2 y1 ge and { /theta theta 180 sub def} ifx2 x1 lt y2 y1 lt and { /theta theta 180 add def} if}ifelsegsaveclippathx1 y1 translatetheta rotate{ pathbbox } stopped{ 0 0 0 0 } if/yMax exch def/xMax exch def/yMin exch def/xMin exch defgrestorexMax xMin eq yMax yMin eq or{grestoreend}{rampdict begin20 dict beginbackground length 0 gt { background sssetbackground gsave clippath fill grestore } ifgsavex1 y1 translatetheta rotate/xStart 0 def/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def/ySpan yMax yMin sub def/numsteps NumSamples def/rampIndxInc 1 def/subsampling false defxStart 0 transformxEnd 0 transform3 -1 rollsub dup mul3 1 rollsub dup muladd 0.5 exp 72 div0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt1 index 1 index lt { exch } if popmul/numpix exch defnumpix 0 ne{NumSamples numpix div 0.5 gt{/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def/rampIndxInc NumSamples 1 sub numsteps div def/subsampling true def} if} ifext0 {0 getrampcolorxMin xStart lt{ xMin yMin xMin neg ySpan rectfill } if} if/xInc xEnd xStart sub numsteps div def/x xStart def0numsteps{dupsubsampling { round cvi } ifgetrampcolorx yMin xInc ySpan rectfill/x x xInc add deframpIndxInc add}repeatpopext1 {xMax xEnd gt{ xEnd yMin xMax xEnd sub ySpan rectfill } if} ifgrestoregrestoreendendend} ifelse} bind def}def/page_trailer{	end}def/doc_trailer{}defsystemdict /findcolorrendering known{	/findcolorrendering systemdict /findcolorrendering get def}ifsystemdict /setcolorrendering known{	/setcolorrendering systemdict /setcolorrendering get def}if/test_cmyk_color_plate{	gsave	setcmykcolor currentgray 1 ne	grestore}def/inRip_spot_has_ink{	dup Adobe_AGM_Core/AGMCORE_name xddf	convert_spot_to_process not}def/map255_to_range{	1 index sub	3 -1 roll 255 div mul add}def/set_csa_crd{	/sep_colorspace_dict null AGMCORE_gput	begin		CSA map_csa setcolorspace_opt		set_crd	end}def/setsepcolor{ 	/sep_colorspace_dict AGMCORE_gget begin		dup /sep_tint exch AGMCORE_gput		TintProc	end} def/setdevicencolor{ 	/devicen_colorspace_dict AGMCORE_gget begin		Names length copy		Names length 1 sub -1 0		{			/devicen_tints AGMCORE_gget 3 1 roll xpt		} for		TintProc	end} def/sep_colorspace_proc{	Adobe_AGM_Core/AGMCORE_tmp xddf	/sep_colorspace_dict AGMCORE_gget begin	currentdict/Components known{		Components aload pop 		TintMethod/Lab eq{			2 {AGMCORE_tmp mul NComponents 1 roll} repeat			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll		}{			TintMethod/Subtractive eq{				NComponents{					AGMCORE_tmp mul NComponents 1 roll				}repeat			}{				NComponents{					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll				} repeat			}ifelse		}ifelse	}{		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get		aload pop	}ifelse	end} def/sep_colorspace_gray_proc{	Adobe_AGM_Core/AGMCORE_tmp xddf	/sep_colorspace_dict AGMCORE_gget begin	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get	end} def/sep_proc_name{	dup 0 get 	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{		pop [/DeviceGray]		/sep_colorspace_gray_proc	}{		/sep_colorspace_proc	}ifelse} def/setsepcolorspace{ 	current_spot_alias{		dup begin			Name map_alias{				exch pop			}if		end	}if	dup /sep_colorspace_dict exch AGMCORE_gput	begin	/MappedCSA CSA map_csa def	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf	AGMCORE_avoid_L2_sep_space{		[/Indexed MappedCSA sep_proc_name 255 exch 			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 		] setcolorspace_opt		/TintProc {			255 mul round cvi setcolor		}bdf	}{		MappedCSA 0 get /DeviceCMYK eq 		currentdict/Components known and 		AGMCORE_sep_special not and{			/TintProc [				Components aload pop Name findcmykcustomcolor 				/exch cvx /setcustomcolor cvx			] cvx bdf		}{ 			AGMCORE_host_sep Name (All) eq and{ 				/TintProc { 					1 exch sub setseparationgray 				}bdf 			}{				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 				AGMCORE_host_sep or				Name () eq and{					/TintProc [						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{							cvx /setcmykcolor cvx						}{							cvx /setgray cvx						}ifelse					] cvx bdf				}{					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{	 					/TintProc [							/dup cvx							MappedCSA sep_proc_name cvx exch							0 get /DeviceGray eq{								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx							}if							/Name cvx /findcmykcustomcolor cvx /exch cvx							AGMCORE_host_sep{								AGMCORE_is_cmyk_sep								/Name cvx 								/AGMCORE_IsSeparationAProcessColor load /exec cvx								/not cvx /and cvx 							}{								Name inRip_spot_has_ink not							}ifelse							[		 						/pop cvx 1							] cvx /if cvx							/setcustomcolor cvx						] cvx bdf 					}{ 						/TintProc /setcolor ldf						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt					}ifelse				}ifelse			}ifelse		}ifelse	}ifelse	set_crd	setsepcolor	end} def/additive_blend{  	3 dict begin  	/numarrays xdf  	/numcolors xdf  	0 1 numcolors 1 sub  		{  		/c1 xdf  		1  		0 1 numarrays 1 sub  			{			1 exch add /index cvx  			c1 /get cvx /mul cvx  			}for 		numarrays 1 add 1 /roll cvx   		}for 	numarrays [/pop cvx] cvx /repeat cvx  	end}def/subtractive_blend{	3 dict begin	/numarrays xdf	/numcolors xdf	0 1 numcolors 1 sub		{		/c1 xdf		1 1		0 1 numarrays 1 sub			{			1 3 3 -1 roll add /index cvx  			c1 /get cvx /sub cvx /mul cvx			}for		/sub cvx		numarrays 1 add 1 /roll cvx		}for	numarrays [/pop cvx] cvx /repeat cvx	end}def/exec_tint_transform{	/TintProc [		/TintTransform cvx /setcolor cvx	] cvx bdf	MappedCSA setcolorspace_opt} bdf/devn_makecustomcolor{	2 dict begin	/names_index xdf	/Names xdf	1 1 1 1 Names names_index get findcmykcustomcolor	/devicen_tints AGMCORE_gget names_index get setcustomcolor	Names length {pop} repeat	end} bdf/setdevicencolorspace{ 	dup /AliasedColorants known {false}{true}ifelse 	current_spot_alias and {		6 dict begin		/names_index 0 def		dup /names_len exch /Names get length def		/new_names names_len array def		/new_LookupTables names_len array def		/alias_cnt 0 def		dup /Names get		{			dup map_alias {				exch pop				dup /ColorLookup known {					dup begin					new_LookupTables names_index ColorLookup put					end				}{					dup /Components known {						dup begin						new_LookupTables names_index Components put						end					}{						dup begin						new_LookupTables names_index [null null null null] put						end					} ifelse				} ifelse				new_names names_index 3 -1 roll /Name get put				/alias_cnt alias_cnt 1 add def 			}{				/name xdf								new_names names_index name put				dup /LookupTables known {					dup begin					new_LookupTables names_index LookupTables names_index get put					end				}{					dup begin					new_LookupTables names_index [null null null null] put					end				} ifelse			} ifelse			/names_index names_index 1 add def 		} forall		alias_cnt 0 gt {			/AliasedColorants true def			0 1 names_len 1 sub {				/names_index xdf				new_LookupTables names_index get 0 get null eq {					dup /Names get names_index get /name xdf					name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq					or or or not {						/AliasedColorants false def						exit					} if				} if			} for			AliasedColorants {				dup begin				/Names new_names def				/AliasedColorants true def				/LookupTables new_LookupTables def				currentdict /TTTablesIdx known not {					/TTTablesIdx -1 def				} if				currentdict /NComponents known not {					/NComponents TintMethod /Subtractive eq {4}{3}ifelse def				} if				end			} if		}if		end	} if	dup /devicen_colorspace_dict exch AGMCORE_gput	begin	/MappedCSA CSA map_csa def	currentdict /AliasedColorants known {		AliasedColorants	}{		false	} ifelse	/TintTransform load type /nulltype eq or {		/TintTransform [			0 1 Names length 1 sub				{				/TTTablesIdx TTTablesIdx 1 add def				dup LookupTables exch get dup 0 get null eq					{					1 index					Names exch get					dup (Cyan) eq						{						pop exch						LookupTables length exch sub						/index cvx						0 0 0						}						{						dup (Magenta) eq							{							pop exch							LookupTables length exch sub							/index cvx							0 /exch cvx 0 0							}							{							(Yellow) eq								{								exch								LookupTables length exch sub								/index cvx								0 0 3 -1 /roll cvx 0								}								{								exch								LookupTables length exch sub								/index cvx								0 0 0 4 -1 /roll cvx								} ifelse							} ifelse						} ifelse					5 -1 /roll cvx /astore cvx					}					{					dup length 1 sub					LookupTables length 4 -1 roll sub 1 add					/index cvx /mul cvx /round cvx /cvi cvx /get cvx					} ifelse					Names length TTTablesIdx add 1 add 1 /roll cvx				} for			Names length [/pop cvx] cvx /repeat cvx			NComponents Names length  			TintMethod /Subtractive eq  				{  				subtractive_blend  				}  				{  				additive_blend  				} ifelse		] cvx bdf	} if	AGMCORE_host_sep {		Names convert_to_process {			exec_tint_transform		}		{				currentdict /AliasedColorants known {				AliasedColorants not			}{				false			} ifelse			5 dict begin			/AvoidAliasedColorants xdf			/painted? false def			/names_index 0 def			/names_len Names length def			Names {				AvoidAliasedColorants {					/currentspotalias current_spot_alias def					false set_spot_alias				} if				AGMCORE_is_cmyk_sep {					dup (Cyan) eq AGMCORE_cyan_plate and exch					dup (Magenta) eq AGMCORE_magenta_plate and exch					dup (Yellow) eq AGMCORE_yellow_plate and exch					(Black) eq AGMCORE_black_plate and or or or {						/devicen_colorspace_dict AGMCORE_gget /TintProc [							Names names_index /devn_makecustomcolor cvx						] cvx ddf						/painted? true def					} if					painted? {exit} if				}{					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {					/devicen_colorspace_dict AGMCORE_gget /TintProc [						Names names_index /devn_makecustomcolor cvx					] cvx ddf					/painted? true def					exit					} if				} ifelse				AvoidAliasedColorants {					currentspotalias set_spot_alias				} if				/names_index names_index 1 add def			} forall			painted? {				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put			}{				/devicen_colorspace_dict AGMCORE_gget /TintProc [					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx					0 0 0 0 () /findcmykcustomcolor cvx 0 /setcustomcolor cvx				] cvx ddf			} ifelse			end		} ifelse	}	{		AGMCORE_in_rip_sep {			Names convert_to_process not		}{			level3		} ifelse		{			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt			/TintProc level3 not AGMCORE_in_rip_sep and {				[					Names /length cvx [/pop cvx] cvx /repeat cvx				] cvx bdf			}{				/setcolor ldf			} ifelse		}{			exec_tint_transform		} ifelse	} ifelse	set_crd	/AliasedColorants false def	end} def/setindexedcolorspace{	dup /indexed_colorspace_dict exch AGMCORE_gput	begin		currentdict /CSD known {			CSD get_csd /Names known {				CSD get_csd begin				currentdict devncs				AGMCORE_host_sep{					4 dict begin					/devnCompCnt Names length def					/NewLookup HiVal 1 add string def					0 1 HiVal {						/tableIndex xdf						Lookup dup type /stringtype eq {							devnCompCnt tableIndex map_index						}{							exec						} ifelse						setdevicencolor						currentgray						tableIndex exch						HiVal mul cvi 						NewLookup 3 1 roll put					} for					[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt					end				}{					level3					{					[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt					}{					[/Indexed MappedCSA HiVal						[						Lookup dup type /stringtype eq							{/exch cvx CSD get_csd /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}							{/exec cvx}ifelse							/TintTransform load /exec cvx						]cvx					]setcolorspace_opt					}ifelse				} ifelse				end			}{			} ifelse			set_crd		}		{			/MappedCSA CSA map_csa def			AGMCORE_host_sep level2 not and{				0 0 0 0 setcmykcolor			}{				[/Indexed MappedCSA 				level2 not has_color not and{					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{						pop [/DeviceGray]					}if					HiVal GrayLookup				}{					HiVal 					currentdict/RangeArray known{						{ 							/indexed_colorspace_dict AGMCORE_gget begin							Lookup exch 							dup HiVal gt{								pop HiVal							}if							NComponents mul NComponents getinterval {} forall							NComponents 1 sub -1 0{								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range								NComponents 1 roll							}for							end						} bind					}{						Lookup					}ifelse				}ifelse				] setcolorspace_opt				set_crd			}ifelse		}ifelse	end}def/setindexedcolor{	AGMCORE_host_sep {		/indexed_colorspace_dict AGMCORE_gget dup /CSD known {			begin			CSD get_csd begin			map_indexed_devn			devn			end			end		}{			AGMCORE_gget/Lookup get 4 3 -1 roll map_index			pop setcmykcolor		} ifelse	}{		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSD known and {			/indexed_colorspace_dict AGMCORE_gget /CSD get get_csd begin			map_indexed_devn			devn			end		}		{			setcolor		} ifelse	}ifelse} def/ignoreimagedata{	currentoverprint not{		gsave		dup clonedict begin		1 setgray		/Decode [0 1] def		/DataSource <FF> def		/MultipleDataSources false def		/BitsPerComponent 8 def		currentdict end		systemdict /image get exec		grestore		}if	consumeimagedata}def/add_csa{	Adobe_AGM_Core begin			/AGMCORE_CSA_cache xput	end}def/get_csa_by_name{	dup type dup /nametype eq exch /stringtype eq or{		Adobe_AGM_Core begin		1 dict begin		/name xdf		AGMCORE_CSA_cache		{			0 get name eq {				exit			}{				pop			} ifelse		}forall		end		end	}{		pop	} ifelse}def/map_csa{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get	}if}def/add_csd{	Adobe_AGM_Core begin		/AGMCORE_CSD_cache xput	end}def/get_csd{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get	}if}def/pattern_buf_init{	/count get 0 0 put} def/pattern_buf_next{	dup /count get dup 0 get	dup 3 1 roll	1 add 0 xpt	get				} def/cachepattern_compress{	5 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	/string_size 16000 def	/readbuffer string_size string def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	/LZWFilter 	{		exch		dup length 0 eq {			pop		}{			patarray dup length 1 sub 3 -1 roll put		} ifelse		{string_size}{0}ifelse string	} /LZWEncode filter def	{ 				ReadFilter readbuffer readstring		exch LZWFilter exch writestring		not {exit} if	} loop	LZWFilter closefile	patarray					end}def/cachepattern{	2 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	{		ReadFilter 16000 string readstring exch		patarray dup length 1 sub 3 -1 roll put		not {exit} if	} loop	patarray dup dup length 1 sub () put						end	}def/add_pattern{	Adobe_AGM_Core begin		/AGMCORE_pattern_cache xput	end}def/get_pattern{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get		dup wrap_paintproc	}if}def/wrap_paintproc{   statusdict /currentfilenameextend known{	  begin		/OldPaintProc /PaintProc load def		/PaintProc		{		  mark exch		  dup /OldPaintProc get stopped		  {closefile restore end} if		  cleartomark		}  def	  end  } {pop} ifelse} def/make_pattern{	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub	matrix translate exch matrix concatmatrix			  1 index begin		BBox 0 get XStep div cvi XStep mul /xshift exch neg def		BBox 1 get YStep div cvi YStep mul /yshift exch neg def		BBox 0 get xshift add		BBox 1 get yshift add		BBox 2 get xshift add		BBox 3 get yshift add		4 array astore		/BBox exch def		[ xshift yshift /translate load null /exec load ] dup		3 /PaintProc load put cvx /PaintProc exch def		end	gsave 0 setgray	makepattern	grestore}def/set_pattern{	dup /PatternType get 1 eq{		dup /PaintType get 1 eq{			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray		}if	}if	setpattern}def/setcolorspace_opt{	dup currentcolorspace eq{		pop	}{		setcolorspace	}ifelse}def/updatecolorrendering{	currentcolorrendering/Intent known{		currentcolorrendering/Intent get	}{		null	}ifelse	Intent ne{		false  		Intent		AGMCORE_CRD_cache {			exch pop 			begin				dup Intent eq{					currentdict setcolorrendering_opt					end 					exch pop true exch						exit				}if			end		} forall		pop		not{			systemdict /findcolorrendering known{				Intent findcolorrendering pop				/ColorRendering findresource 				dup length dict copy				setcolorrendering_opt			}if		}if	}if} def/add_crd{	AGMCORE_CRD_cache 3 1 roll put}def/set_crd{	AGMCORE_host_sep not level2 and{		currentdict/CRD known{			AGMCORE_CRD_cache CRD get dup null ne{				setcolorrendering_opt			}{				pop			}ifelse		}{			currentdict/Intent known{				updatecolorrendering			}if		}ifelse		currentcolorspace dup type /arraytype eq			{0 get}if		/DeviceRGB eq			{			currentdict/UCR known				{/UCR}{/AGMCORE_currentucr}ifelse			load setundercolorremoval			currentdict/BG known 				{/BG}{/AGMCORE_currentbg}ifelse			load setblackgeneration			}if	}if}def/setcolorrendering_opt{	dup currentcolorrendering eq{		pop	}{		begin			/Intent Intent def			currentdict		end		setcolorrendering	}ifelse}def/cpaint_gcomp{	convert_to_process Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf	Adobe_AGM_Core/AGMCORE_ConvertToProcess get not	{		(%end_cpaint_gcomp) flushinput	}if}def/cpaint_gsep{	Adobe_AGM_Core/AGMCORE_ConvertToProcess get	{			(%end_cpaint_gsep) flushinput	}if}def/cpaint_gend{	newpath}def/path_rez{	dup 0 ne{		AGMCORE_deviceDPI exch div 		dup 1 lt{			pop 1		}if		setflat	}{		pop	}ifelse 	}def/set_spot_alias_ary{	/AGMCORE_SpotAliasAry where{		pop pop	}{		Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf		true set_spot_alias	}ifelse}def/set_spot_alias{	/AGMCORE_SpotAliasAry where{		/AGMCORE_current_spot_alias 3 -1 roll put	}{		pop	}ifelse}def/current_spot_alias{	/AGMCORE_SpotAliasAry where{		/AGMCORE_current_spot_alias get	}{		false	}ifelse}def/map_alias{	/AGMCORE_SpotAliasAry where{		begin			/AGMCORE_name xdf			false				AGMCORE_SpotAliasAry{				dup/Name get AGMCORE_name eq{					save exch					/Adobe_AGM_Core currentdict def					/CSD get get_csd					exch restore					exch pop true					exit				}{					pop				}ifelse			}forall		end	}{		pop false	}ifelse}bdf/spot_alias{	true set_spot_alias	/AGMCORE_&setcustomcolor AGMCORE_key_known not {		Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put	} if	/customcolor_tint 1 AGMCORE_gput	Adobe_AGM_Core begin	/setcustomcolor	{		dup /customcolor_tint exch AGMCORE_gput		current_spot_alias{			1 index 4 get map_alias{				mark 3 1 roll				setsepcolorspace				counttomark 0 ne{					setsepcolor				}if				pop				pop			}{				AGMCORE_&setcustomcolor			}ifelse		}{			AGMCORE_&setcustomcolor		}ifelse	}bdf	end}def/begin_feature{	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if}def/end_feature{	2 dict begin	/spd /setpagedevice load def	/setpagedevice { get_gstate spd set_gstate } def	stopped{$error/newerror false put}if	end	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if}def/set_negative{	Adobe_AGM_Core begin	/AGMCORE_inverting exch def	level2{		currentpagedevice/NegativePrint known{			currentpagedevice/NegativePrint get Adobe_AGM_Core/AGMCORE_inverting get ne{				true begin_feature true{						bdict /NegativePrint Adobe_AGM_Core/AGMCORE_inverting get edict setpagedevice				}end_feature			}if			/AGMCORE_inverting false def		}if	}if	AGMCORE_inverting{		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore	}if	end}def/lw_save_restore_override {	/md where {		pop		md begin		initializepage		/initializepage{}def		/pmSVsetup{} def		/endp{}def		/pse{}def		/psb{}def		/orig_showpage where			{pop}			{/orig_showpage /showpage load def}		ifelse		/showpage {orig_showpage gR} def		end	}if}def/pscript_showpage_override {	/NTPSOct95 where	{		begin		showpage		save		/showpage /restore load def		/restore {exch pop}def		end	}if}def/driver_media_override{	/md where {		pop		md /initializepage known {			md /initializepage {} put		} if		md /rC known {			md /rC {4{pop}repeat} put		} if	}if	/mysetup where {		/mysetup [1 0 0 1 0 0] put	}if	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put	level2		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if}def/driver_check_media_override{	/PrepsDict where		{pop}		{		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq			{			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and			}if			{			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix			}if		}ifelse}defAGMCORE_err_strings begin	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) defendendsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_CoolType_Core 2.23 0%%Copyright: Copyright 1997-2003 Adobe Systems Incorporated.  All Rights Reserved.%%Version: 2.23 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }ifuserdict /Adobe_CoolType_Core 60 dict dup begin put/Adobe_CoolType_Version 2.23 def/Level2?	systemdict /languagelevel known dup		{ pop systemdict /languagelevel get 2 ge }	if defLevel2? not	{	/currentglobal false def	/setglobal /pop load def	/gcheck { pop false } bind def	/currentpacking false def	/setpacking /pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpacking/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel		2 copy known not			{ 2 copy 3 dict dup /args 7 index 5 add array put put get }			{			get dup /args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch /args exch put				}				{ pop }			ifelse			}		ifelse			begin			count 2 sub 1 index lt				{ pop count 1 sub }			if			dup /argCount exch def			dup 0 gt				{				exch 1 index 2 add 1 roll				args exch 0 exch getinterval 			astore pop				}				{ pop }			ifelse			count 1 sub /restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		end	} bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{ { pop } repeat }				{ pop }			ifelse			args 0 argCount getinterval {} forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{ { end } repeat }		{ pop }	ifelse	} bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	} bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	} bind def/@ReRaise	{	cvx $error /errorname get errordict exch get exec	stop	} bind def/@Stopped	{	0 @#Stopped	} bind def/@#Stopped	{	@_SaveStackLevels	stopped		{ @_RestoreStackLevels true }		{ @_PopStackLevels false }	ifelse	} bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get /args get exch get		end	} bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup begin		mark			{				(*) { pop stop } 128 string /Category			resourceforall			}		stopped		cleartomark		currentdict eq dup			{ end }		if		not		}		{ false }	ifelse	def/CTHasResourceStatusBug	Level2?		{		mark			{ /steveamerige /Category resourcestatus }		stopped			{ cleartomark true }			{ cleartomark currentglobal not }		ifelse		}		{ false }	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec				{ cleartomark false }				{ { 3 2 roll pop true } { cleartomark false } ifelse }			ifelse			end		} bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad /ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup /CMap CTHasResourceStatusBug						{ CTResourceStatus }						{ resourcestatus }					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup /CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{ exit }								{ stop }							ifelse							}						ifelse						}						{ pop }					ifelse					}				128 string /CMap resourceforall				}			stopped				{ cleartomark }			stopped pop			setglobal			}		if		}	if	} bind def/doc_setup	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mov /moveto load def		/nfnt /newencodedfont load def		/mfnt /makefont load def		/sfnt /setfont load def		/ufnt /undefinefont load def		/chp /charpath load def		/awsh /awidthshow load def		/wsh /widthshow load def		/ash /ashow load def		/sh /show load def		end	userdict /Adobe_CoolType_Data 10 dict dup		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end put	} bind def/doc_trailer	{	currentdict Adobe_CoolType_Core eq		{ end }	if	} bind def/page_setup	{	Adobe_CoolType_Core begin	} bind def/page_trailer	{	end	} bind def/unload	{	systemdict /languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{ undef }				{ pop pop }			ifelse			}		if		}	if	} bind def/ndf	{	1 index where		{ pop pop pop }		{ dup xcheck { bind } if def }	ifelse	} def/findfont systemdict	begin	userdict		begin		/globaldict where { /globaldict get begin } if			dup where pop exch get		/globaldict where { pop end } if		end	endAdobe_CoolType_Core_Defined	{ /systemfindfont exch def }	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{ pop } ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq { 0 } { dup length } ifelse	2 index length add 1 add dict		begin		exch			{			1 index /FID eq				{ pop pop }				{ def }			ifelse			}		forall		dup null eq			{ pop }			{ { def } forall }		ifelse		currentdict		end	exch setglobal	} bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	} bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index  known			{ SharedFontDirectory 3 index get /FontReferenced known }			{ false }		ifelse		}		{		FontDirectory 3 index known			{ FontDirectory 3 index get /FontReferenced known }			{			SharedFontDirectory 3 index known				{ SharedFontDirectory 3 index get /FontReferenced known }				{ false }			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont /FontReferenced get		2 index dup type /nametype eq			{findfont}		if ne			{ pop false }		if		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{ 2 copy get 3 index 3 1 roll put }		for		pop pop pop		}		{		dup type /nametype eq		  { findfont }	  if		dup dup maxlength 2 add dict			begin			exch				{				1 index /FID ne					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type /stringtype eq { cvn } if def dup			currentdict			end		definefont def		}	ifelse	} bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type /dicttype ne			{ 0 dict }		if		currentdict /$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{ def } forall					{ def } forall					currentdict					dup /$Init known						{ dup /$Init get exec }					if					end				/$Strategy exch def				}				{ pop pop pop }			ifelse			}			{ pop pop }		ifelse		end	} bind def/scff	{	$SubstituteFont		begin		dup type /stringtype eq			{ dup length exch }			{ null }		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{ $sname }			ifelse def		end		{ findfont }	@Stopped		{		dup length 8 add string exch		1 index 0 (BadFont:) putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{ findfont }		@Stopped			{ pop /Courier findfont }		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	} bind def/isWidthsOnlyFont	{	dup /WidthsOnly known		{ pop pop true }		{		dup /FDepVector known			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }			{			dup /FDArray known				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }				{ pop }			ifelse			}		ifelse		}	ifelse	} bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 4 index def		/$doSmartSub false def		end	3 index	currentglobal false setglobal exch	/CompatibleFonts /ProcSet resourcestatus		{		pop pop		/CompatibleFonts /ProcSet findresource			begin			dup /CompatibleFont currentexception			1 index /CompatibleFont true setexception			1 index /Font resourcestatus				{				pop pop				3 2 roll setglobal				end				exch				dup findfont				/CompatibleFonts /ProcSet findresource					begin					3 1 roll exch /CompatibleFont exch setexception					end				}				{				3 2 roll setglobal				1 index exch /CompatibleFont exch setexception				end				findfont				$SubstituteFont /$substituteFound true put				}			ifelse		}		{ exch setglobal findfont }	ifelse	$SubstituteFont		begin		$substituteFound			{		 false		 (%%[Using embedded font ) print		 5 index ?str1 cvs print		 ( to avoid the font substitution problem noted earlier.]%%\n) print		 }			{			dup /FontName known				{				dup /FontName get $fontname eq				1 index /DistillerFauxFont known not and				/currentdistillerparams where					{ pop false 2 index isWidthsOnlyFont not and }				if				}				{ false }			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		exch pop exch pop exch		2 dict dup /Found 3 index put		exch findfont exch		}		{		exch exec		exch dup findfont		dup /FontType get 3 eq	  {		  exch ?str1 cvs		  dup length 1 sub		  -1 0		{			  exch dup 2 index get 42 eq			{				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop				 exit			  }			  {exch pop} ifelse		  }for		}		{		 exch pop	  } ifelse		2 dict dup /Downloaded 6 5 roll put		}	ifelse	dup /FontName 4 index put copyfont definefont pop	} bind def/?str2 256 string def/?add	{	1 index type /integertype eq		{ exch true 4 2 }		{ false 3 1 }	ifelse	roll	1 index findfont	dup /Widths known		{		Adobe_CoolType_Data /AddWidths? true put		gsave dup 1000 scalefont setfont		}	if	/Downloaded known		{		exec		exch			{			exch ?str2 cvs exch			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length			?str1 1 index 1 add 3 index putinterval			exch length 1 add 1 index add			?str1 2 index (*) putinterval			?str1 0 2 index getinterval cvn findfont 			?str1 3 index (+) putinterval			2 dict dup /FontName ?str1 0 6 index getinterval cvn put			dup /Downloaded Downloaded put end copyfont			dup /FontName get exch definefont pop pop pop			}			{			pop			}		ifelse		}		{		pop		exch			{			findfont			dup /Found get			dup length exch ?str1 cvs pop			?str1 1 index (+) putinterval			?str1 1 index 1 add 4 index ?str2 cvs putinterval			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn			1 dict exch 1 index exch /FontName exch put copyfont			dup /FontName get exch definefont pop			}			{			pop			}		ifelse		}	ifelse	Adobe_CoolType_Data /AddWidths? get		{ grestore Adobe_CoolType_Data /AddWidths? false put }	if	} bind def/?sh	{	currentfont /Downloaded known { exch } if pop	} bind def/?chp	{	currentfont /Downloaded known { pop } { false chp } ifelse	} bind def/?mv 	{	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse	} bind defsetpackinguserdict /$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{ get }			{ pop pop { pop /Courier } bind }		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams /CannotEmbedFontPolicy 2 copy known			{ get /Error eq }			{ pop pop false }		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup /WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type /stringtype eq { cvn } if def								/FontType 3 def								/FontMatrix [ .001 0 0 .001 0 0 ] def								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def								/FontBBox [ 0 0 0 0 ] def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth /y exch def /x exch def											x y setcharwidth											$SubstituteFont /$Strategy get /$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									} bind def								currentdict								end							exch setglobal							} bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup /WMode known										{ dup /WMode get }										{ 0 }									ifelse									/$WMode exch def									$fontname exch									dup /FontName known										{										dup /FontName get										dup type /stringtype eq { cvn } if										}										{ /unnamedfont }									ifelse									exch									Adobe_CoolType_Data /InVMDeepCopiedFonts get									1 index /FontName get known										{										pop										Adobe_CoolType_Data /InVMDeepCopiedFonts get										1 index get										null copyfont										}										{ $deepcopyfont }									ifelse									exch 1 index exch /FontBasedOn exch put									dup /FontName $fontname dup type /stringtype eq { cvn } if put									definefont									Adobe_CoolType_Data /InVMDeepCopiedFonts get										begin										dup /FontBasedOn get 1 index def										end									} bind def								/$Underprint									{									gsave									x abs y abs gt										{ /y 1000 def }										{ /x -1000 def 500 120 translate }									ifelse									Level2?										{										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]										setcolorspace										}										{ 0 setgray }									ifelse									10 setlinewidth									x .8 mul									[ 7 3 ]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{ .2 setcolor }											{ .8 setgray }										ifelse										fill grestore										stroke										}									forall									pop									grestore									} bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict /FontName known											{											FontName											dup type /stringtype eq { cvn } if											}											{ /unnamedfont }										ifelse										def										/FontName $fontname dup type /stringtype eq { cvn } if def										/currentdistillerparams where											{ pop }											{											/FontInfo currentdict /FontInfo known												{ FontInfo null copyfont }												{ 2 dict }											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									} bind def								end def						/$None							1 dict dup								begin								/$BuildFont {} bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type /stringtype eq { cvn } if						dup /$fontname exch def						$sname null eq							{ $str cvs dup length $slen sub $slen getinterval }							{ pop $sname }						ifelse						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont /$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{ /$match exch def exit }							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont /$dstack get								{								exch									{									1 index eq										{ pop false }										{ true }									ifelse									}									{ begin false }								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{ $match (fonts/) anchorsearch pop pop cvn }							{ /Courier }						ifelse						} bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1  [ /Ryumin-Light /HeiseiMin-W3										  /GothicBBB-Medium /HeiseiKakuGo-W5										  /HeiseiMaruGo-W4 /Jun101-Light ] def							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def							/GB1	  [ /STSong-Light /STHeiti-Regular ] def							/CNS1	 [ /MKai-Medium /MHei-Medium ] def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup /FontType get 0 eq							{							1 dict dup /FontName /copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup /FontName /copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{ $Strategies /$Type3Underprint get exec }						ifelse						} bind def					/$buildfontname						{						dup /CIDFont findresource /CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index (-) putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy (-) putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }							{ pop pop pop pop pop }						ifelse						length						$str 1 index (-) putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						} bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{ get }								{ pop pop [] }							ifelse							}							{ pop pop [] }						ifelse						false exch							{							dup /CIDFont resourcestatus								{								pop pop								save								1 index /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get }									{ false }								ifelse								exch pop								exch restore									{ pop }									{ exch pop true exit }								ifelse								}								{ pop }							ifelse							}						forall							{ $str cvs $buildfontname }							{							false (*)								{								save exch								dup /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get not }									{ true }								ifelse								exch /CIDSystemInfo get								dup /Registry get Registry eq								exch /Ordering get Ordering eq and and									{ exch restore exch pop true exit }									{ pop restore }								ifelse								}							$str /CIDFont resourceforall								{ $buildfontname }								{ $fontname $findfontByEnum }							ifelse							}						ifelse						} bind def					end				end				currentdict /$error known currentdict /languagelevel known and dup					{ pop $error /SubstituteFont known }				if				dup					{ $error }					{ Adobe_CoolType_Core }				ifelse				begin					{					/SubstituteFont					/CMap /Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{ dup $str cvs dup length $slen sub $slen getinterval cvn }									{ $sname }								ifelse								Adobe_CoolType_Data /InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{ exch pop true exit }												{ pop }											ifelse											}											{											FontDirectory 1 index known												{ exch pop true exit }												{												GlobalFontDirectory 1 index known													{ exch pop true exit }													{ pop }												ifelse												}											ifelse											}										ifelse										}									forall									}									{ pop pop false }								ifelse									{									exch pop exch pop									}									{									dup /CMap resourcestatus										{										pop pop										dup /$cmapname exch def										/CMap findresource /CIDSystemInfo get { def } forall										$findfontByROS										}										{										128 string cvs										dup (-) search											{											3 1 roll search												{												3 1 roll pop													{ dup cvi }												stopped													{ pop pop pop pop pop $findfontByEnum }													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup /CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup /$cmapname exch def															/CMap findresource /CIDSystemInfo get { def } forall															$findfontByROS															true exit															}															{ pop }														ifelse														}													for													dup type /booleantype eq														{ pop }														{ pop pop pop $findfontByEnum }													ifelse													}												ifelse												}												{ pop pop pop $findfontByEnum }											ifelse											}											{ pop pop $findfontByEnum }										ifelse										}									ifelse									}								ifelse								}								{ //SubstituteFont exec }							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{ $findfontByEnum }								{ //SubstituteFont exec }							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core /scfindfont /systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup /FontName known								{ dup /FontName get dup 3 index ne }								{ /noname true }							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def /$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{ 1 index /FID eq { pop pop } { def } ifelse }										forall										currentdict										end									definefont									dup /FontName known { dup /FontName get } { null } ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using ) print										dup /FontName known											{ dup /FontName get } { (unspecified font) }										ifelse										$str cvs print (.\n) print										}									if									}									{ exch pop }								ifelse								}								{ exch pop }							ifelse							end						} bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core /findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type /stringtype ne { $str cvs } if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{ dup $inVMIndex $AddInVMFont }						if						$doSmartSub							{							currentdict /$Strategy known								{ $Strategy /$BuildFont get exec }							if							}						if						}					if					end				} bind put			}		if		}	if	end/$AddInVMFont	{	exch /FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data /InVMFontsByCMap get exch		$DictAdd		}		{ pop pop pop }	ifelse	} bind def/$DictAdd	{	2 copy known not		{ 2 copy 4 index length dict put }	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get { forall } def				2 copy currentdict put				end			}			{ pop }		ifelse		}	if	get		begin			{ def }		forall		end	} bind defendend%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.19 0%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated.%%Version: 1.19 0systemdict /languagelevel known dup	{ currentglobal false setglobal }	{ false }ifelseexchuserdict /Adobe_CoolType_Utility 2 copy known	{ 2 copy get dup maxlength 25 add dict copy }	{ 25 dict }ifelse putAdobe_CoolType_Utility	begin	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch /eCCRun known not			ct_Level2? and or defct_Level2?	{ globaldict begin currentglobal true setglobal }if	/ct_AddStdCIDMap		ct_Level2?			{ {			((Hex) 57 StartData			0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0			7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60			d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8			cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec			} }			{ {			<BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C			4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> eexec			} }		ifelse bind defuserdict /cid_extensions knowndup { cid_extensions /cid_UpdateDB known and } if	 {	 cid_extensions	 begin	 /cid_GetCIDSystemInfo		 {		 1 index type /stringtype eq			 { exch cvn exch }		 if		 cid_extensions			 begin			 dup load 2 index known				 {				 2 copy				 cid_GetStatusInfo				 dup null ne					 {					 1 index load					 3 index get					 dup null eq						  { pop pop cid_UpdateDB }						  {						  exch						  1 index /Created get eq							  { exch pop exch pop }							  { pop cid_UpdateDB }						  ifelse						  }					 ifelse					 }					 { pop cid_UpdateDB }				 ifelse				 }				 { cid_UpdateDB }			 ifelse			 end		 } bind def	 end	 }ifct_Level2?	{ end setglobal }if	/ct_UseNativeCapability?  systemdict /composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring () def		/usewidths? true def		end def	ct_Level2? { setglobal } { pop } ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict /languagelevel known				{ pop /CIDFont findresource /GlyphDirectory get }				{				1 index /CIDFont findresource /GlyphDirectory				get dup type /dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			} def		/+			{			systemdict /languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{ 1 dict begin }			ifelse			/$ exch def			systemdict /languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			? { $ begin } if			} def		/? { $ type /dicttype eq } def		/| {			userdict /Adobe_CoolType_Data known				{			Adobe_CoolType_Data /AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					  begin						AddWidths?								{								Adobe_CoolType_Data /CC 3 index put								? { def } { $ 3 1 roll put } ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont /Widths get exch CC exch put								}								{ ? { def } { $ 3 1 roll put } ifelse }							ifelse					end				end				}				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse				}				{ ? { def } { $ 3 1 roll put } ifelse }			ifelse			} def		/!			{			? { end } if			systemdict /languagelevel known				{ gvm setglobal }			if			end			} def		/: { string currentfile exch readstring pop } executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx [.001 0 0 .001 0 0] def		/ct_1000Mtx [1000 0 0 1000 0 0] def		/ct_raise {exch cvx exch errordict exch get exec stop} bind def		/ct_reraise			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print					errordict exch get exec stop			} bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			} bind def		/ct_GetInterval			{			Adobe_CoolType_Utility /ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{ dup string /dst_string exch def }				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex  get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string  dst_index 2 index putinterval						length dst_index add /dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string  dst_index 2 index putinterval						pop dup dst_index add /dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							  { arrayIndex get }							  {							  pop							  exit							  }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			} bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{ /unknowninstancename /Category resourcestatus }			stopped				{ cleartomark setglobal true }				{ cleartomark currentglobal not exch setglobal }			ifelse				{					{					mark 3 1 roll /Category findresource						begin						ct_Vars /vm currentglobal put						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec							{ cleartomark false }							{ { 3 2 roll pop true } { cleartomark false } ifelse }						ifelse						ct_Vars /vm get setglobal						end					}				}				{ { resourcestatus } }			ifelse bind def			/CIDFont /Category ct_resourcestatus				{ pop pop }				{				currentglobal  true setglobal				/Generic /Category findresource				dup length dict copy				dup /InstanceType /dicttype put				/CIDFont exch /Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit /ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				  /Registry (Adobe) def				  /Ordering (Identity) def				  /Supplement 0 def				end def				/CMapName /Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000> <FFFF>				endcodespacerange				1 begincidrange				<0000> <FFFF> 0				endcidrange				endcmap				CMapName currentdict /CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont  10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{ pop pop /defineresource /undefined ct_raise }				ifelse				} bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{ get 3 1 roll pop pop}						{ pop pop /findresource /undefinedresource ct_raise }					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/ct_resourcestatus /resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup (Binary) eq						{						pop						null						currentfile						ct_Level2?							{								{ cid_BYTE_COUNT () /SubFileDecode filter }							stopped								{ pop pop pop }							if							}						if						/readstring load						exit						}					if					dup (Hex) eq						{						pop						currentfile						ct_Level2?							{								{ null exch /ASCIIHexDecode filter /readstring }							stopped								{ pop exch pop (>) exch /readhexstring }							if							}							{ (>) exch /readhexstring }						ifelse						load						exit						}					if					/StartData /typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch /GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop /readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				} bind def			/StartData				{				mark					{					currentdict					dup /FDArray get 0 get /FontMatrix get					0 get 0.001 eq						{						dup /CDevProc known not							{							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known								{ get }								{								pop pop								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }								}							ifelse							def							}						if						}						{						 /CDevProc							 {							 pop pop pop pop pop							 0							 1 cid_temp /cid_CIDFONT get							 /FDArray get 0 get							 /FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							 } def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup /cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup /SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup /SubrMapOffset undef										dup /SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{ pop }								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict /CIDFont defineresource pop					end end					}				stopped					{ cleartomark /StartData ct_reraise }				if				} bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit /ProcSet ct_resourcestatus				{ true }				{ /CIDInitC /ProcSet ct_resourcestatus }			ifelse				{				pop pop				/CIDInit /ProcSet findresource				ct_UseNativeCapability?					{ pop null }					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }				ifelse				}				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }			ifelse			ct_Vars exch /ct_oldCIDInit exch put			} bind def		/ct_restoreCIDInit			{			ct_Vars /ct_oldCIDInit get dup null ne				{ /CIDInit exch /ProcSet defineresource pop }				{ pop }			ifelse			} bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility /ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{ pop 0 }						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{ get }								{ pop pop nullstring }							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{ 0 FDBytes ct_cvnsi }									{ pop 0 }								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{ /charstring nullstring def exit }								if								/cid 0 def								}							ifelse							}						loop			} def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			} def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont /Widths get cid					2 copy known						{ get exch pop aload pop }						{ pop pop stringwidth }					ifelse					}					{ stringwidth }				ifelse				setcharwidth				0 0 moveto				}			ifelse			} def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{ get }				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup /FontMatrix 2 copy known						{ get }						{ pop pop ct_defaultFontMtx }					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont /Widths get def					/CharStrings 1 dict dup /.notdef						<d841272cf18f54fc13> dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup /CharStrings get 1 index /Encoding get			ct_dfCharCode get charstring put			rootfont /WMode 2 copy known				{ get }				{ pop pop 0 }			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ ct_str1 show }			ifelse			} def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ ct_1000Mtx matrix concatmatrix concat }				{ pop }			ifelse			/Private get			Adobe_CoolType_Utility /ct_Level2? get not				{				ct_dfDict /Private				3 -1 roll					{ put }				1183615869 internaldict /superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility /ct_Level2? get				{ 1 index }				{ 3 index /Private get mark 6 1 roll }			ifelse			dup /RunInt known				{ /RunInt get }				{ pop /CCRun }			ifelse			get exec			Adobe_CoolType_Utility /ct_Level2? get not				{ cleartomark }			if			} bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility /ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{ stop }			if			end			end			end			end			} bind def		/BaseFontNameStr (BF00) def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/BuildChar /ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString /ct_Type3ShowCharString load def				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup /lenIV 4 put def				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def				/PaintType 0 def				/ct_ShowCharString /ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{ exit }				if				}			for			exch pop exch pop			} bind def		/ct_makeocf			{			15 dict				begin				exch /WMode exch def				exch /FontName exch def				/FontType 0 def				/FMapType 2 def			dup /FontMatrix known				{ dup /FontMatrix get /FontMatrix exch def }				{ /FontMatrix matrix def }			ifelse				/bfCount 1 index /CIDCount get 256 idiv 1 add					dup 256 gt { pop 256} if def				/Encoding					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for					bfCount 1 255 { 2 copy bfCount put pop } for					def				/FDepVector bfCount dup 256 lt { 1 add } if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont /FontBBox known						{ CIDFont /FontBBox get /FontBBox exch def }					if					CIDFont /CDevProc known						{ CIDFont /CDevProc get /CDevProc exch def }					if					currentdict					end				BaseFontNameStr 3 (0) putinterval				0 1 bfCount dup 256 eq { 1 sub } if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup /CIDFirstByte exch 256 mul def						FontType 3 eq							{ /ct_FDDict 2 dict def }						if						currentdict						end					1 index  16					BaseFontNameStr  2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont /Widths get						begin						exch /CIDFont get /GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{ exch pop }			ifelse			} bind def		/ct_ComposeFont			{			ct_UseNativeCapability?				{				2 index /CMap ct_resourcestatus					{ pop pop exch pop }					{					/CIDInit /ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch /WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry (Adobe) def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-) search									{									pop pop									(-) search										{										dup length string copy										exch pop exch pop										}										{ pop (Identity)}									ifelse									}									{ pop  (Identity)  }								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000> <FFFF>							endcodespacerange							1 begincidrange							<0000> <FFFF> 0							endcidrange							endcmap							CMapName currentdict /CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index /CMap ct_resourcestatus					{ pop pop }					{					/CIDInit /ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry (Adobe) def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-) search							{							pop pop							(-) search								{ dup length string copy exch pop exch pop }								{ pop (Identity) }							ifelse							}							{ pop (Identity) }						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000> <FFFF>					endcodespacerange					1 begincidrange					<0000> <FFFF> 0					endcidrange					endcmap					CMapName currentdict /CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		currentdict readonly pop		end	end%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated.%%Version: 1.0 0userdict /ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{  version  cvi  2015  ge} bind def/AllocGlyphStorage{  Is2015?  {			pop  }   { 		{string} forall  } ifelse} bind def/Type42DictBegin{	25 dict begin  /FontName exch def  /CharStrings 256 dict 	begin		  /.notdef 0 def		  currentdict 	end def  /Encoding exch def  /PaintType 0 def  /FontType 42 def  /FontMatrix [1 0 0 1 0 0] def  4 array  astore cvx /FontBBox exch def  /sfnts} bind def/Type42DictEnd  {	 currentdict dup /FontName get exch definefont end	ct_T42Dict exch	dup /FontName get exch put} bind def/RD {string currentfile exch readstring pop} executeonly def/PrepFor2015{	Is2015?	{		  		 /GlyphDirectory 		 16		 dict def		 sfnts 0 get		 dup		 2 index		 (glyx)		 putinterval		 2 index  		 (locx)		 putinterval		 pop		 pop	}	{		 pop		 pop	} ifelse			} bind def/AddT42Char{	Is2015?	{		/GlyphDirectory get 		begin		def		end		pop		pop	}	{		/sfnts get		4 index		get		3 index	  2 index		putinterval		pop		pop		pop		pop	} ifelse} bind defend%%EndResourceAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Image 75 dict dup begin put/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def/nd{	null def}bind def/AGMIMG_&image nd/AGMIMG_&colorimage nd/AGMIMG_&imagemask nd/AGMIMG_mbuf () def/AGMIMG_ybuf () def/AGMIMG_kbuf () def/AGMIMG_c 0 def/AGMIMG_m 0 def/AGMIMG_y 0 def/AGMIMG_k 0 def/AGMIMG_tmp nd/AGMIMG_imagestring0 nd/AGMIMG_imagestring1 nd/AGMIMG_imagestring2 nd/AGMIMG_imagestring3 nd/AGMIMG_imagestring4 nd/AGMIMG_imagestring5 nd/AGMIMG_cnt nd/AGMIMG_fsave nd/AGMIMG_colorAry nd/AGMIMG_override nd/AGMIMG_name nd/AGMIMG_maskSource nd/invert_image_samples nd/knockout_image_samples	nd/img nd/sepimg nd/devnimg nd/idximg nd/doc_setup{ 	Adobe_AGM_Core begin	Adobe_AGM_Image begin	/AGMIMG_&image systemdict/image get def	/AGMIMG_&imagemask systemdict/imagemask get def	/colorimage where{		pop		/AGMIMG_&colorimage /colorimage ldf	}if	end	end}def/page_setup{	Adobe_AGM_Image begin	/AGMIMG_ccimage_exists {/customcolorimage where 		{			pop			/Adobe_AGM_OnHost_Seps where			{			pop false			}{			/Adobe_AGM_InRip_Seps where				{				pop false				}{					true				 }ifelse			 }ifelse			}{			false		}ifelse 	}bdf	level2{		/invert_image_samples		{			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf			/Decode [ Decode 1 get Decode 0 get] def		}def		/knockout_image_samples		{			Operator/imagemask ne{				/Decode [1 1] def			}if		}def	}{			/invert_image_samples		{			{1 exch sub} currenttransfer addprocs settransfer		}def		/knockout_image_samples		{			{ pop 1 } currenttransfer addprocs settransfer		}def	}ifelse	/img /imageormask ldf	/sepimg /sep_imageormask ldf	/devnimg /devn_imageormask ldf	/idximg /indexed_imageormask ldf	/_ctype 7 def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{			bind		}if		def	}forall}def/page_trailer{	end}def/doc_trailer{}def/imageormask_sys{	begin		save mark		level2{			currentdict			Operator /imagemask eq{				AGMIMG_&imagemask			}{				use_mask {					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse				}{					AGMIMG_&image				}ifelse			}ifelse		}{			Width Height			Operator /imagemask eq{				Decode 0 get 1 eq Decode 1 get 0 eq	and				ImageMatrix /DataSource load				AGMIMG_&imagemask			}{				BitsPerComponent ImageMatrix /DataSource load				AGMIMG_&image			}ifelse		}ifelse		cleartomark restore	end}def/overprint_plate{	currentoverprint {		0 get dup type /nametype eq {			dup /DeviceGray eq{				pop AGMCORE_black_plate not			}{				/DeviceCMYK eq{					AGMCORE_is_cmyk_sep not				}if			}ifelse		}{			false exch			{				 AGMOHS_sepink eq or			} forall			not		} ifelse	}{		pop false	}ifelse}def/process_mask_L3{	dup begin	/ImageType 1 def	end	4 dict begin		/DataDict exch def		/ImageType 3 def		/InterleaveType 3 def		/MaskDict 9 dict begin			/ImageType 1 def			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def			/ImageMatrix [Width 0 0 Height neg 0 Height] def			/NComponents 1 def			/BitsPerComponent 1 def			/Decode [0 1] def			/DataSource AGMIMG_maskSource def		currentdict end def	currentdict end}def/use_mask{	dup type /dicttype eq	{		dup /Mask known	{			dup /Mask get {				level3				{true}				{					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse					3 -1 roll and				} ifelse			}			{false} ifelse		}		{false} ifelse	}	{false} ifelse}def/make_line_source{	begin	MultipleDataSources {		[		Decode length 2 div cvi {Width string} repeat		]	}{		Width Decode length 2 div mul cvi string	}ifelse	end}def/datasource_to_str{	exch dup type	dup /filetype eq {		pop exch readstring	}{		/arraytype eq {			exec exch copy		}{			pop		}ifelse	}ifelse	pop}def/masked_image_simulation{	3 dict begin	dup make_line_source /line_source xdf	/mask_source AGMIMG_maskSource /LZWDecode filter def	dup /Width get 8 div ceiling cvi string /mask_str xdf	begin	gsave	0 1 translate 1 -1 Height div scale	1 1 Height {		pop		gsave		MultipleDataSources {			0 1 DataSource length 1 sub {				dup DataSource exch get				exch line_source exch get				datasource_to_str			} for		}{			DataSource line_source datasource_to_str		} ifelse		<<			/PatternType 1			/PaintProc [				/pop cvx				<<					/ImageType 1					/Width Width					/Height 1					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix					/MultipleDataSources MultipleDataSources					/DataSource line_source					/BitsPerComponent BitsPerComponent					/Decode Decode				>>				/image cvx			] cvx			/BBox [0 0 Width 1]			/XStep Width			/YStep 1			/PaintType 1			/TilingType 2		>>		matrix makepattern set_pattern		<<			/ImageType 1			/Width Width			/Height 1			/ImageMatrix Width 1 matrix scale			/MultipleDataSources false			/DataSource mask_source mask_str readstring pop			/BitsPerComponent 1			/Decode [0 1]		>>		imagemask		grestore		0 1 translate	} for	grestore	end	end}def/imageormask{	begin		SkipImageProc {			currentdict consumeimagedata		}		{			save mark			level2 AGMCORE_host_sep not and{				currentdict				Operator /imagemask eq DeviceN_PS2 not and {					imagemask				}{					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{						[/Separation /Black /DeviceGray {}] setcolorspace						/Decode [ Decode 1 get Decode 0 get ] def					}if					use_mask {						level3 {process_mask_L3 image}{masked_image_simulation}ifelse					}{						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 						{							Names convert_to_process not {								2 dict begin								/imageDict xdf								/names_index 0 def								gsave								imageDict write_image_file {									Names {										dup (None) ne {											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace											Operator imageDict read_image_file											names_index 0 eq {true setoverprint} if											/names_index names_index 1 add def										}{											pop										} ifelse									} forall									close_image_file								} if								grestore								end							}{								Operator /imagemask eq {									imagemask								}{									image								} ifelse							} ifelse						}{							Operator /imagemask eq {								imagemask							}{								image							} ifelse						} ifelse					}ifelse				}ifelse			}{				Width Height				Operator /imagemask eq{					Decode 0 get 1 eq Decode 1 get 0 eq	and					ImageMatrix /DataSource load					/Adobe_AGM_OnHost_Seps where {						pop imagemask					}{						currentgray 1 ne{							currentdict imageormask_sys						}{							currentoverprint not{								1 AGMCORE_&setgray								currentdict imageormask_sys							}{								currentdict ignoreimagedata							}ifelse				 								}ifelse					}ifelse				}{					BitsPerComponent ImageMatrix 					MultipleDataSources{						0 1 NComponents 1 sub{							DataSource exch get						}for					}{						/DataSource load					}ifelse					Operator /colorimage eq{						AGMCORE_host_sep{							MultipleDataSources level2 or NComponents 4 eq and{								AGMCORE_is_cmyk_sep{									MultipleDataSources{										/DataSource [											DataSource 0 get /exec cvx											DataSource 1 get /exec cvx											DataSource 2 get /exec cvx											DataSource 3 get /exec cvx											/AGMCORE_get_ink_data cvx										] cvx def									}{										/DataSource 										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 										/DataSource load										filter_cmyk 0 () /SubFileDecode filter def									}ifelse									/Decode [ Decode 0 get Decode 1 get ] def									/MultipleDataSources false def									/NComponents 1 def									/Operator /image def									invert_image_samples						 			1 AGMCORE_&setgray									currentdict imageormask_sys								}{									currentoverprint not Operator/imagemask eq and{  			 							1 AGMCORE_&setgray  			 							currentdict imageormask_sys  			 						}{  			 							currentdict ignoreimagedata  			 						}ifelse								}ifelse							}{									MultipleDataSources NComponents AGMIMG_&colorimage													}ifelse						}{							true NComponents colorimage						}ifelse					}{						Operator /image eq{							AGMCORE_host_sep{								/DoImage true def								HostSepColorImage{									invert_image_samples								}{									AGMCORE_black_plate not Operator/imagemask ne and{										/DoImage false def										currentdict ignoreimagedata					 				}if								}ifelse						 		1 AGMCORE_&setgray								DoImage									{currentdict imageormask_sys} if							}{								use_mask {									level3 {process_mask_L3 image}{masked_image_simulation}ifelse								}{									image								}ifelse							}ifelse						}{							Operator/knockout eq{								pop pop pop pop pop								currentcolorspace overprint_plate not{									knockout_unitsq								}if							}if						}ifelse					}ifelse				}ifelse			}ifelse			cleartomark restore		}ifelse	end}def/sep_imageormask{ 	/sep_colorspace_dict AGMCORE_gget begin	/MappedCSA CSA map_csa def	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_avoid_L2_sep_space{			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def		}if 		AGMIMG_ccimage_exists 		MappedCSA 0 get /DeviceCMYK eq and		currentdict/Components known and 		Name () ne and 		Name (All) ne and 		Operator /image eq and		AGMCORE_producing_seps not and		level2 not and		{			Width Height BitsPerComponent ImageMatrix 			[			/DataSource load /exec cvx			{				0 1 2 index length 1 sub{					1 index exch					2 copy get 255 xor put				}for			} /exec cvx			] cvx bind			MappedCSA 0 get /DeviceCMYK eq{				Components aload pop			}{				0 0 0 Components aload pop 1 exch sub			}ifelse			Name findcmykcustomcolor			customcolorimage		}{			AGMCORE_producing_seps not{				level2{					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentdict imageormask				}{ 					currentdict					Operator /imagemask eq{						imageormask					}{						sep_imageormask_lev1					}ifelse				}ifelse 			}{				AGMCORE_host_sep{					Operator/knockout eq{						currentdict/ImageMatrix get concat						knockout_unitsq					}{						currentgray 1 ne{ 							AGMCORE_is_cmyk_sep Name (All) ne and{ 								level2{	 								[ /Separation Name [/DeviceGray]	 								{ 	 									sep_colorspace_proc AGMCORE_get_ink_data										1 exch sub	 								} bind									] AGMCORE_&setcolorspace									/sep_tint AGMCORE_gget AGMCORE_&setcolor 									currentdict imageormask_sys	 							}{	 								currentdict									Operator /imagemask eq{										imageormask_sys									}{										sep_image_lev1_sep									}ifelse	 							}ifelse 							}{ 								Operator/imagemask ne{									invert_image_samples 								}if		 						currentdict imageormask_sys 							}ifelse 						}{ 							currentoverprint not Name (All) eq or Operator/imagemask eq and{								currentdict imageormask_sys 								}{								currentoverprint not									{ 									gsave  									knockout_unitsq 									grestore									}if								currentdict consumeimagedata 		 					}ifelse 						}ifelse		 			}ifelse 				}{					currentcolorspace 0 get /Separation ne{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentoverprint 					MappedCSA 0 get /DeviceCMYK eq and 					Name inRip_spot_has_ink not and 					Name (All) ne and {						imageormask_l2_overprint					}{						currentdict imageormask 					}ifelse				}ifelse			}ifelse		}ifelse		cleartomark restore	}ifelse	end	end}def/decode_image_sample{	4 1 roll exch dup 5 1 roll	sub 2 4 -1 roll exp 1 sub div mul add} bdf/colorSpaceElemCnt{	currentcolorspace 0 get dup /DeviceCMYK eq {		pop 4	}	{		/DeviceRGB eq {			pop 3		}{			1		} ifelse	} ifelse} bdf/devn_sep_datasource{	1 dict begin	/dataSource xdf	[		0 1 dataSource length 1 sub {			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx		} for	] cvx bind	end} bdf		/devn_alt_datasource{	11 dict begin	/srcDataStrs xdf	/dstDataStr xdf	/convProc xdf	/origcolorSpaceElemCnt xdf	/origMultipleDataSources xdf	/origBitsPerComponent xdf	/origDecode xdf	/origDataSource xdf	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def	/samplesNeedDecoding		0 0 1 origDecode length 1 sub {			origDecode exch get add		} for		origDecode length 2 div div		dup 1 eq {			/decodeDivisor 2 origBitsPerComponent exp 1 sub def		} if		2 origBitsPerComponent exp 1 sub ne	def	[		0 1 dsCnt 1 sub [			currentdict /origMultipleDataSources get {				dup currentdict /origDataSource get exch get dup type			}{				currentdict /origDataSource get dup type			} ifelse			dup /filetype eq {				pop currentdict /srcDataStrs get 3 -1 /roll cvx /get cvx /readstring cvx /pop cvx			}{				/stringtype ne {					/exec cvx				} if				currentdict /srcDataStrs get /exch cvx 3 -1 /roll cvx /xpt cvx			} ifelse		] cvx /for cvx		currentdict /srcDataStrs get 0 /get cvx /length cvx 0 /ne cvx [			0 1 Width 1 sub [				Adobe_AGM_Utils /AGMUTIL_ndx /xddf cvx				currentdict /origMultipleDataSources get {					0 1 dsCnt 1 sub [						Adobe_AGM_Utils /AGMUTIL_ndx1 /xddf cvx						currentdict /srcDataStrs get /AGMUTIL_ndx1 /load cvx /get cvx /AGMUTIL_ndx /load cvx /get cvx						samplesNeedDecoding {							currentdict /decodeDivisor known {								currentdict /decodeDivisor get /div cvx							}{								currentdict /origDecode get /AGMUTIL_ndx1 /load cvx 2 /mul cvx 2 /getinterval cvx /aload cvx /pop cvxs								BitsPerComponent /decode_image_sample load /exec cvx							} ifelse						} if					] cvx /for cvx				}{					Adobe_AGM_Utils /AGMUTIL_ndx1 0 /ddf cvx					currentdict /srcDataStrs get 0 /get cvx /AGMUTIL_ndx /load cvx							currentdict /origDecode get length 2 idiv dup 3 1 /roll cvx /mul cvx /exch cvx /getinterval cvx 					[						samplesNeedDecoding {							currentdict /decodeDivisor known {								currentdict /decodeDivisor get /div cvx							}{								currentdict /origDecode get /AGMUTIL_ndx1 /load cvx 2 /mul cvx 2 /getinterval cvx /aload cvx /pop cvx								BitsPerComponent /decode_image_sample load /exec cvx								Adobe_AGM_Utils /AGMUTIL_ndx1 /AGMUTIL_ndx1 /load cvx 1 /add cvx /ddf cvx							} ifelse						} if					] cvx /forall cvx				} ifelse				currentdict /convProc get /exec cvx				currentdict /origcolorSpaceElemCnt get 1 sub -1 0 [					currentdict /dstDataStr get 3 1 /roll cvx /AGMUTIL_ndx /load cvx currentdict /origcolorSpaceElemCnt get /mul cvx /add cvx /exch cvx					currentdict /convProc get /filter_indexed_devn load ne {						255 /mul cvx /cvi cvx 					} if					/put cvx 				] cvx /for cvx			] cvx /for cvx			currentdict /dstDataStr get		] cvx /if cvx	] cvx bind	end} bdf/devn_imageormask{ 	/devicen_colorspace_dict AGMCORE_gget begin	/MappedCSA CSA map_csa def	2 dict begin	dup dup	/dstDataStr exch /Width get colorSpaceElemCnt mul string def	/srcDataStrs [ 3 -1 roll begin		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse		{			Width Decode length 2 div mul cvi string		} repeat		end ] def	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_producing_seps not {			level3 not {				Operator /imagemask ne {					/DataSource [						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 						dstDataStr srcDataStrs devn_alt_datasource /exec cvx						] cvx 0 () /SubFileDecode filter def					/MultipleDataSources false def					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				} if			}if			currentdict imageormask 		}{			AGMCORE_host_sep{				Names convert_to_process {					CSA map_csa 0 get /DeviceCMYK eq {						/DataSource							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 							[							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 							dstDataStr srcDataStrs devn_alt_datasource /exec cvx							] cvx						filter_cmyk 0 () /SubFileDecode filter def						/MultipleDataSources false def						/Decode [1 0] def						/DeviceGray setcolorspace			 			currentdict imageormask_sys 					}{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate {							/DataSource [								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse								CSA map_csa 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get								dstDataStr srcDataStrs devn_alt_datasource /exec cvx								] cvx 0 () /SubFileDecode filter def							/MultipleDataSources false def							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				 			currentdict imageormask_sys				 		}						{	 						gsave 	 						knockout_unitsq	 						grestore							currentdict consumeimagedata 						} ifelse 					} ifelse				}				{						/devicen_colorspace_dict AGMCORE_gget /names_index known {	 					Operator/imagemask ne{	 						MultipleDataSources {		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def								/MultipleDataSources false def	 						}{								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def	 						} ifelse							invert_image_samples	 					} if			 			currentdict imageormask_sys	 				}{	 					currentoverprint not Operator/imagemask eq and{							currentdict imageormask_sys 							}{							currentoverprint not								{	 							gsave 	 							knockout_unitsq	 							grestore								}if							currentdict consumeimagedata 			 			}ifelse	 				}ifelse	 			}ifelse 			}{				currentdict imageormask			}ifelse		}ifelse		cleartomark restore	}ifelse	end	end	end}def/imageormask_l2_overprint{	currentdict	currentcmykcolor add add add 0 eq{		currentdict consumeimagedata	}{		level3{ 						currentcmykcolor 			/AGMIMG_k xdf 			/AGMIMG_y xdf 			/AGMIMG_m xdf 			/AGMIMG_c xdf			Operator/imagemask eq{				[/DeviceN [				AGMIMG_c 0 ne {/Cyan} if				AGMIMG_m 0 ne {/Magenta} if				AGMIMG_y 0 ne {/Yellow} if				AGMIMG_k 0 ne {/Black} if				] /DeviceCMYK {}] setcolorspace				AGMIMG_c 0 ne {AGMIMG_c} if				AGMIMG_m 0 ne {AGMIMG_m} if				AGMIMG_y 0 ne {AGMIMG_y} if				AGMIMG_k 0 ne {AGMIMG_k} if				setcolor						}{					/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def				[/Indexed 									[						/DeviceN [							AGMIMG_c 0 ne {/Cyan} if							AGMIMG_m 0 ne {/Magenta} if							AGMIMG_y 0 ne {/Yellow} if							AGMIMG_k 0 ne {/Black} if						] 						/DeviceCMYK {							AGMIMG_k 0 eq {0} if							AGMIMG_y 0 eq {0 exch} if							AGMIMG_m 0 eq {0 3 1 roll} if							AGMIMG_c 0 eq {0 4 1 roll} if												}					]					255					{						255 div 						mark exch						dup	dup dup						AGMIMG_k 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_y 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_m 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_c 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop									counttomark 1 roll						}{							pop						}ifelse						counttomark 1 add -1 roll pop					}				] setcolorspace			}ifelse			imageormask_sys		}{	write_image_file{		currentcmykcolor		0 ne{			[/Separation /Black /DeviceGray {}] setcolorspace			gsave			/Black			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Yellow /DeviceGray {}] setcolorspace			gsave			/Yellow			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Magenta /DeviceGray {}] setcolorspace			gsave			/Magenta			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Cyan /DeviceGray {}] setcolorspace			gsave			/Cyan 			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		} if				close_image_file			}{				imageormask			}ifelse		}ifelse	}ifelse} def/indexed_imageormask{	begin		save mark  		currentdict 		AGMCORE_host_sep{			Operator/knockout eq{				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {					/CSA get map_csa				}{					/CSD get get_csd /Names get				} ifelse				overprint_plate not{					knockout_unitsq				}if			}{				Indexed_DeviceN {					/devicen_colorspace_dict AGMCORE_gget /names_index known {			 			indexed_image_lev2_sep					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					} ifelse				}{		 			AGMCORE_is_cmyk_sep{						Operator /imagemask eq{							imageormask_sys						}{							level2{								indexed_image_lev2_sep							}{								indexed_image_lev1_sep							}ifelse						}ifelse					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					}ifelse				}ifelse			}ifelse 		}{			level2{				Indexed_DeviceN {					/indexed_colorspace_dict AGMCORE_gget begin					CSD get_csd begin				}{					/indexed_colorspace_dict AGMCORE_gget begin					CSA map_csa 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]						setcolorspace					} if					end				} ifelse				imageormask				Indexed_DeviceN {					end					end				} if			}{ 				Operator /imagemask eq{					imageormask				}{					indexed_imageormask_lev1				}ifelse			}ifelse 		}ifelse		cleartomark restore	end}def/indexed_image_lev2_sep{	/indexed_colorspace_dict AGMCORE_gget begin	begin		Indexed_DeviceN not {			currentcolorspace 			dup 1 /DeviceGray put			dup 3			currentcolorspace 2 get 1 add string			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub			{			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put			}for 			put	setcolorspace		} if		currentdict 		Operator /imagemask eq{			AGMIMG_&imagemask		}{			use_mask {				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse			}{				AGMIMG_&image			}ifelse		}ifelse	end end}def  /OPIimage  {  	dup type /dicttype ne{  		10 dict begin  			/DataSource xdf  			/ImageMatrix xdf  			/BitsPerComponent xdf  			/Height xdf  			/Width xdf  			/ImageType 1 def  			/Decode [0 1 def]  			currentdict  		end  	}if  	dup begin  		/NComponents 1 cdndf  		/MultipleDataSources false cdndf  		/SkipImageProc {false} cdndf  		/HostSepColorImage false cdndf  		/Decode [  				0   				currentcolorspace 0 get /Indexed eq{  					2 BitsPerComponent exp 1 sub  				}{  					1  				}ifelse  		] cdndf  		/Operator /image cdndf  	end  	/sep_colorspace_dict AGMCORE_gget null eq{  		imageormask  	}{  		gsave  		dup begin invert_image_samples end  		sep_imageormask  		grestore  	}ifelse  }def/cachemask_level2{	3 dict begin	/LZWEncode filter /WriteFilter xdf	/readBuffer 256 string def	/ReadFilter		currentfile		0 (%EndMask) /SubFileDecode filter		/ASCII85Decode filter		/RunLengthDecode filter	def	{		ReadFilter readBuffer readstring exch		WriteFilter exch writestring		not {exit} if	}loop	WriteFilter closefile	end}def/cachemask_level3{	currentfile	<<		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]		/Intent 1	>>	/ReusableStreamDecode filter}def/spot_alias{	/mapto_sep_imageormask 	{		dup type /dicttype ne{			12 dict begin				/ImageType 1 def				/DataSource xdf				/ImageMatrix xdf				/BitsPerComponent xdf				/Height xdf				/Width xdf				/MultipleDataSources false def		}{			begin		}ifelse				/Decode [/customcolor_tint AGMCORE_gget 0] def				/Operator /image def				/HostSepColorImage false def				/SkipImageProc {false} def				currentdict 			end		sep_imageormask	}bdf	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_colorAry xddf		/customcolor_tint AGMCORE_gget		bdict			/Name AGMIMG_colorAry 4 get			/CSA [ /DeviceCMYK ] 			/TintMethod /Subtractive			/TintProc null			/MappedCSA null			/NComponents 4 			/Components [ AGMIMG_colorAry aload pop pop ] 		edict		setsepcolorspace		mapto_sep_imageormask	}ndf	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_override false put		dup 4 get map_alias{			/customcolor_tint AGMCORE_gget exch setsepcolorspace			pop			mapto_sep_imageormask		}{			AGMIMG_&customcolorimage		}ifelse				}bdf}def/snap_to_device{	6 dict begin	matrix currentmatrix	dup 0 get 0 eq 1 index 3 get 0 eq and	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop	{		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def		0 0 transform		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def		1 1 transform		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def					[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat	}{	}ifelse	end} deflevel2 not{	/colorbuf	{		0 1 2 index length 1 sub{			dup 2 index exch get 			255 exch sub 			2 index 			3 1 roll 			put		}for	}def	/tint_image_to_color	{		begin			Width Height BitsPerComponent ImageMatrix 			/DataSource load		end		Adobe_AGM_Image begin			/AGMIMG_mbuf 0 string def			/AGMIMG_ybuf 0 string def			/AGMIMG_kbuf 0 string def			{				colorbuf dup length AGMIMG_mbuf length ne					{					dup length dup dup					/AGMIMG_mbuf exch string def					/AGMIMG_ybuf exch string def					/AGMIMG_kbuf exch string def					} if				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop			}			addprocs			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage			end	} def				/sep_imageormask_lev1	{		begin			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{					255 mul round cvi GrayLookup exch get				} currenttransfer addprocs settransfer				currentdict imageormask			}{				/sep_colorspace_dict AGMCORE_gget/Components known{					MappedCSA 0 get /DeviceCMYK eq{						Components aload pop					}{						0 0 0 Components aload pop 1 exch sub					}ifelse					Adobe_AGM_Image/AGMIMG_k xddf 					Adobe_AGM_Image/AGMIMG_y xddf 					Adobe_AGM_Image/AGMIMG_m xddf 					Adobe_AGM_Image/AGMIMG_c xddf 					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer						currentdict imageormask					}{ 						currentcolortransfer						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll						setcolortransfer						currentdict tint_image_to_color					}ifelse				}{					MappedCSA 0 get /DeviceGray eq {						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer						currentdict imageormask					}{						MappedCSA 0 get /DeviceCMYK eq {							currentcolortransfer							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}{ 							currentcolortransfer							{pop 1} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}ifelse					}ifelse				}ifelse			}ifelse		end	}def	/sep_image_lev1_sep	{		begin			/sep_colorspace_dict AGMCORE_gget/Components known{				Components aload pop				Adobe_AGM_Image/AGMIMG_k xddf 				Adobe_AGM_Image/AGMIMG_y xddf 				Adobe_AGM_Image/AGMIMG_m xddf 				Adobe_AGM_Image/AGMIMG_c xddf 				{AGMIMG_c mul 1 exch sub}				{AGMIMG_m mul 1 exch sub}				{AGMIMG_y mul 1 exch sub}				{AGMIMG_k mul 1 exch sub}			}{ 				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}			}ifelse			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end	}def	/indexed_imageormask_lev1	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			currentdict			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer				imageormask			}{				MappedCSA 0 get /DeviceGray eq {					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer					imageormask				}{					MappedCSA 0 get /DeviceCMYK eq {						currentcolortransfer						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}{ 						currentcolortransfer						{pop 1} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}ifelse				}ifelse			}ifelse		end end	}def	/indexed_image_lev1_sep	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end end	}def}ifendsystemdict /setpacking known{	setpacking} if%%EndResourcecurrentdict Adobe_AGM_Utils eq {end} if%%EndProlog%%BeginSetupAdobe_AGM_Utils begin2 2010 Adobe_AGM_Core/doc_setup get execAdobe_CoolType_Core/doc_setup get execAdobe_AGM_Image/doc_setup get execcurrentdict Adobe_AGM_Utils eq {end} if%%EndSetup%%Page: (Scripps Seal EPSF [Converted]) 1%%EndPageComments%%BeginPageSetup/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?><x:xmpmeta xmlns:x='adobe:ns:meta/' x:xmptk='XMP toolkit 3.0-29, framework 1.6'>
<rdf:RDF xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#' xmlns:iX='http://ns.adobe.com/iX/1.0/'>

 <rdf:Description rdf:about=''
  xmlns:pdf='http://ns.adobe.com/pdf/1.3/'>
 </rdf:Description>

 <rdf:Description rdf:about=''
  xmlns:tiff='http://ns.adobe.com/tiff/1.0/'>
 </rdf:Description>

 <rdf:Description rdf:about=''
  xmlns:xap='http://ns.adobe.com/xap/1.0/'
  xmlns:xapGImg='http://ns.adobe.com/xap/1.0/g/img/'>
  <xap:CreateDate>2005-01-27T16:27:10Z</xap:CreateDate>
  <xap:ModifyDate>2005-01-27T16:27:10Z</xap:ModifyDate>
  <xap:CreatorTool>Illustrator</xap:CreatorTool>
  <xap:Thumbnails>
   <rdf:Alt>
    <rdf:li rdf:parseType='Resource'>
     <xapGImg:format>JPEG</xapGImg:format>
     <xapGImg:width>256</xapGImg:width>
     <xapGImg:height>256</xapGImg:height>
     <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FUo8x+bfLHlqz+ua/qlrplvvxe5lWMsR2RSeTn2UE4q80uP+cldC1G4a08ieXtX85XKmnq2&#xA;ds8NoD/lzSryT5mOnviqwal/zlD5hr9V0rQ/Jtq+4a9la+u1B6U9L1IifZkGKrx+T35samefmH81&#xA;tRHKnODSLaPTwviFkjYdv8jFW/8AoWTyrcUbV/MvmXWHP959c1IsGPX9mNTTl8Q3xVsf84o/ky28&#xA;+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&#xA;LDKoeOVCGVlYVDKw2IOKqmKuxV2Kpdrnl7QdesjY63p1tqVm2/oXUSTIDSlQHBofcb4q8xvf+cZv&#xA;JMNy1/5Q1LVfJ982/qaTeSLExO/xJIXJH+SrAYqlGuflR+ebwR2p80aN5vsrY+paxeYLAwTRuP2o&#xA;57YPMr+DiQH5YqlA0D88LJTHf+SDrcI2Mdl5s1WG3IHb0Lu+kUrt9nj4eGKoex1788NM9Szt/wAv&#xA;7/y9o4NbTTvLb6YgoftG4luLe9Z5G7snAnFXXWu/nhqTxWt5+X175j0dWD3Fn5hfTRKtPsta3FrB&#xA;Zem4I+2yuRiqufLv55XyiK08l/oeI7cNR82atcwAe8NrfqvHf7PHFU60b8qPzzFn9RbzbpHlHTnJ&#xA;ea18uWAdmYnctNMIpS57uXJr44qm+n/84zeRHulv/NV7qnnDUV39bWLySRAf8lIym3szNir07RtC&#xA;0TRLJbHRrC306zXdbe1iSGOvjxQKK++Ko/FXYq7FVOeeC3heeeRYoYlLySuQqqqipZmOwAxV4pr/&#xA;AOanmr8wtUn8pflEONpGxh1rzxKpFrbL+0toT/eSEbKw+a7fvAqz78tfyu8t+QdKe200Pc6ldn1d&#xA;V1i5PO6u5iSS8jmtFqTxXt7mpKrMcVdirsVdirsVdirsVdirsVdirsVQGt6Fo+u6XPpWsWcV/p1y&#xA;vGe2nUOjDqDQ9CDuCNwemKvGpPIP5l/lTNJe/lvM3mPyhyMlx5MvnJnhBPJjYzHf/Y9fFXO+Ks3/&#xA;AC+/OryV50kNhbzPpnmKKq3Xl/UF9C8jdfthVb+8A/yd6dQMVZ7irsVdiryf8hra31FfNPnJVKrr&#xA;muX36OALCNbKFxCnFPsVd42ZiB1xVmHk29v5tO1LVtS1Fp7F769+oiVYkSCztp3hQ81RGYMIi/J2&#xA;PwkYqh/L/nLXfM2mfprQdIgOizlv0ZPfXb2811GpK+sIkt5/TRyP3fJuRG5VcVV08+Qw+Qbzzhqu&#xA;n3GnR6fDdzXenSUadDZSSRsm3wlmMW3bfrTfFVbTdf8AME99pqXmmWy6bqcDyxX9ndvcqkgRZERw&#xA;0EI4unIq4bt03GKpd5x886vofmvy35ftdOglXzLLPBb6jNO6rDJbwmYrJCsR5cwKJST54qp3XnjX&#xA;fL/mLStK81WFuun65MLLTdbsZHaIXrgmO2uIZVDRmWh9NldgTtQYqzjFXYq7FXYqwH8wvzq8leSn&#xA;FhczPqfmGWi2ugaevr3kjv8AYVlXaOv+Vv4A4qwmPyD+Zf5rTR3v5kTN5c8ochJb+TLFyJ5gDyU3&#xA;0w3/ANj18FQ74q9l0TQtH0LS4NK0ezisNOtl4wW0ChEUdSaDqSdyTuT1xVH4q7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FWF/mB+UHkXz1Gr61Y+nqUVPq2sWh9C9iK/ZIlUfFx7K4YDwxVgw0z/nIL8v&#xA;G/3GXUX5j+WoulneN9X1eOMAkhZjUSU8WLk9kGKpz5c/5yP/AC81C7/RmuvceUtcSizadrkRtSrd&#xA;D+9b92BX+cqfbFXp1vc2l5bJPbTJcW0y1jmiYOjKe6spIP0Yqw7yl5S8weTvLMflbRBaT6bZmZdM&#xA;vriWVJoo5pHlX1YRG6ytEZKbSLzp+ziqZap5PST8ur3yhp8zRCXSpdMt7ljRgz25hEjlR9ok8mNO&#xA;uKpT+XnmfRNN8kaNpOrTxaNqukWUFhfaZdukMscttGIjwRuPNHKVjdAQw6YqyTXtT0u28rX+pX9s&#xA;1xpMdpJPe2zwnk1twLTBoJArH93WqMKnpirynyrp0PlL8wtC078vtYOreSvMC3U2p6F64u4dOSKP&#xA;nHc28lWaGNpCE4Mdztufsqp1+fMsVknkrWq/vtK8y2MzIN3a1fnHc8U70VwSe2KovztbSefLzQNI&#xA;0u1nbTLDVbbVtT1iaKSCFI7Ji6xW7SqjSyyvRax1VRWprQYq9IxVSurq1tLd7m6mS3t4hylmlYIi&#xA;jxZmIAxV5h5j/wCcj/y80+7/AEZoT3Hm3XHqsOnaHEbos3QfvV/dkV/kLH2xVJjpn/OQX5ht/uTu&#xA;ovy48tS9bOzb6xq8kZAIDTCgjr4qUI7ocVZz+X/5QeRfIsbPotj6mpS1+s6xdn172Ut9omVh8PLu&#xA;qBQfDFWaYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUo8x+UvLHmWz+p6/pdrqdvvx&#xA;S5iWQqT3RiOSH3Ug4q80uP8AnGrQtOuGu/InmHV/Jtyxr6VncvNaE/5cMrcn+Rkp7YqsGm/85Q+X&#xA;q/VdV0PzlapsFvYmsbtgOlPS9OIH3Zziq8fnD+bGmHh5h/KnUTxpzn0i5j1AN4lY41Pb/LxVv/oZ&#xA;rypAQNX8teZdIdft/XNNKhT06rIxpy+Hpirv+hrfyYA43Go3VvJ0eCWyuA4+YCMN/nirS/8AOVX5&#xA;KAt9Wv7maeQ1MUNjcc3PSu6LWg8Tirf/AEM35VuKrpHlrzLrDn+7+p6aWDHp+1Ippy+E7Yq0fzh/&#xA;NjUzw8vflTqI5V4T6vcx6eF8C0cijt/l4qsOm/8AOUPmGn1rVdD8m2r7FbKJr67UHrX1fUiJ91cY&#xA;qut/+catC1G4W789+YtX85XKmvpXly8NoD/kQxNyT5CSmKvTPLnlLyx5as/qegaXa6Zb7cktoljL&#xA;Ed3YDk592JOKpvirsVdirsVdirsVdirsVdirsVf/2Q==</xapGImg:image>
    </rdf:li>
   </rdf:Alt>
  </xap:Thumbnails>
 </rdf:Description>

 <rdf:Description rdf:about=''
  xmlns:dc='http://purl.org/dc/elements/1.1/'>
  <dc:format>application/postscript</dc:format>
 </rdf:Description>

</rdf:RDF>
</x:xmpmeta>
xpacket end='w'?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5Adobe_AGM_Utils beginAdobe_AGM_Core/page_setup get execAdobe_CoolType_Core/page_setup get execAdobe_AGM_Image/page_setup get exec%%EndPageSetupAdobe_AGM_Core/AGMCORE_save save ddf1 -1 scale 0 -231.976 translate[1 0 0 1 0 0 ]  concat% page clipgsavenewpathgsave % PSGState0 0 mo0 231.976 li231.976 231.976 li231.976 0 liclp[1 0 0 1 0 0 ] concat2 lw0 lc0 lj4 ml[] 0 dshtrue sadj115.863 207.814 mo166.576 207.814 207.688 166.702 207.688 115.989 cv207.688 65.2754 166.576 24.1626 115.863 24.1626 cv65.1495 24.1626 24.0369 65.2754 24.0369 115.989 cv24.0369 166.702 65.1495 207.814 115.863 207.814 cvcpfalse sop/0 [/DeviceCMYK] add_csa0 0 0 1 cmyk@115.988 230.976 mo179.493 230.976 230.976 179.493 230.976 115.988 cv230.976 52.4825 179.493 1 115.988 1 cv52.4827 1 1 52.4825 1 115.988 cv1 179.493 52.4827 230.976 115.988 230.976 cvcp@/1 [/DeviceGray] add_csa0 gry%ADOBeginSubsetFont: Times-Roman Initial%ADOt1write: (1.0.21)%%Copyright: Copyright 2005 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /Times-Roman def/FontInfo 5 dict dup begin/ItalicAngle 0 def/OrigFontType /TrueType defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /space putdup 65 /A putdup 67 /C putdup 69 /E putdup 70 /F putdup 71 /G putdup 72 /H putdup 73 /I putdup 78 /N putdup 79 /O putdup 80 /P putdup 82 /R putdup 83 /S putdup 84 /T putdup 85 /U putdup 89 /Y putdef/FontBBox {-167 -414 966 968} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings17 dict dup begin/.notdef <1C60D8A8C9B6079F6CEA24BDEB0F5E4D18DF0CD7E2A11E9D72D963E3987D5E4E6C9FCD> |-/space <1C60D8A8C9B8707C25> |-/A <1C60D8A8C9B6079F62C6D57D72D2FDC86536E7494191A9E3EF5795EA6903BA675EF967E5503E0F9461713975E8624582E6F3E1510A5F9E0950EED4A1914451FF9474C0941D0A3186503138F0BEB96FF6EFEC76335DF56A27FA8C5F2C635C83D312D7641D3D9117C2751F2FA7BAFB4320347730B8D3EA674CFE35F91CDC44A8C704B1ABB766598584B2E79C7046CDCE3C> |-/C <1C60D8A8C9B64EDFFB7CD25A2C740A59FDB93875AB4231E871C9753C8B6A300598898747795E8627DC8620BB80ECD900DDAE8B58DA30E2436AA16ADF42BEC594B706F998147F79C1F65A6CEE2D82088E51946E10EFCD63A7019B6D8437591296EB402980B290E76FE407FE36EDE9B3E4CE928D54B5D8DF2EE62B30B242A3EA7270B807155AA2CFE1DF6C04CEECCAB5FA78944000A4C6412A> |-/E <1C60D8A8C9B7D8BE774DE3D4993979F28436928B4CDBB6751E52C565AE7CCBA8EF4A8B60A6B8197E06686ACB2016ED56C2648D7EE6DB00F4795EF397C2952CAB1D6175CF76712F75EC245199884C545C641796897CB85779F19EC0B1ACB7B44E696F11860B9E3F66C1DA5748D5D1E424917F78224170CF649A7E0788B4FB83A9B795649C6C2E1BEFBEC8CB7D4EE48916B040566E008F8D3458DA30E023107ECA6A58C1BE70A2768537> |-/F <1C60D8A8C9B7EF324A037549B31AFC4B60697A046B7067B75CFC351CCB1964720E6BC82951E2A5BB7474D974EA2A52D73602B39FD7C31C63C801BEBD2FDE9110733E153A3F2045A94EC3EBE16167D0C83075CBD838D88E58985D5046B18ACE7B749F64816A90969534E595942FCC6261125D575A90C2E501921FC7F49304D66B5BA92B55B6DFDA784E2B9E0FAA8068B2566A1AD700B69E> |-/G <1C60D8A8C9B6079F6D8F9589F03C57E9BABC7BD7AF44F292C36BF054D0385D2FC11ADF26CF26FB1CA20D732AF012AB53727DD5F46B605D18E4B017E662A97B61E593E1649BDE06DC0BE81975EB02C63DB9CC50D324954CB92F05C09AE46BA2C2549D26E915E5BB03DE231AAD77F23323077408677E4049C607D64929B04AF386D58F981E4541C0982A23929E9B861E50C60AAFF01CE1D107C5993270B58A2C29D6FD48A1F36C5902C78C206F66DEBC5079EDB36633E15221CDFB88A58DA8F921FAE2BECE6FC3EDA0F38409251C> |-/H <1C60D8A8C9B6079F0EF96F2A5C5AAE267BD7D517941DACD3EDB33730529DE1B8FE6AD271A2288CC17FF03DA9EA5FAD75E03DF6B92565A2CB4A8539BAEB038F1CE0E83E584DC2B39385E39140D6E26B203655808DF8081831B0F83E078DCB044F2F1E9AE89A394511D343E89D9D3F55592CD30385C4D9E63CC850D47412A8E8690C4C593E74EC9DBC1CB8EAB8742657985762E0C390ED4A33098B5BA3348CBFA94014888F550AA1D8AF239EC75344> |-/I <1C60D8A8C9B81F2C5659C12DFFC3E380C6CA0BCAD10CF356600E4A11AD71C457AC494D1DA251098436E45B6C0FE156746A59F146A43FA43FA4E70C431CB313E43694521E224211773C019F61EE01FB015D97EE3928AD> |-/N <1C60D8A8C9B6079F00B34305686088D44D74547591313A03B26B707AC54B1D09AB13EFEABA08D80C11507964CB1554D14B08A9189CE9ED096F012BFCF7F07CFEA740977B0B504188F63E7A0F7FDEE27A38EAEC53F9C6B73106914DDDC10AC60308AB97B43DE4AE2966E725455C176948F6B21A97B955C410D70E99418E90> |-/O <1C60D8A8C9B6079F628905BB6C928BCAE88FE9DF93F8FC59FCA6290421979DF9E1DE9D7E6FFE4C4A9EA7DAE58AF2F9EFEF675BD0F688E96217A2849FBF1B415B05B14FB4CBB1B4250EB6A6A2C446497B144043EBC1B5AC19C767ED328AE55D0DBD0AE65D3FBD00AE9FC9F2D7FD3D64193CBE763B37F9D54150699AD63ABBB00C611BFE9368EF> |-/P <1C60D8A8C9B7EF322434E1F3A572E6E1BC6C6F1C68992768060DAE1B4C7B427E45BC3A4679807BEAE7F6D9AF630A1C22FD1CE21BCE2286818A82BD939AF289B76A1DB91C5AA9ECF164AD5A7EEB0C2FB6433D2C27E4C9DD9951F32681C1E23142F87FE0BB632961DBF09B1BCC2DBDF28AA2A576366886A338146A6EE45FE7539E8D3254D439F46CBA62C74FD6727A2572BFC88846FED7BD6467448C15F8CC8DCFA5340A99B196EA105B822649C918B21A83378A8D> |-/R <1C60D8A8C9B64EDFF48E82CA064AB631928FACCF9FFFD392A0E8B418F5719CC04BFF6287C01E27BF2FB2FEAF97CCCADCD5A250C8985D3C380360C09A155C47E97A7A0AE6B054C6F1AF532CD9D5D8B8A42FC3993CB727AB96E4AA71CDBEF484BB07F7018C89450F5F57121F4DAF066425B8A34FF7ED62AE5AA93F62F65C552ACBB5BB3B53F5612058E9D722BD6F7E535FCAA8BBC4240A38B118172C507CF742629A7399CB94F1BDEF7B732F9E12010BAE3EE57FD8EFD35FDD> |-/S <1C60D8A8C9B7EF3269E388B8847AC1DF83DCA2CC95EEDA1D26C48C8B4394FBFD17BA4272844B3F99D23FAEC50A7EA6C72D284BFF0551BD0E244EEA994D67C8032579E70EC4F728A61739D5AD8DBB8B4129DD5B722422FAFC8BDE88E5D08E42CFE364B4791DA2E591F9FB2CA99F1F124E961FBD42E8AB878E8BE3BAAF755A9CE4977D5E9A7ECCF71EBFA0B61D69877A9EC87A882973E75CA7477FEDEE90C5AE4E9BEF9C7EDA4EBF0E4CDE6ECFE92BCEC5C04A7E39072DCB2A7B402F52671B6022D3586A809E7DAE9919FE8815CB8D620AA8EC995DA478361CE758058A7DFF39FC38C2B0C0AAE9> |-/T <1C60D8A8C9B7D8BE78D1A55798F2D8A97091B992B92C1EAFCF350F806FED434693C4DF3F67D8893A99EF75622FE8BA13F907674F882E140E60489CEAA2BB6107D8446BF6FC3EF0730B190972991631B35D792933869F4716BD279183A943DE125368> |-/U <1C60D8A8C9B6079F0CAB5420FC166CE4211BF761DF6F269B6D55BC4CD0DFCE6CBD0126743DDEBAD421B04E366EB75E0F3D89C84B07E612C467016BDB058D158035A82E5951A94FD49069DE412DEC109C277DA005FE337422769F491189B4ACB99BB3F655CE47402A778E99201B61F05BECBA2167CE7BC42D8C1A06FBD0A0013CD81A1446F0D717F99FDD363D0E6AA50A2C5FE74FC999AD> |-/Y <1C60D8A8C9B6079F346A1EE4160C0285D8EA003C81C7CFD1FC6BCA586BFD055D940855ACD9B355FEF776FCC1D6883E16979BF2894F66841CA77359BF5B2494502A30DCB01BC1E19CD5597D5DC60A3C32240C7F383D0F046E1DDEC1D4E21EC6C720779253465AD76CB86981A203D42D1EA039100E6B1DB3114294BAAADA7947777EFE5924E267C98659186FC0355E7F3C3B49C8CC4694245C372447FCC8C241DF390EE3954749B1903277> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont/JFLPFA+Times-Roman /Times-Roman findfont def/JFLPFA+Times-Roman*1 [32{/.notdef}repeat /space 32{/.notdef}repeat /A /.notdef /C /.notdef /E /F /G /H /I 4{/.notdef}repeat /N /O /P /.notdef /R /S /T /U 3{/.notdef}repeat /Y 166{/.notdef}repeat] JFLPFA+Times-Roman nfntJFLPFA+Times-Roman*1  [-2.68848 -17.973 -17.973 2.68848 0 0 ]mfnt sfnt20.5547 135.483 mov(S) shJFLPFA+Times-Roman*1  [-0.669267 -16.021 -16.021 0.669267 0 0 ]mfnt sfnt19.0426 125.462 mov(C) shJFLPFA+Times-Roman*1  [1.07125 -15.9992 -15.9992 -1.07125 0 0 ]mfnt sfnt18.596 114.745 mov(R) shJFLPFA+Times-Roman*1  [2.38466 -15.8567 -15.8567 -2.38466 0 0 ]mfnt sfnt19.4213 104.069 mov(I) shJFLPFA+Times-Roman*1  [3.55029 -15.637 -15.637 -3.55029 0 0 ]mfnt sfnt20.1557 98.7475 mov(P) shJFLPFA+Times-Roman*1  [4.98124 -15.2417 -15.2417 -4.98124 0 0 ]mfnt sfnt22.1345 90.035 mov(P) shJFLPFA+Times-Roman*1  [6.37069 -14.7151 -14.7151 -6.37069 0 0 ]mfnt sfnt24.915 81.532 mov(S) shJFLPFA+Times-Roman*1  [7.3426 -14.2551 -14.2551 -7.3426 0 0 ]mfnt sfnt28.5427 73.3618 mov( ) shJFLPFA+Times-Roman*1  [9.15105 -15.7008 -15.7008 -9.15105 0 0 ]mfnt sfnt30.3634 69.7701 mov(I) shJFLPFA+Times-Roman*1  [9.29783 -13.0641 -13.0641 -9.29783 0 0 ]mfnt sfnt33.3178 64.4547 mov(N) shJFLPFA+Times-Roman*1  [10.6181 -12.0157 -12.0157 -10.6181 0 0 ]mfnt sfnt40.1025 55.0449 mov(S) shJFLPFA+Times-Roman*1  [11.7204 -10.9432 -10.9432 -11.7204 0 0 ]mfnt sfnt46.0124 48.3275 mov(T) shJFLPFA+Times-Roman*1  [12.5352 -9.99952 -9.99952 -12.5352 0 0 ]mfnt sfnt53.253 41.687 mov(I) shJFLPFA+Times-Roman*1  [13.2734 -8.99648 -8.99648 -13.2734 0 0 ]mfnt sfnt57.3831 38.282 mov(T) shJFLPFA+Times-Roman*1  [14.1834 -7.48018 -7.48018 -14.1834 0 0 ]mfnt sfnt65.4975 32.7248 mov(U) shJFLPFA+Times-Roman*1  [14.9233 -5.86649 -5.86649 -14.9233 0 0 ]mfnt sfnt75.7865 27.3556 mov(T) shJFLPFA+Times-Roman*1  [15.338 -4.67634 -4.67634 -15.338 0 0 ]mfnt sfnt84.9449 23.8498 mov(I) shJFLPFA+Times-Roman*1  [15.6897 -3.30993 -3.30993 -15.6897 0 0 ]mfnt sfnt90.0508 22.1514 mov(O) shJFLPFA+Times-Roman*1  [15.9724 -1.4154 -1.4154 -15.9724 0 0 ]mfnt sfnt101.412 19.7578 mov(N) shJFLPFA+Times-Roman*1  [16.0329 -0.259951 -0.259951 -16.0329 0 0 ]mfnt sfnt112.978 18.9001 mov( ) shJFLPFA+Times-Roman*1  [15.9955 1.12498 1.12498 -15.9955 0 0 ]mfnt sfnt117.003 18.6998 mov(O) shJFLPFA+Times-Roman*1  [15.7879 2.80421 2.80421 -15.7879 0 0 ]mfnt sfnt128.575 19.5844 mov(F) shJFLPFA+Times-Roman*1  [15.564 3.85775 3.85775 -15.564 0 0 ]mfnt sfnt137.365 21.2302 mov( ) shJFLPFA+Times-Roman*1  [17.18 5.92495 5.92495 -17.18 0 0 ]mfnt sfnt141.342 22.0083 mov(O) shJFLPFA+Times-Roman*1  [14.3994 7.05534 7.05534 -14.3994 0 0 ]mfnt sfnt153.744 26.3666 mov(C) shJFLPFA+Times-Roman*1  [13.5734 8.53728 8.53728 -13.5734 0 0 ]mfnt sfnt163.361 31.1076 mov(E) shJFLPFA+Times-Roman*1  [12.5557 9.97379 9.97379 -12.5557 0 0 ]mfnt sfnt171.699 36.2958 mov(A) shJFLPFA+Times-Roman*1  [11.2855 11.3912 11.3912 -11.2855 0 0 ]mfnt sfnt180.793 43.5225 mov(N) shJFLPFA+Times-Roman*1  [9.85595 12.6484 12.6484 -9.85595 0 0 ]mfnt sfnt188.967 51.7764 mov(O) shJFLPFA+Times-Roman*1  [8.28257 13.7303 13.7303 -8.28257 0 0 ]mfnt sfnt196.104 60.9377 mov(G) shJFLPFA+Times-Roman*1  [6.65059 14.5908 14.5908 -6.65059 0 0 ]mfnt sfnt202.075 70.8875 mov(R) shJFLPFA+Times-Roman*1  [4.92218 15.2608 15.2608 -4.92218 0 0 ]mfnt sfnt206.547 80.6407 mov(A) shJFLPFA+Times-Roman*1  [3.27304 15.6974 15.6974 -3.27304 0 0 ]mfnt sfnt210.039 91.7031 mov(P) shJFLPFA+Times-Roman*1  [1.59495 15.9555 15.9555 -1.59495 0 0 ]mfnt sfnt211.934 100.456 mov(H) shJFLPFA+Times-Roman*1  [-0.29193 16.0323 16.0323 0.29193 0 0 ]mfnt sfnt213.085 112.009 mov(Y) shJFLPFA+Times-Roman*1  [-1.46898 15.9676 15.9676 1.46898 0 0 ]mfnt sfnt212.767 123.01 mov( ) sh1 lw207.646 121.004 mo206.829 120.771 205.81 120.616 204.374 120.616 cv198.593 120.616 199.552 123.126 193.24 123.126 cv186.928 123.126 187.958 120.616 182.178 120.616 cv176.397 120.616 177.427 123.126 171.115 123.126 cv164.803 123.126 165.833 120.616 160.053 120.616 cv154.272 120.616 155.302 123.126 148.99 123.126 cv142.678 123.126 143.708 120.616 137.928 120.616 cv132.147 120.616 133.177 123.126 126.865 123.126 cv120.553 123.126 121.583 120.616 115.803 120.616 cv110.022 120.616 111.052 123.126 104.74 123.126 cv98.428 123.126 99.4578 120.616 93.6773 120.616 cv87.8968 120.616 88.9266 123.126 82.6148 123.126 cv76.303 123.126 77.3328 120.616 71.5523 120.616 cv65.7718 120.616 66.8016 123.126 60.4898 123.126 cv54.178 123.126 55.2078 120.616 49.4273 120.616 cv43.6468 120.616 44.6766 123.126 38.3648 123.126 cv32.053 123.126 33.0828 120.616 27.3023 120.616 cv25.8572 120.616 24.8377 120.773 24.0228 121.008 cv0 0 0 1 cmyk@207.351 124.176 mo206.585 123.987 205.642 123.866 204.374 123.866 cv198.593 123.866 199.552 126.376 193.24 126.376 cv186.928 126.376 187.958 123.866 182.178 123.866 cv176.397 123.866 177.427 126.376 171.115 126.376 cv164.803 126.376 165.833 123.866 160.053 123.866 cv154.272 123.866 155.302 126.376 148.99 126.376 cv142.678 126.376 143.708 123.866 137.928 123.866 cv132.147 123.866 133.177 126.376 126.865 126.376 cv120.553 126.376 121.583 123.866 115.803 123.866 cv110.022 123.866 111.052 126.376 104.74 126.376 cv98.428 126.376 99.4578 123.866 93.6773 123.866 cv87.8968 123.866 88.9266 126.376 82.6148 126.376 cv76.303 126.376 77.3328 123.866 71.5523 123.866 cv65.7718 123.866 66.8016 126.376 60.4898 126.376 cv54.178 126.376 55.2078 123.866 49.4273 123.866 cv43.6468 123.866 44.6766 126.376 38.3648 126.376 cv32.053 126.376 33.0828 123.866 27.3023 123.866 cv26.0586 123.866 25.1304 123.982 24.3765 124.165 cv@206.995 127.346 mo206.295 127.204 205.452 127.116 204.374 127.116 cv198.593 127.116 199.552 129.626 193.24 129.626 cv186.928 129.626 187.958 127.116 182.178 127.116 cv176.397 127.116 177.427 129.626 171.115 129.626 cv164.803 129.626 165.833 127.116 160.053 127.116 cv154.272 127.116 155.302 129.626 148.99 129.626 cv142.678 129.626 143.708 127.116 137.928 127.116 cv132.147 127.116 133.177 129.626 126.865 129.626 cv120.553 129.626 121.583 127.116 115.803 127.116 cv110.022 127.116 111.052 129.626 104.74 129.626 cv98.428 129.626 99.4578 127.116 93.6773 127.116 cv87.8968 127.116 88.9266 129.626 82.6148 129.626 cv76.303 129.626 77.3328 127.116 71.5523 127.116 cv65.7718 127.116 66.8016 129.626 60.4898 129.626 cv54.178 129.626 55.2078 127.116 49.4273 127.116 cv43.6468 127.116 44.6766 129.626 38.3648 129.626 cv32.053 129.626 33.0828 127.116 27.3023 127.116 cv26.2486 127.116 25.4209 127.2 24.7342 127.336 cv@206.252 130.474 mo205.713 130.405 205.096 130.366 204.374 130.366 cv198.593 130.366 199.552 132.876 193.24 132.876 cv186.928 132.876 187.958 130.366 182.178 130.366 cv176.397 130.366 177.427 132.876 171.115 132.876 cv164.803 132.876 165.833 130.366 160.053 130.366 cv154.272 130.366 155.302 132.876 148.99 132.876 cv142.678 132.876 143.708 130.366 137.928 130.366 cv132.147 130.366 133.177 132.876 126.865 132.876 cv120.553 132.876 121.583 130.366 115.803 130.366 cv110.022 130.366 111.052 132.876 104.74 132.876 cv98.428 132.876 99.4578 130.366 93.6773 130.366 cv87.8968 130.366 88.9266 132.876 82.6148 132.876 cv76.303 132.876 77.3328 130.366 71.5523 130.366 cv65.7718 130.366 66.8016 132.876 60.4898 132.876 cv54.178 132.876 55.2078 130.366 49.4273 130.366 cv43.6468 130.366 44.6766 132.876 38.3648 132.876 cv32.053 132.876 33.0828 130.366 27.3023 130.366 cv26.4383 130.366 25.7264 130.422 25.1194 130.518 cv@205.995 133.694 mo205.519 133.644 204.984 133.616 204.374 133.616 cv198.593 133.616 199.552 136.126 193.24 136.126 cv186.928 136.126 187.958 133.616 182.178 133.616 cv176.397 133.616 177.427 136.126 171.115 136.126 cv164.803 136.126 165.833 133.616 160.053 133.616 cv154.272 133.616 155.302 136.126 148.99 136.126 cv142.678 136.126 143.708 133.616 137.928 133.616 cv132.147 133.616 133.177 136.126 126.865 136.126 cv120.553 136.126 121.583 133.616 115.803 133.616 cv110.022 133.616 111.052 136.126 104.74 136.126 cv98.428 136.126 99.4578 133.616 93.6773 133.616 cv87.8968 133.616 88.9266 136.126 82.6148 136.126 cv76.303 136.126 77.3328 133.616 71.5523 133.616 cv65.7718 133.616 66.8016 136.126 60.4898 136.126 cv54.178 136.126 55.2078 133.616 49.4273 133.616 cv43.6468 133.616 44.6766 136.126 38.3648 136.126 cv32.053 136.126 33.0828 133.616 27.3023 133.616 cv26.7142 133.616 26.1966 133.642 25.7344 133.689 cv@205.246 136.887 mo204.973 136.874 204.683 136.866 204.374 136.866 cv198.593 136.866 199.552 139.376 193.24 139.376 cv186.928 139.376 187.958 136.866 182.178 136.866 cv176.397 136.866 177.427 139.376 171.115 139.376 cv164.803 139.376 165.833 136.866 160.053 136.866 cv154.272 136.866 155.302 139.376 148.99 139.376 cv142.678 139.376 143.708 136.866 137.928 136.866 cv132.147 136.866 133.177 139.376 126.865 139.376 cv120.553 139.376 121.583 136.866 115.803 136.866 cv110.022 136.866 111.052 139.376 104.74 139.376 cv98.428 139.376 99.4578 136.866 93.6773 136.866 cv87.8968 136.866 88.9266 139.376 82.6148 139.376 cv76.303 139.376 77.3328 136.866 71.5523 136.866 cv65.7718 136.866 66.8016 139.376 60.4898 139.376 cv54.178 139.376 55.2078 136.866 49.4273 136.866 cv43.6468 136.866 44.6766 139.376 38.3648 139.376 cv32.053 139.376 33.0828 136.866 27.3023 136.866 cv27.0157 136.866 26.7457 136.872 26.4908 136.884 cv@204.374 140.116 mo198.593 140.116 199.552 142.626 193.24 142.626 cv186.928 142.626 187.958 140.116 182.178 140.116 cv176.397 140.116 177.427 142.626 171.115 142.626 cv164.803 142.626 165.833 140.116 160.053 140.116 cv154.272 140.116 155.302 142.626 148.99 142.626 cv142.678 142.626 143.708 140.116 137.928 140.116 cv132.147 140.116 133.177 142.626 126.865 142.626 cv120.553 142.626 121.583 140.116 115.803 140.116 cv110.022 140.116 111.052 142.626 104.74 142.626 cv98.428 142.626 99.4578 140.116 93.6773 140.116 cv87.8968 140.116 88.9266 142.626 82.6148 142.626 cv76.303 142.626 77.3328 140.116 71.5523 140.116 cv65.7718 140.116 66.8016 142.626 60.4898 142.626 cv54.178 142.626 55.2078 140.116 49.4273 140.116 cv43.6468 140.116 44.6766 142.626 38.3648 142.626 cv32.053 142.626 33.0828 140.116 27.3023 140.116 cv@203.741 143.377 mo198.656 143.554 199.311 145.876 193.24 145.876 cv186.928 145.876 187.958 143.366 182.178 143.366 cv176.397 143.366 177.427 145.876 171.115 145.876 cv164.803 145.876 165.833 143.366 160.053 143.366 cv154.272 143.366 155.302 145.876 148.99 145.876 cv142.678 145.876 143.708 143.366 137.928 143.366 cv132.147 143.366 133.177 145.876 126.865 145.876 cv120.553 145.876 121.583 143.366 115.803 143.366 cv110.022 143.366 111.052 145.876 104.74 145.876 cv98.428 145.876 99.4578 143.366 93.6773 143.366 cv87.8968 143.366 88.9266 145.876 82.6148 145.876 cv76.303 145.876 77.3328 143.366 71.5523 143.366 cv65.7718 143.366 66.8016 145.876 60.4898 145.876 cv54.178 145.876 55.2078 143.366 49.4273 143.366 cv43.6468 143.366 44.6766 145.876 38.3648 145.876 cv32.4178 145.876 32.9883 143.648 28.2386 143.391 cv@202.365 146.741 mo198.719 147.249 198.699 149.126 193.24 149.126 cv186.928 149.126 187.958 146.616 182.178 146.616 cv176.397 146.616 177.427 149.126 171.115 149.126 cv164.803 149.126 165.833 146.616 160.053 146.616 cv154.272 146.616 155.302 149.126 148.99 149.126 cv142.678 149.126 143.708 146.616 137.928 146.616 cv132.147 146.616 133.177 149.126 126.865 149.126 cv120.553 149.126 121.583 146.616 115.803 146.616 cv110.022 146.616 111.052 149.126 104.74 149.126 cv98.428 149.126 99.4578 146.616 93.6773 146.616 cv87.8968 146.616 88.9266 149.126 82.6148 149.126 cv76.303 149.126 77.3328 146.616 71.5523 146.616 cv65.7718 146.616 66.8016 149.126 60.4898 149.126 cv54.178 149.126 55.2078 146.616 49.4273 146.616 cv43.6468 146.616 44.6766 149.126 38.3648 149.126 cv32.8421 149.126 32.94 147.205 29.1783 146.724 cv@201.002 150.282 mo198.604 150.995 197.922 152.376 193.24 152.376 cv186.928 152.376 187.958 149.866 182.178 149.866 cv176.397 149.866 177.427 152.376 171.115 152.376 cv164.803 152.376 165.833 149.866 160.053 149.866 cv154.272 149.866 155.302 152.376 148.99 152.376 cv142.678 152.376 143.708 149.866 137.928 149.866 cv132.147 149.866 133.177 152.376 126.865 152.376 cv120.553 152.376 121.583 149.866 115.803 149.866 cv110.022 149.866 111.052 152.376 104.74 152.376 cv98.428 152.376 99.4578 149.866 93.6773 149.866 cv87.8968 149.866 88.9266 152.376 82.6148 152.376 cv76.303 152.376 77.3328 149.866 71.5523 149.866 cv65.7718 149.866 66.8016 152.376 60.4898 152.376 cv54.178 152.376 55.2078 149.866 49.4273 149.866 cv43.6468 149.866 44.6766 152.376 38.3648 152.376 cv33.6312 152.376 33.0269 150.964 30.5818 150.258 cv@199.347 154.204 mo197.959 154.882 196.678 155.626 193.24 155.626 cv186.928 155.626 187.958 153.116 182.178 153.116 cv176.397 153.116 177.427 155.626 171.115 155.626 cv164.803 155.626 165.833 153.116 160.053 153.116 cv154.272 153.116 155.302 155.626 148.99 155.626 cv142.678 155.626 143.708 153.116 137.928 153.116 cv132.147 153.116 133.177 155.626 126.865 155.626 cv120.553 155.626 121.583 153.116 115.803 153.116 cv110.022 153.116 111.052 155.626 104.74 155.626 cv98.428 155.626 99.4578 153.116 93.6773 153.116 cv87.8968 153.116 88.9266 155.626 82.6148 155.626 cv76.303 155.626 77.3328 153.116 71.5523 153.116 cv65.7718 153.116 66.8016 155.626 60.4898 155.626 cv54.178 155.626 55.2078 153.116 49.4273 153.116 cv43.6468 153.116 44.6766 155.626 38.3648 155.626 cv35.0682 155.626 33.7745 154.941 32.4668 154.287 cv@197.353 158.329 mo196.387 158.648 195.145 158.876 193.24 158.876 cv186.928 158.876 187.958 156.366 182.178 156.366 cv176.397 156.366 177.427 158.876 171.115 158.876 cv164.803 158.876 165.833 156.366 160.053 156.366 cv154.272 156.366 155.302 158.876 148.99 158.876 cv142.678 158.876 143.708 156.366 137.928 156.366 cv132.147 156.366 133.177 158.876 126.865 158.876 cv120.553 158.876 121.583 156.366 115.803 156.366 cv110.022 156.366 111.052 158.876 104.74 158.876 cv98.428 158.876 99.4578 156.366 93.6773 156.366 cv87.8968 156.366 88.9266 158.876 82.6148 158.876 cv76.303 158.876 77.3328 156.366 71.5523 156.366 cv65.7718 156.366 66.8016 158.876 60.4898 158.876 cv54.178 158.876 55.2078 156.366 49.4273 156.366 cv43.6468 156.366 44.6766 158.876 38.3648 158.876 cv36.5254 158.876 35.3094 158.663 34.3668 158.361 cv@195.294 162.019 mo194.705 162.087 194.029 162.126 193.24 162.126 cv186.928 162.126 187.958 159.616 182.178 159.616 cv176.397 159.616 177.427 162.126 171.115 162.126 cv164.803 162.126 165.833 159.616 160.053 159.616 cv154.272 159.616 155.302 162.126 148.99 162.126 cv142.678 162.126 143.708 159.616 137.928 159.616 cv132.147 159.616 133.177 162.126 126.865 162.126 cv120.553 162.126 121.583 159.616 115.803 159.616 cv110.022 159.616 111.052 162.126 104.74 162.126 cv98.428 162.126 99.4578 159.616 93.6773 159.616 cv87.8968 159.616 88.9266 162.126 82.6148 162.126 cv76.303 162.126 77.3328 159.616 71.5523 159.616 cv65.7718 159.616 66.8016 162.126 60.4898 162.126 cv54.178 162.126 55.2078 159.616 49.4273 159.616 cv43.6468 159.616 44.6766 162.126 38.3648 162.126 cv37.576 162.126 36.9017 162.087 36.3145 162.019 cv@193.24 165.376 mo186.928 165.376 187.958 162.866 182.178 162.866 cv176.397 162.866 177.427 165.376 171.115 165.376 cv164.803 165.376 165.833 162.866 160.053 162.866 cv154.272 162.866 155.302 165.376 148.99 165.376 cv142.678 165.376 143.708 162.866 137.928 162.866 cv132.147 162.866 133.177 165.376 126.865 165.376 cv120.553 165.376 121.583 162.866 115.803 162.866 cv110.022 162.866 111.052 165.376 104.74 165.376 cv98.428 165.376 99.4578 162.866 93.6773 162.866 cv87.8968 162.866 88.9266 165.376 82.6148 165.376 cv76.303 165.376 77.3328 162.866 71.5523 162.866 cv65.7718 162.866 66.8016 165.376 60.4898 165.376 cv54.178 165.376 55.2078 162.866 49.4273 162.866 cv43.6468 162.866 44.6766 165.376 38.3648 165.376 cv@191.19 168.519 mo187.08 168.038 187.236 166.116 182.178 166.116 cv176.397 166.116 177.427 168.626 171.115 168.626 cv164.803 168.626 165.833 166.116 160.053 166.116 cv154.272 166.116 155.302 168.626 148.99 168.626 cv142.678 168.626 143.708 166.116 137.928 166.116 cv132.147 166.116 133.177 168.626 126.865 168.626 cv120.553 168.626 121.583 166.116 115.803 166.116 cv110.022 166.116 111.052 168.626 104.74 168.626 cv98.428 168.626 99.4578 166.116 93.6773 166.116 cv87.8968 166.116 88.9266 168.626 82.6148 168.626 cv76.303 168.626 77.3328 166.116 71.5523 166.116 cv65.7718 166.116 66.8016 168.626 60.4898 168.626 cv54.178 168.626 55.2078 166.116 49.4273 166.116 cv44.3694 166.116 44.5254 168.038 40.4151 168.519 cv@189.242 171.361 mo186.95 170.626 186.273 169.366 182.178 169.366 cv176.397 169.366 177.427 171.876 171.115 171.876 cv164.803 171.876 165.833 169.366 160.053 169.366 cv154.272 169.366 155.302 171.876 148.99 171.876 cv142.678 171.876 143.708 169.366 137.928 169.366 cv132.147 169.366 133.177 171.876 126.865 171.876 cv120.553 171.876 121.583 169.366 115.803 169.366 cv110.022 169.366 111.052 171.876 104.74 171.876 cv98.428 171.876 99.4578 169.366 93.6773 169.366 cv87.8968 169.366 88.9266 171.876 82.6148 171.876 cv76.303 171.876 77.3328 169.366 71.5523 169.366 cv65.7718 169.366 66.8016 171.876 60.4898 171.876 cv54.178 171.876 55.2078 169.366 49.4273 169.366 cv45.4227 169.366 44.6866 170.571 42.5137 171.311 cv@187.242 173.737 mo186.078 173.158 184.862 172.616 182.178 172.616 cv176.397 172.616 177.427 175.126 171.115 175.126 cv164.803 175.126 165.833 172.616 160.053 172.616 cv154.272 172.616 155.302 175.126 148.99 175.126 cv142.678 175.126 143.708 172.616 137.928 172.616 cv132.147 172.616 133.177 175.126 126.865 175.126 cv120.553 175.126 121.583 172.616 115.803 172.616 cv110.022 172.616 111.052 175.126 104.74 175.126 cv98.428 175.126 99.4578 172.616 93.6773 172.616 cv87.8968 172.616 88.9266 175.126 82.6148 175.126 cv76.303 175.126 77.3328 172.616 71.5523 172.616 cv65.7718 172.616 66.8016 175.126 60.4898 175.126 cv54.178 175.126 55.2078 172.616 49.4273 172.616 cv46.8199 172.616 45.5982 173.127 44.4634 173.688 cv@185.22 176.194 mo184.446 175.995 183.486 175.866 182.178 175.866 cv176.397 175.866 177.427 178.376 171.115 178.376 cv164.803 178.376 165.833 175.866 160.053 175.866 cv154.272 175.866 155.302 178.376 148.99 178.376 cv142.678 178.376 143.708 175.866 137.928 175.866 cv132.147 175.866 133.177 178.376 126.865 178.376 cv120.553 178.376 121.583 175.866 115.803 175.866 cv110.022 175.866 111.052 178.376 104.74 178.376 cv98.428 178.376 99.4578 175.866 93.6773 175.866 cv87.8968 175.866 88.9266 178.376 82.6148 178.376 cv76.303 178.376 77.3328 175.866 71.5523 175.866 cv65.7718 175.866 66.8016 178.376 60.4898 178.376 cv54.178 178.376 55.2078 175.866 49.4273 175.866 cv48.1836 175.866 47.2554 175.982 46.5015 176.165 cv@182.49 179.119 mo182.388 179.117 182.284 179.116 182.178 179.116 cv176.397 179.116 177.427 181.626 171.115 181.626 cv164.803 181.626 165.833 179.116 160.053 179.116 cv154.272 179.116 155.302 181.626 148.99 181.626 cv142.678 181.626 143.708 179.116 137.928 179.116 cv132.147 179.116 133.177 181.626 126.865 181.626 cv120.553 181.626 121.583 179.116 115.803 179.116 cv110.022 179.116 111.052 181.626 104.74 181.626 cv98.428 181.626 99.4578 179.116 93.6773 179.116 cv87.8968 179.116 88.9266 181.626 82.6148 181.626 cv76.303 181.626 77.3328 179.116 71.5523 179.116 cv65.7718 179.116 66.8016 181.626 60.4898 181.626 cv54.178 181.626 55.2078 179.116 49.4273 179.116 cv@178.609 182.848 mo176.397 183.577 175.657 184.876 171.115 184.876 cv164.803 184.876 165.833 182.366 160.053 182.366 cv154.272 182.366 155.302 184.876 148.99 184.876 cv142.678 184.876 143.708 182.366 137.928 182.366 cv132.147 182.366 133.177 184.876 126.865 184.876 cv120.553 184.876 121.583 182.366 115.803 182.366 cv110.022 182.366 111.052 184.876 104.74 184.876 cv98.428 184.876 99.4578 182.366 93.6773 182.366 cv87.8968 182.366 88.9266 184.876 82.6148 184.876 cv76.303 184.876 77.3328 182.366 71.5523 182.366 cv65.7718 182.366 66.8016 184.876 60.4898 184.876 cv55.7562 184.876 55.1519 183.464 52.7068 182.758 cv@172.871 188.05 mo172.355 188.099 171.775 188.126 171.115 188.126 cv164.803 188.126 165.833 185.616 160.053 185.616 cv154.272 185.616 155.302 188.126 148.99 188.126 cv142.678 188.126 143.708 185.616 137.928 185.616 cv132.147 185.616 133.177 188.126 126.865 188.126 cv120.553 188.126 121.583 185.616 115.803 185.616 cv110.022 185.616 111.052 188.126 104.74 188.126 cv98.428 188.126 99.4578 185.616 93.6773 185.616 cv87.8968 185.616 88.9266 188.126 82.6148 188.126 cv76.303 188.126 77.3328 185.616 71.5523 185.616 cv65.7718 185.616 66.8016 188.126 60.4898 188.126 cv59.8824 188.126 59.3431 188.103 58.8589 188.061 cv@168.602 191.206 mo164.959 190.641 164.913 188.866 160.053 188.866 cv154.272 188.866 155.302 191.376 148.99 191.376 cv142.678 191.376 143.708 188.866 137.928 188.866 cv132.147 188.866 133.177 191.376 126.865 191.376 cv120.553 191.376 121.583 188.866 115.803 188.866 cv110.022 188.866 111.052 191.376 104.74 191.376 cv98.428 191.376 99.4578 188.866 93.6773 188.866 cv87.8968 188.866 88.9266 191.376 82.6148 191.376 cv76.303 191.376 77.3328 188.866 71.5523 188.866 cv66.7474 188.866 66.648 190.601 63.126 191.186 cv@165.267 193.313 mo164.055 192.705 162.853 192.116 160.053 192.116 cv154.272 192.116 155.302 194.626 148.99 194.626 cv142.678 194.626 143.708 192.116 137.928 192.116 cv132.147 192.116 133.177 194.626 126.865 194.626 cv120.553 194.626 121.583 192.116 115.803 192.116 cv110.022 192.116 111.052 194.626 104.74 194.626 cv98.428 194.626 99.4578 192.116 93.6773 192.116 cv87.8968 192.116 88.9266 194.626 82.6148 194.626 cv76.303 194.626 77.3328 192.116 71.5523 192.116 cv68.6622 192.116 67.4744 192.744 66.2203 193.371 cv@161.745 195.452 mo161.252 195.397 160.694 195.366 160.053 195.366 cv154.272 195.366 155.302 197.876 148.99 197.876 cv142.678 197.876 143.708 195.366 137.928 195.366 cv132.147 195.366 133.177 197.876 126.865 197.876 cv120.553 197.876 121.583 195.366 115.803 195.366 cv110.022 195.366 111.052 197.876 104.74 197.876 cv98.428 197.876 99.4578 195.366 93.6773 195.366 cv87.8968 195.366 88.9266 197.876 82.6148 197.876 cv76.303 197.876 77.3328 195.366 71.5523 195.366 cv71.0115 195.366 70.5306 195.388 70.0975 195.428 cv@150.746 201.05 mo150.23 201.099 149.65 201.126 148.99 201.126 cv142.678 201.126 143.708 198.616 137.928 198.616 cv132.147 198.616 133.177 201.126 126.865 201.126 cv120.553 201.126 121.583 198.616 115.803 198.616 cv110.022 198.616 111.052 201.126 104.74 201.126 cv98.428 201.126 99.4578 198.616 93.6773 198.616 cv87.8968 198.616 88.9266 201.126 82.6148 201.126 cv82.1629 201.126 81.7486 201.113 81.367 201.09 cv@143.95 203.455 mo142.376 202.739 141.335 201.866 137.928 201.866 cv132.147 201.866 133.177 204.376 126.865 204.376 cv120.553 204.376 121.583 201.866 115.803 201.866 cv110.022 201.866 111.052 204.376 104.74 204.376 cv98.428 204.376 99.4578 201.866 93.6773 201.866 cv90.3448 201.866 89.2757 202.7 87.7586 203.407 cv@124.37 207.458 mo120.709 206.896 120.671 205.116 115.803 205.116 cv111.044 205.116 110.901 206.817 107.478 207.419 cv@0 gry%ADOBeginSubsetFont: Times-Roman AddGlyphs%ADOt1write: (1.0.21)%%Copyright: Copyright 2005 Adobe System Incorporated. All rights reserved.systemdict beginJFLPFA+Times-Roman dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/D <1C60D8A8C9B6079F62C8682D5880AD5ED13008593EB46F469C485884785466FDB873F506B8D5DAF3242B9C769F96D261CFB9D8C300BA792C494868BA7544BE97D3B0E83FF7BEA9A54452B6C1E660B26C41D6A9E2E70F755692AF9524D5448EE8D59ADBFA699A4258805AAE17C531CB6A322CF0EAFBABB64EB4F61F1F1F19C7B0A5F53BEA7B36B6CF17355AF292BB886CC0448F49C907B6E67F02C998972B27EF2603> |-systemdict /gcheck known {setglobal} if end {end} ifendJFLPFA+Times-Roman /Encoding getdup 68 /D putpop%ADOEndSubsetFont/JFLPFA+Times-Roman*1 [32{/.notdef}repeat /space 32{/.notdef}repeat /A /.notdef /C /D /E /F /G /H /I 4{/.notdef}repeat /N /O /P /.notdef /R /S /T /U 3{/.notdef}repeat /Y 166{/.notdef}repeat] JFLPFA+Times-Roman nfntJFLPFA+Times-Roman*1  [15.3089 3.70116 3.70116 -15.3089 0 0 ]mfnt sfnt84.6318 220.604 mov(U) shJFLPFA+Times-Roman*1  [15.532 2.61119 2.61119 -15.532 0 0 ]mfnt sfnt95.7213 223.149 mov( ) shJFLPFA+Times-Roman*1  [15.6713 1.57279 1.57279 -15.6713 0 0 ]mfnt sfnt99.623 223.914 mov(C) shJFLPFA+Times-Roman*1  [15.7408 0.53906 0.53906 -15.7408 0 0 ]mfnt sfnt110.099 224.856 mov( ) shJFLPFA+Times-Roman*1  [15.7458 -0.363081 -0.363081 -15.7458 0 0 ]mfnt sfnt114.047 225.06 mov(S) shJFLPFA+Times-Roman*1  [15.6986 -1.27095 -1.27095 -15.6986 0 0 ]mfnt sfnt122.818 224.788 mov( ) shJFLPFA+Times-Roman*1  [15.5707 -2.36979 -2.36979 -15.5707 0 0 ]mfnt sfnt126.778 224.598 mov(D) shJFLPFA+Times-Roman*1  [15.3645 -3.46317 -3.46317 -15.3645 0 0 ]mfnt sfnt138.013 222.755 mov( ) sh179.354 124.13 mo184.678 101.491 li185.365 100.804 li185.365 99.9283 li167.99 101.679 li167.615 102.991 164.178 105.554 160.615 105.741 cv152.225 106.054 li152.225 100.694 li151.553 100.022 li152.209 100.022 li152.74 99.4908 li152.74 97.8033 li152.24 97.3033 li149.678 97.3033 li149.678 95.4908 li149.115 94.9283 li149.115 91.6158 li148.178 90.6783 li148.178 86.8658 li145.928 86.8658 li145.928 90.1158 li146.615 90.1158 li146.615 90.6158 li146.115 90.9908 li146.115 91.6783 li138.303 91.6783 li138.303 80.6783 li144.678 91.7408 li145.615 91.7408 li138.928 79.9908 li141.803 77.1158 li141.803 76.2408 li143.615 76.2408 li143.615 75.4908 li139.49 75.4908 li139.49 76.2408 li141.084 76.2408 li141.084 76.8345 li140.678 77.2408 li138.115 77.2408 li138.178 77.2408 138.115 74.1158 138.115 74.1158 cv139.865 72.4908 li139.865 71.8033 li138.115 71.8033 li138.115 66.4908 li141.178 66.4908 li141.428 66.3033 li141.428 65.6158 li141.24 65.3658 li137.803 65.3658 li137.803 60.3658 li137.553 60.3658 li137.553 65.3658 li134.178 65.3658 li133.99 65.6158 li133.99 66.3033 li134.24 66.4908 li137.303 66.4908 li137.303 71.8033 li135.553 71.8033 li135.553 72.4908 li137.303 74.1158 li137.303 74.1158 137.24 90.0533 137.303 90.0533 cv137.365 90.0533 135.365 90.0533 135.365 90.0533 cv134.865 90.3658 li134.865 90.3658 134.803 91.7408 134.865 91.7408 cv134.928 91.7408 132.428 91.7408 132.428 91.7408 cv132.428 91.2408 li132.178 90.8033 li128.365 90.8033 li127.865 91.3658 li127.865 93.2408 li125.053 93.2408 li125.053 94.4283 li125.365 94.7408 li125.365 100.304 li123.303 100.304 li123.303 91.6158 li122.178 90.4283 li120.49 90.4283 li113.803 91.9283 li113.428 92.2408 li113.428 94.8658 li113.678 95.1158 li113.678 100.554 li110.178 100.554 li110.178 100.554 110.115 90.0533 110.178 90.0533 cv110.24 90.0533 108.49 90.0533 108.49 90.0533 cv108.49 91.2408 li108.928 91.5533 li108.928 101.116 li100.99 81.3033 li100.99 82.4908 li108.49 101.429 li106.365 102.429 li106.365 109.929 li101.303 109.929 li101.303 102.241 li101.303 102.241 108.115 100.304 108.178 100.304 cv108.24 100.304 108.053 99.8658 108.053 99.8658 cv101.24 101.679 li101.24 91.4283 li104.553 90.2408 li104.365 89.8033 li101.24 90.8658 li101.24 77.2408 li99.7398 75.2408 li99.7398 71.7408 li99.3648 71.7408 li99.3648 75.6158 li100.615 77.2408 li100.615 110.491 li88.4898 110.491 li87.2398 108.866 li80.7398 108.866 li80.7398 112.116 li81.6148 113.116 li81.6148 116.116 li55.6148 116.116 li55.6148 111.491 li43.2398 102.741 li42.3648 102.741 li42.4898 103.491 li53.0523 112.366 li53.0523 116.116 li50.3023 116.116 li51.9898 111.116 li51.0523 110.491 li50.044 112.362 li48.2398 116.241 li46.9898 116.241 li45.6148 119.866 li45.1031 121.174 45.513 123.181 46.4302 124.196 cv47.1895 124.01 48.168 123.866 49.4273 123.866 cv55.2078 123.866 54.178 126.376 60.4898 126.376 cv66.8016 126.376 65.7718 123.866 71.5523 123.866 cv77.3328 123.866 76.303 126.376 82.6148 126.376 cv88.9266 126.376 87.8968 123.866 93.6773 123.866 cv99.4578 123.866 98.428 126.376 104.74 126.376 cv111.052 126.376 110.022 123.866 115.803 123.866 cv121.583 123.866 120.553 126.376 126.865 126.376 cv133.177 126.376 132.147 123.866 137.928 123.866 cv143.708 123.866 142.678 126.376 148.99 126.376 cv155.302 126.376 154.272 123.866 160.053 123.866 cv165.833 123.866 164.803 126.376 171.115 126.376 cv176.123 126.376 176.521 124.783 179.354 124.13 cv0 0 0 1 cmykf150.678 177.919 mo88.2278 87.4156 li86.6055 85.1426 li86.1033 85.0367 li81.1309 87.3941 75.1199 85.7452 71.8726 81.0855 cv66.2154 72.69 li65.712 71.9424 64.3377 72.1368 63.5901 72.6402 cv63.5855 71.6402 62.951 65.0264 61.6905 62.8453 cv72.4722 78.6392 li72.823 78.7022 li79.0474 74.3643 li79.086 73.9556 li71.0059 62.146 li70.5022 61.3985 69.0814 61.5054 68.3335 62.0093 cv68.3289 61.0093 67.6326 55.3511 66.1231 53.3584 cv67.4698 55.4644 72.5372 58.0767 73.4734 58.4273 cv72.7422 58.9546 72.1495 60.2505 72.6763 60.982 cv80.9583 72.6509 li81.355 72.7564 li87.5794 68.419 li87.6421 68.0679 li76.5577 52.4844 li78.1678 54.4224 84.1526 57.3077 85.0892 57.6582 cv84.358 58.1851 83.7 59.4073 84.2271 60.1382 cv90.1443 68.3526 li93.3916 73.0123 92.7547 79.2935 88.8216 83.1426 cv88.7471 83.65 li90.4202 85.8877 li153.704 175.811 li153.646 176.384 li151.236 178.063 li150.678 177.919 li0 0 0 0 cmykf2 lw150.678 177.919 mo88.2278 87.4156 li86.6055 85.1426 li86.1033 85.0367 li81.1309 87.3941 75.1199 85.7452 71.8726 81.0855 cv66.2154 72.69 li65.712 71.9424 64.3377 72.1368 63.5901 72.6402 cv63.5855 71.6402 62.951 65.0264 61.6905 62.8453 cv72.4722 78.6392 li72.823 78.7022 li79.0474 74.3643 li79.086 73.9556 li71.0059 62.146 li70.5022 61.3985 69.0814 61.5054 68.3335 62.0093 cv68.3289 61.0093 67.6326 55.3511 66.1231 53.3584 cv67.4698 55.4644 72.5372 58.0767 73.4734 58.4273 cv72.7422 58.9546 72.1495 60.2505 72.6763 60.982 cv80.9583 72.6509 li81.355 72.7564 li87.5794 68.419 li87.6421 68.0679 li76.5577 52.4844 li78.1678 54.4224 84.1526 57.3077 85.0892 57.6582 cv84.358 58.1851 83.7 59.4073 84.2271 60.1382 cv90.1443 68.3526 li93.3916 73.0123 92.7547 79.2935 88.8216 83.1426 cv88.7471 83.65 li90.4202 85.8877 li153.704 175.811 li153.646 176.384 li151.236 178.063 li150.678 177.919 licp@150.678 177.919 mo88.2278 87.4156 li86.6055 85.1426 li86.1033 85.0367 li81.1309 87.3941 75.1199 85.7452 71.8726 81.0855 cv66.2154 72.69 li65.712 71.9424 64.3377 72.1368 63.5901 72.6402 cv63.5855 71.6402 62.951 65.0264 61.6905 62.8453 cv72.4722 78.6392 li72.823 78.7022 li79.0474 74.3643 li79.086 73.9556 li71.0059 62.146 li70.5022 61.3985 69.0814 61.5054 68.3335 62.0093 cv68.3289 61.0093 67.6326 55.3511 66.1231 53.3584 cv67.4698 55.4644 72.5372 58.0767 73.4734 58.4273 cv72.7422 58.9546 72.1495 60.2505 72.6763 60.982 cv80.9583 72.6509 li81.355 72.7564 li87.5794 68.419 li87.6421 68.0679 li76.5577 52.4844 li78.1678 54.4224 84.1526 57.3077 85.0892 57.6582 cv84.358 58.1851 83.7 59.4073 84.2271 60.1382 cv90.1443 68.3526 li93.3916 73.0123 92.7547 79.2935 88.8216 83.1426 cv88.7471 83.65 li90.4202 85.8877 li153.704 175.811 li153.646 176.384 li151.236 178.063 li150.678 177.919 li0 0 0 1 cmykf80.1983 75.5538 mo79.7701 75.4014 li73.6485 79.6675 li73.6087 80.0157 li75.3038 82.335 78.0728 83.8335 81.1648 83.8184 cv82.4935 83.8121 83.9852 83.5191 85.0948 83.0313 cv85.1885 82.625 li80.1983 75.5538 li0 0 0 0 cmykf82.0723 74.2481 mo82.0777 73.7935 li88.1998 69.5274 li88.5398 69.6109 li90.1287 72.004 90.5757 75.1202 89.4913 78.0162 cv89.0254 79.2603 88.2647 80.3843 87.4229 81.2564 cv87.0096 81.2037 li82.0723 74.2481 lif%ADOBeginClientInjection: EndPageContent "AI11EPS"userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse%ADOEndClientInjection: EndPageContent "AI11EPS"% page clipgrestoregrestore % PSGState/JFLPFA+Times-Roman*1 ufntAdobe_AGM_Core/AGMCORE_save get restore%%PageTrailer[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5Adobe_AGM_Image/page_trailer get execAdobe_CoolType_Core/page_trailer get execAdobe_AGM_Core/page_trailer get execcurrentdict Adobe_AGM_Utils eq {end} if%%TrailerAdobe_AGM_Image/doc_trailer get execAdobe_CoolType_Core/doc_trailer get execAdobe_AGM_Core/doc_trailer get exec%%EOF%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 11.0%%AI8_CreatorVersion: 11.0.0%%For: (Steve Diggs) (UCSD/SIO)%%Title: (sio_scripps_logo.eps)%%CreationDate: 1/27/05 8:27 AM%AI9_DataStream%Gb!9skBcDaecpG<J9rssB8N,e#_\!l@"Z;8(_[%l-48u$Sfd.L:K8hf,UC6uYKo#Nlo%b@ii88Y]rN]MltX9Tc^*&HlL4M=-QEHK%GllCGSL59Hhg+]ffO1ruB@$3N?7tH$L4^(?39gs+@dFofBJd_Xjpa_2!Uq\O)XS@5E`ZmS,C6uHXl_-G)o'SA#GYYJCML94J]H$g%K&1gF=,Xmmo($A,?I*9V=K)j/$MCCOS>K?2@^*J&GVStEcpnPQ[Y$"L^I*LWO%[[DHp=LoTQtig>(G4/p`e-VJ%s@B*>fu6!sd*6%*oAHqDM+kBs6SQSH90gKR)*[K>4rqPh+`4#Se$!$4%'!DbR<U^%jhWYlJZ[L$d`n%F=;fhnHbZ(#T!,g_kF\mh]!!]JVf?E>\S1-%l+^j&J)Y[5K@+MG>A_..dFMqTG!61DpG2V!(c^rEL!`-OoB6(BAm3@qS4#Sh'Os@T>`Iu.pBZ1Abm/2#0_@T"q_.^d>G*uaVXt@[%`+m#Aj,`(d1%*T@ISh-`6Sn';_?OajHJ)Q:UAfH_YlL9r4:q5_Yp^IL*KFRU]8.Q@o7u#=YWG*oCpQ*9)J<i?otXc+l6B\fl<q_K%b\T=E`]_]l%]^(0A,Psgq?:Ih(7-l;^PfDtTFlIEP5iSts0J7#j597f,teI<jZ'_Q^ki;l@`a4U?NR6pYGUYJiG\>m1q-g2\qWJo%\(Rs.oG4esVse)'hio#V7>&R8qM=[#B#'n<O'ob=?Oi1WCd&s9nq5>=8,Jm$Zh^!^ebESX?VC0'^_Rf\g3d<,)*ek!3W6F*+I6HN%+/$bHI-!3]dbpnR:MIqK[.*==Xa\9UR7YQFKJH2"]tq0ebHBL'.nSEZ:j0g$A^;.JZUOUt;1id?PT::3;k!695mM,X2ZiU<g[8`e%%S*e#8!)/H_u4sXmsOF%"(u$?m/p\q2D?2t_(7<S:P.<?^<p]o%j6i"SIb)70teDX^HT(:6?D#FC,`";4sKHrD<HQ=[m>8GT's.H%flA_]irAld^%<oMo#HK[Er:Dgb]lI,Wb+mBrk0.b8,G=E_&!r=k?R>B4hZQ%*3]@Jo[//Lk(<j6'2[:s1min+KWc_1e'=9"h3dWH%;U^QSDGEuNi\,I%kkTV7L*PTY!V>mpls^MGZ#Tfcqc8eJQ=J8f+2'r>6%fZD(fe`Y@-^4q`96L)na*Fs,S4D4KK4MqrgGMCG")"L%AqbPgG)FXboF"Z3n4dM&^`7WMQ@3Pqc>!ao"Kf)Ac\@'(/T_R&!(D+hX8NfqLquSP82N!qRp[Zi06Ahm:/-Rn?BUIe8LRPI$e<lr%2+`5o\8,o;(0dLZXes(O)T.ioDJ)/TfBbgT"sX?#4(.`[fO0@j"M:M`*Gt:on!DK(ZX:o]q]4=EX!R`1)\'T,L1VKHbttt.g]ElU%^O$#8=XesT<.6i26"(hLlV"&<JRn0EUp#0o@]VD"^9\OU*lqE,f4=Sso:ImWki-$@gWF_b,iAc'6>uRM3VX3[c'B$I-$K;Z2B&(i%;ulDZH2n`sr\38-*:>bihflECHp!llHsf&E,^+TOAi8G+!&p9r)L%:HJa0!b?Yr))#BpA7(@m%$&,4?i*fKdtC[f0t>VBP`+%ae&%K0):=j9QN;[/\Rt.=L@i@^,>AODt6]T>bb,n,(c;*fN5":1YM@D&o\cPVRuk21-))fB7MMWkb_0ldBgZ1>%HRC.R74Tib`h[3bV.%q_$(Y\)2DSeS=N^4"S1\@V^NJR@U_WaYlCep%lXb/ugul!'CB=hUtH!HA2)[4)3ZEC_-k]L)0)?5DB-/r:4EPVGaC[LTcBR'tuZ`%![<KSFs0m;Gp<6i71iq$k()E.Kkf84@`PLT^\ES^.jO9bd"3Q:Mk9'tJ'ml<=u))S'>PCPg&krh<\<YYfW&F8.kgeQNYWFW[9,eC%i9o]RY_J4"9!UM]n-8.Vn9@]HS?kG9Z#?;P]DDj&&;.0l">UYh\;Pub=g#PjI8>J!IHNN`?=lGiVtmgS>n-^]C(OD#c9L5W)>s",%*rY7SGkZI7m9t3Kn?heGb&r4SW=M69mLk79^d9C+^Toc0i9=W6ht8fEB)hT5rd$KlRW_,DB5j-]TLf0j-r,W]][d<QVZNkACpZA_%W#7V"93]<]e,%-^cO,[$Fe,jR<D]6.g5a1'$=#n=36&[A2^>Eds5>#OMI[5t.d-ZNgKrrK2_\A155mKC:&&LYPaMRD&,X!1=FC6/%(&D>tNOc?F*aX"dK&>8]?3#Ck9RG\^90a^35U;Z0o)$0+o0$.tG3:B,2@j-_r`O;\JN:OTP^9R,GCqX6q"5ZC0C-Dsnt5ro[c]GS%_>b%8:P`ROha!T>kTs;"7OF:M5k6V8+]&i]Cs`C__=9cs<dSFH,@A[0E_M6or^X;QUAN%+9EW7-Xf)0umHh`^+0WK;g;=O#@fNUi%r2hfGD]7>2RUbmnE,R9?$NJ;(`:s7U>lU4OGMiFM*>[9&j&$7e]A74!"U6aJo$SL#f\BW&`;XOAG!#c6ei3#<>*nVVn;T>]Zs/mO%5*/MGQ'206>F$:[XuSN_qHj>:2Aj`52uA(R,?-bpJ)5s1V5-4t;<-C3Zlu(DqEJ<=5JI:jq^l1bs6`U[0Y$mbqM#7=E;OPo*#ukg%jMPBlJ6\_nKP8W\E/%+)nUKFq8Ombo%.i$5QQBq'Dn0&Oc,0M>f_F>'9;M*mH*c:PP5[s/8R2ns$-(41;8Vib_39G10(5fmj`E_S%dWbB7HG>b[P3@NZ6Z6]$0D_hCs1Q%fO(Z)@E&O?U30Pd2$3`a_"0oH=ZQ$%ObkQ&YO.,P,4,,+@c'%Sg@&^L!:nWc/5Nn0.(\N\,%cn$X1J7dKnO^L=)G"B46rJhaH\*F&sf?lgU\_6aq48UZ_//(88Z+K[:9f(_h@R!AS2mu6W_g)%^(96bGli$8>GlWmkBE(C(n&0j)%Y'ZjpD]\01\&K6:_><c1F>j;u#!3`^S47o'ADuDl?o'=[\LDVRF8NZJ8<7E\KquPVAEPJ*-[.<VV?2n=mS:W_AQsa6(GPI9`(0Tj%+0T<`=`4Q:fiIf[1"cJGdk"UXlbQ\6Psjksf^DkXm.'D&8N%E/2\EXFTQ6X=kg9m%b]#6X/4[`rIIIQ10mI#P[f^tO?ch\q=oIo<%+'0mRRa9Q8,b[R#pDl@T?S+.L=S'.RobYlSTo2lX048Na.qVJ9O-ehNpU&YFo3,CIT?,'#ba@(0=X?qJg`@1L/=3E.0G\i^NXG=:%g27E]ic2g5EhlP8#V`Ib`k"]EqXNHYY:073C'OoClg\;V^fILjdHZfFaU1:23*fq""A?I=l0;e`>Y1&Y&Z\bY#oMtOM[<c@,oM!M%84^;L_0/^]q),ePVcOlQ!c6u&S:o).Mgc2V0HT._I<-Cr[))0@+Y\+%U`Q*YZ[geL.qQpsjd,NQ0_2tlojn;\J?fXX+?)QNNmiL*%F7khGbFNjh+)Xj_$l0`,f?@bOn-c)\Yf.ACHf:d6icIs4^Kqc!ZX$9P?IkUA]/V#r$[%]jXk(),_N5L@!`TL/r]lP+^"-%cdVBl"%KjO'nHdM*=[>/=U`\I\N\4/JJEZV/VF:Ar-flFCHC713C7(ERA#Zo%3&#g%`9M_<\P^$2nR5$2hZPr7D]D7Qkjg]q6'MW32;u7:F%gqr)ENA:b06`JRk)1-S6\Y*@[m3#MC3uT\HD+:tXH9V0qU8K!W)d@,4VnITE/GFRElsQe-1Zdp`=b`tIM8@(Rld^0%R`JkcYhn^7%(%^>3V,keK.$Y]-4.7s36/<EqLum)sGtGPQm7qI9=Ai[Pb#AQn;+!?o-&/b^@^).+8@?lZ'SA"7OcH0:e+>5V)fg^rV[AIKm;0A`%RdTj;nKNVL'Wo/;hggDtku4)a(&O'+@a^I9':!:;&5Yo&ZUcA$NPlP,&h#\kdH1\^+;B`YA'3e#-nc/;GgPbX<cWlAJiEaA"9-b\%7<&lqW>:cE;]&Rf-CH8NeH6L'Z_8Ef(aCH)Xm^1PF0=#=4]ZJ5(?8R4b,JGJMSS%.=7W./Q%ej+1C%Q1-_"blo;7*b:e7Ph+FrWk%gp:\T-3P\)%/V4C_KXA,;D<`a%4nn-$6'rN2"j"i7V0"bXGp(!0J'd5SZMq5>lJJX3N*R@/O*5T?[4M^JS:4oM7s^$-sqJ7X3&T5%"-3^hV@)^")!;1bh2p7RUec[@WW7ZAU#uH*`Hk,*9G-5&ee?tgAM*h]RYB(1S[6t<U:m@+k!dOpB8blE4eLd$q.HZiYK+ZbCH19T%_52UZj\#.Fgs)/+M#cYCY^T(V-cVr&##W46g#+>>!W5$3%mH=DJQ,=Uj@Z7^L]mC2@6gC&PmVl^RB<6*:KGW5$0>jqM9I=DBb.(V%?`?RXJ;k4agp0=4'.'<N;d\(gNAA)VR-^4krAsRZrqS074?'6O-GJoe_XHI&]>9[&Hr2Cn)/(\.-!p9s40]c#\(ipAc%;n$o-T2`%)u&$ha8I5[%$,/;,4St_hl54oN,OKR^ph!VhGs4a?0Uf`+Cr\V)SrP*qZpN8m03sMq=KIM-6)IjQ,aaukoOYI_0`):Um^R5ms;(D%a\'\M&q/X"*[rk/2A8eofn*S\1Po^Rn+CNb`Rn7un;qR$l0""D4&(SQ0j"pt;GcZ$eK"[m#[Ib]L\VBm4&dJ_Tt#eM]=to1Y:'?C%Uln<]_9\66\MlhK1]/aBRo?)C=Ld9+J^p\7PO:A*3g0tRVLWcW9hQG6fHcoHj'[>OF=jZ^CAW,Bm+mCs3fZ^i:TfK9n@(>QN?sFJ%ho-j*C8XS+E'?5ZcFICKN3SkC8"L`1/V(k!2pB=8)h]=0?)`G'b"pT('FZa#nF,8KL>\uIJW6dM,Y&VWWsllk[N27.+<N>no+OXS%A*GWCS>3oeY4pkf5OL@1_@>5`Jci0LB%]Y#XY?a.BW)O<A^hXs@X=ML9@g&X_Ddr'L7\\l^LEtmBH(#gZl"a)LgT75PP<Y1c+I4!%/4sD`p0V.4I;"*/:hnLFoN0R4)E+!ihk*6@7R8P@Zba+pN66ljMA(A5rC"oR5bbF2-q6p#7Fal0rnq!%E>XD7#2dF&Ttn;iY:?qo%q/ae(>Z6^\BME?%37hj"Aj_QP<k)-=0X&3/e0s`1LAA_em4piq[14-M*0X:)(Yj:?*p#lC`Nm<(CK>7.r.H@iC5n7@cR@XIDY,CH%1i:,,8$PpD7;R-_>%]:l7Z2!\&q<u#2!B1*-0D<WV+(J/4ZEicB;Y&9.#et:@el6\ULBA^jcrE92#>e@W*]!sC_Vgs8kRikjk'8'%U=a.q]mipse4*4i2<@;k7R5)>G$R&EAs5^ugn:2%8B(o_)"YffX[]U7>bc3Y]<'EL9D/%ED)D:_9*#rpNqGPf<P/'g@\`\:br5-.%C4m<@I<75#eOBT&s6\tTZ.Xb!]+40R:2cC:Xa!#ZA(nUpD"OQr:5Fm]FZF:3l(_A+W\p6_?>Z73EhcX`rae,18!Otr*9OYdY>iQr%.ej?l[72\!lT1,)Bf,4%rG6rqW)81951Xn'kYuE+h^<SaPt!ui=Kg:t-oGbDD""!2e"7,<F=L%)Ds(u92S,j!X<"]<.BMFZ,Z1=u%`aiS]AK4C1f]Ekec2W%*.ZHoU`qC'HAK)ZFmg<O!@)%5/P@jOUD@e`'E3s=oVM*uN^Z^;>_`i@@?d<:?fB@.sH-g6ggPS.7P/^o"%gJ[b)iEl14gM,=D)bhDIR]>!7@1#r+d27$P;a4;;[aDHFmhQiG4;gnuOe?GIe?$EoMjFrW@EXoa5*TKN`%`cYiLWTjq?%X1qrNem%Za9fl$J-T\n/dUtfZIC!8^qDrh5XKd7V_4+6c1O>1tcB9+1'gJG)[-!WJMkeJmjJoZK8@pP-Xi;gMGC5euF1`(#SEa`["U]E:$W]%g-@1`?s>Q=]a&=<\W)oVR=oJnf\19^N_j=-^-*[/qr7?2]X3@pkcFn4(RIgkeglJS^>A7OGj7Gdr3g,nAnp^\6hZhta6lU47&<j@%D3_l=@(iS`(##_$%JQJMWP)$fD.R1\eDlZmO5g'#dl[!%Vn5+e2Kd6C0XJ!H`tVki>?c_t5)%iCbZH`:J'B:o)3qD3cF0./AQ@S&%h>LTgq&t)8bh+.+rB*%@%csmdT"fc`rObebD<GODf_YLqD\j@FA```aUWW&_H?DMt5(;7-Fp7.pIbWbmo%[&]`WdI`_nA,u.=Y'9%SuCInNE1Ki_0Y"IT@1EqN*4konZ1L@PZIXL@359)5c.u!_mc&o\,L3Cf#TK%gES&`&H)co0?0TC']5h>NoX@tkLP1.\@7^_NNj:C%rUl=G;I`sLJ#=@=(+$:?l,(;[U>b`m$9HCeY`b3X""0Q!h-U)^dW+V=Hf[ETXaMQ7`kO;K!O'fe4lt=cdJa$mK`?;U1Wno.T6'Lo%[V-?n/>?9<da%b03I"+q.0ie)1=0j4aC!7Ve_bcXd0PmVVr(%pMp6S)[1-5,f0]8kB3<:e4W+SWLOr80a53]79`T?BqH:E+-VDs<%R'(JFl;fA>FI9t/cj]O0W"G8Pj*FnCV`m9?`c=k7IJV+b.(4L[(/T#lcrFSl(t)L2'0@&SrEJbGs$#.1I'\U%"8O#uGoh0H"`^"V%<h#DmPqp>HrO.K-$5/>P[?`o3eH@OK9a`F0.7\fIANGDo5,X6n][$],Ejc)@Rj;-/`jYk,oVEre$1??k3EIu@Ga?ukC>Au82)*iM%Pe&70>k"kB\oS&`^D[KpNp^?*WnGml4(*P>l0kn03J0c&HaJgD"'_qUdEss>A,3$?6-%D?Y<lTCmM_86iO7)\3GFYlY(S*RYf<Kk%!:C'6S:noUc3I3l-&EH4Y8N:qn`H=/ipMG]\rm<JA5&XcH#>&fX.rOb*QO#C)?m1fNR^m=a-uTZT>AHF4./'>)/t"[Kmkf9jn^9e%SF&AYXdF;ma'PKpVq^._rgkW![EOJnl(JUP`pS\M\WNTVd:])eq4C+q=,P]fYa&I<B?*$M!*as8=Of@Bg1K$pZ@,F.D15\-/&?.h%*/nR,'s]ZFYeaUJ[k8k]7]d/k]RI[+p^I0HTpmG@7G0>Z9?1Dd'FAOG(,f_9rc+YR`kOG)37hKPg^lSLBGbmX>!<AM4=2AlpngW@%nBWn(\K9la0Q%^bC$4>8"gN.8hS5_16KaBk=J9d?Y'XOm[C*U?)_5XK*E]@t(FQ$$/ufG-hDh)XY7[."'qMC6iJ7:I;]2a_BX$94%21WO9W73iYDgD=sXK^]W6a@X[OElU"Q.=/o@81PHLtuP!rs:^qQIOVPhK!csWf6+hnLnK9`19<5FnK]V)ADhalO#O2bp65''?b"*%j_P#:S>fVa<QBu(<X\aofT;rio7qW/'^h.:`4"p'$&"iKo%bWf+?hL6MQ.>'YfN\<HNJW,-W&G:^j9#<+GJeJ\d@FX)S7UQ:BMh\%0@`$c?@em5oZf2`_T?Ecc)nsPq)P^c7&@QmT6YU-E30NaI^MkX@rafUi"'VimB`(1eX+i7>C?moI?6*`@J046DtgQF$E\`]qXI`L%XD$XocBuXoRi0--6,+`'0.La?W)u&/XZ//cUSCHd?(DTdnV(7(=G0EimC!DcBbInibISthNMB6OU&=HO8qateL&m(`N8[s2>IgD&%8J#hB_3Rl4,bS$78o=<#9"S.gQ8<dHd(e0ga)G2jgudX3/4W]T%,C/R25u[GcUcFYb9;q""7@r`qi9O@HjZC;X?mL$BNIrLhX3rj%4er@'i%GDY^cB@MeXa&\O\__gC>503GGM`,=NF*GP>0#Rjr_>)E<.$5#'iq:Y*[=k$UDEcZTls=)MQ=oodg9O<04)E8.$lqfGQOV%"%=6!+S<J8X\kF&krdT%*6fu&jPST%e]K/L*qM_,0$!PGb&p;9Q0N5<787@,@U0?6KasA;gfths/JtV,\fC3Cd.45=O4n``;jCK"%jN5/67W[%K\IE+j:YcdJA(),U2Q*J$?r<Ig[Aiej5F#%hX7CTkQ2^,sXF/i'!\l+^r4F0-V)E(?Y]ujMcF.aUN*Y^>&=uqiQ0D[[%6m`.tLXBbB*BMG\dd_$,35\nk<4pS&<h6M&IcL7bN!7Y5c,Z<tQmV.Xp5<T[W=d$KT9NCEP/KgBSo5jSFpZLh[KWp/aIdk=4DF=#%YtG:\:5N#@Y'EoBW]?X-TC)9'k?HSDY^g]^,ZG_">&B=Sk/Ve"iRs8@d)WfF/[ot0_`$6':3U=ii<fUVLn&red,$uh-s^ng@Wd:J%D<+_Fl5UU)G(02X/JuO0%2M[[#AVadF0pmB0'8$1nBPpbiG'Lt,4d9hZPq^>*[$)(O[96Kk&;u>/p!^$-/MMpJ/.EhD7QV3,)*/O%ak^YYg=[,fhr'UfCN&_V'<'*.AiN46$:]7Y05oB_O0Ybnm35=Zd-C:mbcIR,FnHR4j5#-g$dE'fCHUiL43N<n0ZS1&Cor52U$Y6H%QneK?Ak[<@?/n6ZQt%*8nS,idr[Q9kP:e\Ejd]'dM,TsN'&tQt:)uFD2#5:FY=,sNjZP@;A6PTTALXYiS;&7O7-qu)&J%XoJ?`n>%m@2NdhPquq^0O&ekn\0aiE8WNT#%/=c3#pnj;Ug)S&'U4+k%T-Pcaqr&hk[_<BY+df=b3Bc*JU82dA.K(/=NR:Y5lpWSP"c@.a0%%I5M*\=CA$Zh/2^8:%8$=Sao3bT#0Yh4H-b6C=EJFIk5J;.I4@]qs_N2Qu5Gb=45G=Mfr@8E>?f^F.dkd\_;1W*.kjnK@I`XoQlZ]%0+)n!$11(NQlG\fXPF91Od5YoS@6Z@2U_lMEYH9IB]Ia3a,LU!6L*`0E.!\@,BE0'/9j\qQVkTC^2UB>lpV]I/Yk%(UWW,IBan,/%liX#4BY0_eSAW@t#PKPNfOER/:5>Kpm:!"&B!CJYE0?F#f]k]l2P3+I6L,h>6HEokH]T]DiLs1;)PbBc2*Mm(D22KZf@@,:92!*Q%@o8)3J7;F&+gInhla2`Y?LHTJ,%nTlboBj2WgkfC=r,71O0"BLB.\u[cCi:O[_IBoV[_<gTMl1=cAPd3TFD(,8*q:!COE9pLY$,.%"\./.h0_7sm.fL@mMRuD37d5]@+l+dVW'%cSkoIle"mQHPuJ)2*6XA%g!tSc-?/-m/8o;MJ+<bHI1Gn]-?l+hB>6\6pun75ROEdC%L!_tSe#)2']PuRq4j&M>W#J,D7t/C_`[=0QJe;<0_BUV+>NS#[L;q:Z6*KE/1oQuTaD*iC+jW/a?ti<n[,H(M8h>I.c4\<(;4Z'5%]KT#HjY6(kMrhd'?aAuW5Q;I-\ZJ4M)tX^iINQ.5g,Q3qS$j8mAO%2i@ejID#ooR-Y?3\rD8*jbUUlb>2N?Nt/;%XM`3O^Mn>0Ss%N9:hmZ=NVi[h[)77U.fNq-oBl47L$X;MeG-k+fN"9X'[\Xp:fZXi`pq\Y8Q5E^+HnlU'&JpH]mNc.DclV#7-C4IA(7`;>Ln)arKp%=5!+`]3!MpU.dR4W+fD<0P!^MV!I8)=+`q%d^:daWdF][T%7g=9?3ddYg<-OS["LX8ir8:jr<d%.0MS9&kXW"MrBsdH,#bOnP.--%W#dt#m8b3EostkI)UTYDE^qa$o#gU0_r^=PGNG>#;1_HbX4O73=(dCB5l3V?r;+Bua;In77Y#_iAHph5Up<P&0_/..7r,tX=t9?R%N:pn*"Ce68+D/3"oL(ijUU--!&THIfIf4XK])1NbdGB$4iEp^;DdDU_0RrkHSU%WVR"b-[LrjH9?D8k0Q7MX4q@/o=YmH>`k.o`b%-j3W_15Rl;:R5:`&8qPQ(W;4/1b0_)9s+*$/*^Ul9#?fs0n*+uPY8u:h)El)"q+cnoF2I<rG'n#qK?&*`g(/HYY":c_Bs?bg!S8G%irNKZ`)sl'95XA^cr$PQ0D@stb1TBSmo19b)HJb1FQ`esejC?(@kM9GeeYMG!e%*MGsgICrP`"TaQr'33X>D;6MKoIJKBb.7TGUo%c-F.Q8s\BKq5'',md$:Qqgpi0e2c)LQ?KIY0YM7F03UI\(%oj8+5i8W@'hGfHKHiPDc&jaj;;ID@89+`j%=Q4?"iRi:<_ujK%8J4%`t!Pt05M?H=F@O"Mlm6-^X%;j^4Uj`$OTKJ1-_ct_ji9G:\X\4)r4qpnHU\ZJjo(i9#iZfcC`RopMJ'-`e",l?o0a&#6`>>Oq4@+%?0M\_Ii(4hTSsJ7gIAa!$uAs7NGatAa60ro]6cT40.]r=TVHkgX0E4kaSNJJJ)n6(q&(VBBJ_EU:0mR4h55bHOeC+pXbK#ab+U+[%;N2daP4/bJoesb/js!pl6`'iAWXlBd5I=@G\(!Wn\q7s3ngRP1^uN3ch=RFlj8p!n&!(a?!bE>\n1h`-SkjTRhqU_9*>DqHVrh*5%)TXEOn1MWO*Z`HQT8MnsD[//6l>cV:F?4M.o@F,2*R*.jP3kR][/<T%C)7]'Zd/n.@l_;=Vf$N)qO*,K<u$qjm!7"kGG47;3Wa&g%!QmRa<D_%5?;BkDU&R[E/'!b8j,qjea!dJ@9'maT;@NpobB"nunUU^VHC)qL0uGdK5DL$(lR>g)0e8cnrJY<:_?8#<m@gA!Ui7YS%ZEl^bp;guJETsI?,^68GbTVu1Y>LYC-IaF.QDug^Nl%R!2$FlB8pG@W@Kak%-+b5iia?'+9t+GqR/,>!'%;Pm4D.roN4qtN-_/".%YP#Du;f=f(Xo,acaQ(pVgkN"iBDr7HR/Tgtk^t[bFjUZsetp4JcZ<+5Me^[UQp[F:'83J$JoI()B3_Hm6+I67W0Bj4Uh[*3D"t?-%DrX\/_.frE"g=BGb4<?.YMR*XFqH+/k\6AaB-.q[<u.'!4BsXODthi;bZJV\O7g:Z'i!?NbOR45>KoWl=Qo?mAG%RgX`^=QFj-%5%^*;s-inc?R$'7,i;5bqoe"U<S)f5se1X/X443WRj&MUd`P31o)U^o_?BS<F]7[HRr\Z[\7lDS+(H/\C=DeD,'=ec7&(!5(^=nG6_%*C_rE](mcqS(UlE`m/^cik/k\'LEoVl-l:1[*1k&06!WT_j*^F$_V'Z=]5gliX*]sa$uDmUjE0n'G,NuM,WjGT&i9p.,o[jN:=9e%mK"K)VgTQJH$[XM]$QI<5@BN+ogBAUeS7BuC^g7'kY)jL=4N"J*r;j`TaOS'`aYG'_Z`&>2X`uE0#Jk!Orb<lN`^(QKYGlg`aq5_%S^JI0W["7K/2J3OU2>&9,>?/D4#K]5Kp?+.iZE<6pAbP"b`-manS*Vhc]=]-rF9Sc*iSTUW=\jT:Uf?Wl[sr.N%%)'0:B*:&XgcZ%gE>kXHH[%XKXP_Y3o_g"OO+nm9p3%UZW!3g69%06JlrD?`U.fI&D.XH83j&*&u(0eW*ZrQ&'p@Gou1&nYYut*i'nM)dgm*4oJJs,%&+]GXJ;G&V*qWj3['Kd#Gd`,N\oQLEG&7c&0)44[%Qol@92-A>Ho[chlK;fbhFFHtV3<2c(`21r/sa5M7ZC>-Q/#2>B-3b8'/$o6%b>K\N<&%Fb6\V!jNggNactJ+?^F[]>R21orWoY9i2/8Zs.b:QZe3Gf:+P=0<%TNWni!46b0KZ,`#K84pXkTB<_d<64m=!fnEkhZS%'qSpY69G&Xm%[l`Vaf5a#g^6(EBaLX)_B#NcANg&:*SZJSVo`8^9$C`]MQ=-d./d6r6]'>aEDS,0fdK;iO%i/jj=Z4TEm5s>Ftn_%fJ[Vq3P4qZ*$D,cUmS2f.9iP_cM5ua9BYuf;$7F<I>bI/E8!M:%b-F-_P-'Ta+u_fFi2(_[I@/,`eSF3\P3>?6@(/[Q+;RfcF7=\%/ne6U$`m4W=bB1I)=b)&(X%>_\^\Uhi4c3=eW/Lb:5Df]M-'tq`cZ;=h.$1iUEl.ZH`PI.bFjp-e!?QMV$>o3[h-`!Pa^c)@X2qm%W4;NGpQ-NensNri<J-!ujdV';3)r#dK'/#&+eJ"1jRB!T\^.43A[qSV].S!#;_3RHFg^7;cb)XK!l$U4T*EKLaNm%kF1L2=[G:4,%]&gXIgh5C`^8WCgj+]BG<?5<'lAMa7=@E\nWOhg)okWuDh7-8>c:9$d6+6ASW-S?u0(f">Nb'Wb9<Z<\:5+jO^2^)>BUXfkV^oi3%Id_3EI1C?th5Pcnp,UL?SaN7=akg*1;K)CXngVYc\G(b_r<i8_F9O\.:SqGKH*5F,>7gD.5rioQlPEd":6CO^52@7=`SFZ/cc]`C%l\Y$K8"5+FOrE2=/&.<p4#M>MNBTa+kD^N,n-Q:rc7<.!SM@]FhQkQueZrtj%@05!;73o7W1:]p7kUg-PquPAa@4YU`cCH8eOO-F%,8X?Qb!DgS(sAP]W7lB=9sqh.7kUg-FUmBLDLYNkm$_ZQ'(X$Y<QdENhN*'5MlL@?<.e6N`'r33N&'J9J)I&9=eiQGa$0NtC=tJp%K"'pO(KF,Y+_o>:gA@4B<%Y_ZRaj%9^Sk<`m$>8\qVX3hFr+0%3bP[eh*!n;<QiV(PP=QQISmMS5'C4LISocT0td@#rKG9+?@>\Y%1?/!UIdAs/<?LQ9S]DNDOCa\=G#$(^?@5VX>.it)(KKe?,O<(B>5n_+K-.8&Z33;5bhb^YX9$V\jXH6O3;^qS):$BoX"/'m00EHW%h"Z$]CrqX8)566>R')[a1/G($anqLqC`VI#X.sPTr`R\pX=LpIBm@&rf<*2SSU"kR<iDGiQ$+T=qZ9aN"n6>.BeP(EFm"G-PkM#j%fj`aU`UI[a'QJ6Ln+lJ>!u.Xg3;_pPnpG\j%M5ki>K]gYZZVed.GZD#-9PK;3;Zg8SINm\W)aq//`Fg<_R"0j/goT1(TtrLn8',$%@\j@).kd)e!,#Yc"1u:*-4SSEZZSs<g1eDAn8'+DM0,-Ni7TSYWIV=b#+hq!SB^#!YL_um@46`6'l!"sGd\+:5lF/dh=,5$i+t5[%f>4fT1St/t^21e!i7Z`+R!s:g%WM-02R7(a:89HWd'`&RZZUBS&=[VN4BnXT;K0&sAGp4e[Z5keK7YaB/V!h-afXkmk+e'=hIj[\%Spel>fhtGn5\B>n4'N)kbhjeNG'ir)[F0JI[d"=gH3M!b]<_sX6b2jGSZO_R-&YQFHhK$Vr854]1t_Egc9@B(5mp2blgAS7Y0Ks2%o^fSQf%oQ1[qB&.JO@[E=(b8Nn(6%Uk<J@c])XR7Br9JQ&E>,^LMqtc(QcLRYC'j;&2AXuX\@n$`_Xn4bn/q)/t6)?ohHaOcU)\X%N#5Vaf&%H%Y!3`=22H7oBgUq-+iZC6#B,84f:*ZE3lLg`lMh1/piSBi2\o*QQH\)+`f[s\@E,K`!,@>[MidTj`ECt+0n'fuqF;+W%Wj/<X7?$Ql@ojnp'j(FtLiL_8W&ee)6&[#k2hr:NF,9AXEClK>`g&>Wg_qoMmi;.,`4-/6h&%kqb<,%?&`X\a=aqc-gn9VqQIg@-%@U+j641t1_[YSqS6_Y>XE@\seX!d5E?gS3=paODGG)1-$2rn;+)!A.1&-i*r&E=R=Rm.Q@ITjJ@$8KiSR-RkVQMEeK6];C6b`/90%b(t$<R:=pLKD_oBN1\DKFXtD??MihF`4/\tK%hNi[BMd&6&b-B;tru'\AUk^rAhgkFYoue0NC*=ck=OR+i\dG;\I9_6];s8RN[YL%5`?'j#/Ad&E:n7i\E9@T2aNDgc)#S(@f.?-e/q&:?fN<WNu0h>\fL]<R4$Bmh-;K]hZ35f&EAPHs/-Fg]'k!Z$8J]0hs3uKj1=@O%<JYW@\UStEpe<>[<Q+Y]93cn-cUEfYY[26u)!Ch=MHATj%Pb,7KAeBnj%$iR5Cs^WEaQV@s#J$-]#Akd`4/,%(&(cQ`g-8sm1JA;%bs/(_(r%p-fI=a`bk*I@'ThqXR.4\)ps+6r3aBUX,<sBo6ALK\pm]"t"?Kf+L@[-$If^Xn16rlS_aSCOel](@LPl^QTTB%+FL[.h%Q/0<);foP%3Puq,LPq^%7b6H$*A1g=FWp'(7#.felYhXj(Lc#&1j3AN\Cd_oo6tIs\;1S!3r^9hLMPV/2aN4Wh@:Tfr$TkMRX!n_%TYnaol,FrTJ.>Z$Mqo!d/n2`[Gd1JI_prWY]Ic0L(9?q[d,@L/Ma)e'^EB9J!d+5%M!eK@_o2p]4qk[?3aA1?'\i57d,F7L$g0NI%Uq3bt53;+B(*.ifLA)=&\7g10k>f#43aBUXl\Hap(`e&+lM1L'\2Z>5(?Ri5%_ou2iobQ92=;-m$6?9)@lHl4MqE!uar`s*MmURJ%b!1Lg([GSE$@`7#/p]c.#k"1W_iJ[es!-`HOXG.?X$;1G(Hq+UL\X=$E.pE3IfLLl*>*9!FL[,9=/3$)TYpH*bB<#fV00=33aC0`%`O"1NUVk'iOe?N.NXhE8p\u3or#k"eE&)?f%MuD/H>KiZdGZHLC$,K`[:!@igZ4'^91Vr(5iU:eca7rnqHgQKE`E`MJYpHao7=O]%V[9uB]!8<WjcgR1=ql\Sl!5/Si-`*n8I<mk'$;XlEU&*q.NIbZ3b-aqba<X4F%OZ[K:s<@egkjaTW_9aCAN3]ifV*N;b'\D(XCL7%RXSsWL&MZ2k%'emos$mRq?;&R]$:i,H4'+d[[mCIlM5tMjEOH^WD<oN$[r8&\fT/#o?QF0HL?Yh?9%WGSa1CYejW:eQ#;eKP1Pp`%AS:S!e&+?@!O,VQ'rsXgF>t9MB7\[\A.QOr-+D)<@^",%D/gJ>c/+j4k<%9hTMg0)dOd8d-h%C9V`')1MlmLeTJ]VCE-%q=YCoCS%*@O;VF6ki`U(Ap!`sRrlY=kc(2IMR&l\R.>Jo]ico5V_)28Q#[`hRC!c&Dp=Kq(/ih'm0##B'Wl`QNVr?Cks2QK=UlOU=0m%1lDM%2dTOu*pifMdX/0rY+Ro`>n<u6Q5n(h#2$%jr)WJC5n'rka'0cULt^7p\oQ@W5oWspFt,HC1:"NtEgo^N"G!`s'mcS*H<iN=Wd8^*%$MDA4d-jGVjX0`u<DLSX,;d"2:0iZRQ(M)YA/VCBTCQZM"%)3tcJ-m?h,O>F^E_7hTPmcT&HT_QG!4$NDrX0/14Li&Z!K)p"a/2D%\6MY1??H?,lAH#`7AuuQDj!j!9H2L)FfrI0ZoLn!1CcMmRS[h`L#WiS4qY8Qa\BCiW-)DK^RiFb3eI2;qEsCBNL-K#OOBLon2QM$%m\F%UGZ1f=43BRbB#j&LMk&'\$:i.hMKa"ucXN;/NN*T?:$%1e1M]qm_7Zp=>mJ`Dlonnb[_3tFeOa<DA_#/_)m?<kj=F37mZ[gU%o+`<gQDBsii,s/]Cb!peLmK&_GA+P;6Kc\=S<%@DI'#odGC]bHH=W[4eG@51B^@Q6Ps$#4'8%Es[U[$s![q\@_fY_Lgn"dfJC%CU%T7`L9?N2/W$qiYm;6542o'=QfQeZGQP9=uG_!uA!mQq<3IB37-?Z0Gm+Sc(YlaI-s@SuFuB!'48dTX/.;HHU*I5H*uQBb^N3\2.Z%MkM&3*IsZHm1(:\Tia3TPai9jCjSOS%-5Uir`Q.BTnOoGERVjO@_$oQ=Ot]i$N#(U=QVWfi1AM`QW"D+><sejT(-N45!U'"M.Lf?%#m+M,\+ru>&TO1Bp^pZY\r'Tj76PE2J0BAIVcX^P1sdnApSYrMT2?6Eg*\,F@QA>X*K@%<1Wpr;q,8>TTbkJHcBC?!QhsBp@9:PK%c8foP:P+`nUVh_0L*[<c($NqATp26VL0N9bnbOGT`<k&'pXS[ofC8W2EaB:IqAChVBj(AecDM`*VUOl*#03GQNdl5hKq\Ds!UY67%2'[)!`+UD]'i%5?]+p).<rm!F(#`7oo=j:uHB)rdA6n-f^;<;UQi!d[V?3`CI6,gh=/5'9Brfid_;`oo[NL0-bKmAN?Un;WBsH4'%5:*c%S`U5:69VC)JYCSbku<#eHQCZff9C#si\Sg9pb3;B?A9e"Mf^<[?h]^=]c8m%\B2@X>ApTLDTj@bj>MkWj#EDJ0^gp(n9'0t%7GN='pF$TNUbI"m/MB5dM*6MQN;7oq3U3qqJrX'$m#77=WsSH!h:k>-5^^T%R+a)nF>T2-Sn3;]A=:6.m2*n,nu&GfQ-0@s.gY0M%1d@j0?Hg,?qF9:`0Yi(&WRSQsCUBUTcba,6DR*AaqF$]/qeXp[0c1/2?XF[D.%2Pf+)@A/d,t)))[UeBUZ`rQnQ*;]0iT_-^Tu2#%Xn:7RH$Kh-^ROjoB_,u:-g!>G#a.FHc0*5fI%K]+kd5cKksmWI-F4+F);@r$RlOk0KIrC*WT;]]S%?Gd#9=%"?1CAsU\:2/[ga'N%Xldg-dHgYQ)#_q..i:o7@*;qW[Z\V.af(.5_U`@Sq23jnD7!U&RQeX,D.qS(@t)nq,]EChGa\MsEUR3=T>!SHd1of-G0O/cZjj3A%06rN#XQQq>Ark8I_?D&hfTZck<UFIXX!_0)DIJ9RWmR#Y$QbCI`LE7=$WAOC^\:)T]>[?PW^'K\RUn=6@%MOBL'a6,g/IW\+5#eg%l1M`X1+sLeAb?;+Hdd@Y*2hf,/ncOHm!#()LjUDSah&Ug:L+Ct4aq$2N\JB0^[jZRB)Aib&F*@Y5P0pN`,apA&Y]%";9%)tO3Go6%0U><0eikL[[H8.h(C?qQ=-^2tX3L0Rkr+gaI"W/ToBVegk(AB#Q=bEO(S:^I=XDUPe`]Of"cXRqm1gt]+H9tgl8-!lR1+ID2S'h$%:GDCZ'7>p#HAKAhk^Mk4NR!N?_=5TWO30]$7Ob,(`IfFV^e.X"`YS;MH1G0ep]s"BY2>$E'IOZM:ASBi@&`]@2]MO2p=Yqa36HYn%ZPI#TWc#We[-,q?^U>;WS$"EMCj1R(UYecSo=Hq+5\![cH3NGSmY-M(;rjb-8<OYQh3j`pI+NGs_*/1%TfG+A-^NFmqsu(!gVS*S%E4YOsEdmLX>\</]L("!>As-RI"+F97Z?=T5'!Q:_a!R!lO2hg4s$KO.Gq;&'bQFs5`jT5TE_*llP1f-T.i?:pNlkbk(75Es4872n%[Y^?5D3*84I7=p"KB/i[NhECKUl)->jo#ZRd<ofAaN:IFMU->(2arJXrN=Yfl8Mk5Vr%!^<RF1`a,+eZ^9i/NUTZ7#i)lG(-J:/<%V0T+1XM/IF:<*k-Xk@)ql,XC?6j,u%qB)J/Wbs84/8RUpB9JiESc,\i0\"^L2<#h9Q9Ae4Q:g-1nBZVu=d,gYUAS1.lOap\2u<pY%aAT"N#>F#R7O.t07bi/+];kj>DOm.G&n[m/p9Na\HM<V3p6:Q<Uc6+`U2"4(Q_++o3G5nUBA_$"HV]/<EB<mg3_hA@bR*OLDQrVa%S0kQ>A(mT\7,!4Q5hc-`QNZrf%;(*,"U_><"j\ICG)J?$perfqiuCS+B6`NT$7<YGLGK.C(Rffgh9&AU@n[`dR.3B69B<pr3<F)l%HcAaR=(-d8f`C&?][&:<Ob<+<4.>DA%PRk23hu$V%+#hn\)8K=)?VK_=_"ME694un5JN0GdA"`uR8I>"8h^)=pg=1"HSYpQA;CAJ%p.^tMf!BrbPfY1OSH[peq22[AO]Tm-,8^e*;@MZS#>^=D7,o`dOe'3F?H)/RY^>/4iO<PP#5:CuO<KfSfaSEue2)qM.L5f-!>P(:%GbKG7r#Ce`[Ul[r9t=FLmenf[\D@42frE^p2p>f=Eg::3iH1=Bf$$GI.LK<\QS4O#+ekb+%dE:9,(S3.oWUU?`JSsIQAM,B&g'LZ%FU@<SP"nHEYLg5g@Q>EUZ25ha-^gcI92G0Qqq!8g=XI]^KL""@p3sNbE3+lGH9KIVpXo`_%7e&Fq:9Y?Q6T\V@D9R:V7.PMY*:AL%K&79Ybe))-'99JKO"\6K0`JF>]RP*J=T\,CPu<-2V7-L4CpJ+TZU*$oFHC"Lo3DV9Tpef3MC%I^a2DB-I>=e*FriM0@H*Ca3GE=,%E:.%jVWW^;>i[7t0t&+NArn*,Ain(]Dl=D6Sula:b>;+uDYr!:_mhm7GtaM.^NEXSMot(=R</rt0Y#n8N](@o!oSiU'0:&kCi@.-%S*.dbW1*B)&ojr?kZ.],Yj?G]eZK,R]&raFJ"QVp5;s%;r94*1igC[1](dG;\^gnC7G*\3:a?W!lJ;#$^:t`h!33[BnWi4<@+X?_%cu?_RR,;E2&TuF4aYHij'?HN[e&s713lX$&7Uj,S&(FOs#MJokl%ONiBccJshT,Dd/'oT29hRqK,&GsM?OCRi1(<5-I1Ku!$?V?[%1D4%!9,s!2T?m_aF`>9s*H-nMYj8KZ<0A0[Ea:TrYdOgTnSETabVlbWYMWubX=l0"g%tLIjS[t*;QO`5*">,pfjm>7I%5`V/3T`c%Jq8p;D!Y<D0l4u!a`iX1OJ_P3TBd5`47QWoA^@ilO6*HQcI@F!*%kjpR(&K.Y:dYo/BhH_+%.i"*5Zh!;D[,865APrem4PZ;RgEb%YDpMO,!<Cj;)aOWg&6aU$]qDL58qaqJDKa-iY`nO#3up"I'4TUSF/2&bW\V"aA9.X14u"idr0n4=i3GpfZ4A-X62W8%jX]5PNuj>%aM^16):VZ5LnQ#("7YBWA%g$sWnmeaZ3PKdg!g-oA[CpF(\8$\INKPHf*q#HqDZ%nE!+YL,ZsJd(D,+%TWuLpQca]!R;?_YZbrXQ%:`mU/T$5cjn.[EQ@"p.@<JNh$*e<A_NT_f0>PTVabAP!@C=rcUSM/"WfgRK0G3*'m7EB8QCf@0.a%T6Uff;mIX",ks`c!$X7<fHe%&$=,K-=4=ac?eKG),/t@LY^U)4i06;@WcI,!d<&UoUq`0=n.^QamMNQ8^Z-X.MR6Pe)4KZ]O)R.%Ue6=ddmK--h21E!aqUoO`[aX%W]8B%lK3'_pLsbVSM_$S]L?Icn(8\_IZmkoq+Y\3k6D+<%d57gFjfkMXUn@K6GD*6UjpP%@(6:Hq^c!.Icm`]nKqJdiU8eA\^^jh%W^fJI%@Dn_cTSZ?%Cl8V'o)P%`-q@Vl"-*MPoh*AfZLKQn=4'R+3.:fa?uOjh]O"$kZ?*!BmL(('&!?4rj2kgo*R<3h,D8+gNg$l%rNsD(/N+X,BRRe1b3jiGcb4[+j+'6rC,r8\%;J?70*q945T?UVebD5jD04Kf)<bT7,ghM'/G]$[faZdrJBf)kLCo[URsb3sI`HL<%(cI)V&*WYr1uS:sgqrOK04Nki3*&K);84><cJZUd2<@I-*<G'A*D^(.30%F2gk,%Y"&GbD))+=gJ<s/9\PVj*oWXSSbmLQSW8KT[%HNCfCa0,Q_m"t@u$S3Aj[j!Okl1lddmVc;X?u7h1!A!bA"0K)M!Q'[.rJkbVHMW?3_S<C3^u2/5_"uPU*.26&q<cW[]Q%j13,%.f%(1/&?V=0ba&BAhdl5,Q2XO&Q7Gm\$Q0(XT0,N1"iWnE4U9*&EP4GTsKWJ3tkR^W]`;D0$!2h92,";=V0HllmqP4Z$U-;\TC^_iLo%YogtAa=cI>`%mm4o%=[=oS@.QCCKt#SQQSQ#&(3T0W)@D`2'H!@,d5O@tGn1m2F>F5JN>]d5N#I,Cm[r$E.4(@NGSbd-o!UH!.#K%q%uq.)Bk:?q#3]2dFe/CC;<Y@gK.V/P?j6DrelLHH(A"E0Y>pV#jCg^IE5(!ik+F#OmOJaY7PRZ0jn)^-B]G$EB)-E8$$nd2)=uU%1K0<##YJob<tfi;F,JqOOqZ']-3.,Gi;cj1U;5NU+BTUr`_VWd0<TC@'_9L8OfUe9(rYB:-/n5"^JmhiQ,8F^I$+,P)*QL.M^7LR%-]8f;7X=S+CGH??W.#W%<>^S](V>W4Btjqh(T@E)eUDV:*BqiKS'#4%mEU?2/:fq9'[8!j]elrDTiiH@Zs!R;A2bq5AoF;1Hkak[%,m+5@)ZY!Z;ZLkO$VP*pnAW4k[U&[4g7n(6`Y/KW87+6Fi)TFNo\98gl&cU6;(i)!GDTDm=p)"+\/e-)TS:qcTFhN5,4u4YmPG1/%:/M.<`[>b)4#/^=>PBV!Hl%%TJsCTA:!Zu+]mgn3Td:`*hJ>+&p<UN4CL@0aD!)1:XgTrpXo?1)A%WH]S'>l^UAFcan_lZ&B'18@%GkcjD'S54(g4rDm8=;#YD65qh%[`naS,e$RD/_$Neu9!YoKCiL[O9p=5-5is,]ZLd"7ZSY2QkkT%ui?Jc-cTRG_:`ET+YI(M.YN/%--Io>M"Ni"r@J@)+SRNSc_/9CDg=uqraaBrc:`WI:3q`M[.0Q.I=Jsu!t_J7'-K4LCJWgK$r=`YQ":-_'Y0i`^U`[([&8MBpao\t%TC7?B>Mg%#S0nKm;<].a$m_KU0S?Yg`\>f;PuRH@U+qCJ(g4h;rEu6FB#"bF)D`<6(ra/b-Akc,9CRdS8:/UjLU7Gt`E,V``'E>:%%).0W)J(I(X06.RAfnLfDIMSN^;[<.aUh2;I7r\AdtXqeXRtKFnu!cI$ud&[3C1R8&*k1ZOfk387Z)5/L5Pa"WH:F?XMRM4H:NkS%PI8&>UbG15iE5@AOA?jsqFI$U&#I(snno=L=['1CU:#fa)30k7J%FP^^#&7j`9YO6leICVm*.I+hqB?(]=8)X#l.uP&"AgiVkF4_%(9f-sG[bEpr8^@d?[fL;A`&R4Q32KaS&"V;W@IR$aX_j(g"1^/bU@A*LrNmS39<VcT`XWUP6'6KWK_V68l3]YIg6sj[iIY2p2Z,;%,X"SbqXP:Cb34;O38<'0Hr39J2c;Xsq^F\_ERXMq37H`gIRJ[j[O3MU"C$-!C7nb?4Ka.C/qCjh=-UBTk^^tUp'E951%P-J+8jLG%L4S_cI?8%'BRB7"l[d(P*m?thkaR^tH_S6!R8UTCEt0P`HooD1/+$=)nO0:rmE;I]AHJl;10E0C[Q6Kmd&!oneLk902I$p-"SCcm%:2TI!W?d=@XS+]W;4er2'hhi@N'CbBIX(l4B]m+I-,:$=oao81CQ:M=T#,F3mO(l4(>i\_Jf1=5ah$E_IhLR]pu&k_b.F6G9ldOc%EZU80'/B`@DYB07*B+o5G$:'K'u0(U/[Ski:(n=33Gr$0b86F8B.(*^d--8-Us>U[Uk2W"=_VT!BZ[&:Q^uR#Z@!(?n4Rn-;=7n:%V$jm@%1UTaakOb4p;hBU*#fkr4?Q,7mM'!aWiS&@;O7[u:NQog_dSn)%p&&H]_-BX;p&C'f6=.)"=3OuS[u$u#)dRn^]<kf%-^*%%K_E-/L31Ls^@]i;oYW(q\J3h\,F(a/%1,FSqbsp7%XYcK(H3VnN^1=/%@KDjcTa8[H)BsKT[d+Ye35]RJ+0MrE$dc5elR_$^pkf%%3`.>B]`Um@G4R.==`cb!*t]nVE<>79I\NPiA>k$A6+&j53Mi3G:\/:g7/e*0;6=S?8'%=(>V2GJs$X7"C#KT&S]E9<=O-=$-/4]K%01m0!DV%Q)h:t/mCtH/8WU1T^6$BmQoCb_T-(qN0=0)$?(C6M'rURorh6\^`ioT"+bPJspIt7J!V)*.AYg/X$L[>[ee>!<<jstb6%8FQAGoa8MZXK(Zph%N8ikK@L[b^S#1HPi>ok(nB.hluPLO(`t)>r0fsbW`m+,j6Y?Uo]D+8IfqDBS/sqB-\R.?c7k:lXG8ln@Si\%$3pl5UcrVY=ID$&f5CUHqb,YWTk2'/lQ9uh&S-+0J2*[3+.NVL8"g^S,>7&B"4d>fGJZ@dGWdU5CmlcERf<7+Q@ii0?iA]1pRSef%P+uH&s1O<a517=M8UHO)N=2l4AhmY4&U-S.[uL,)jR9'1l%k.%FEtrEH+SEe\\Oo63Qf?-i3irZV9mNs*hi99(3F?ta$ig3O8_Bk%5,^*?hd;Edfbs>MPohp@KX9hdDm\G\%R:Oj',XX5/M`q$Y5nca_\dVp1=;51RF*I1\4S"2cp\o?(UZ1ZZ:H4PP3[WL]L3#XBc[JF%]EBd\Kng&WW:ce8n.=Q'6n(6ONU#".+>UC:@nHbGr8H#`.mJ%m?c5lknOt%I([b6eGBd;piugNQIF@7:kkKO7:ZFGsSN@[Dp1FkX%$-_%JM\"L9*m)65gYEXjFd:9_M+4WUkOU"THAKV`o(FTZ`ba.!Yokge6hB9h9"n6mm+urT!,G3GV4M68T/)d-BK"cS_(Kun-\oCn%O)Nd@q"iHjkZ?c,Kj+R38"0TihRs-8Tk5kNjln'@n%UF"Jq)nQUO"^I"rL6F[Ur2)Hc[`NX-,KC$l4u'l(D4g2g)1m"eH%0jWTcf%s*.n,AaaV0Q&\P4q7N!R<B(>;7"4XRp?RuWP3I[BDnnhr1Ljk;PSg4>Sh7]IS3sMDiZG++5T<ei).\g(@5DV\6paWaQJYBqAQR3(%U-I!PMY2dliHdh%>+$9$($kN\QO`08mn@7<S+l'#qfRr?9*<\"RE4`Yf-NQmAD=HH;d]5O^I#(I+^pK8L.*@po:o.083-Cp0^"V<%836M4D<ud2%dQ=Hm;.[j.H%O4Y.=c6^&>HiiOg<=*S&P3aSClXC(FF]MC!ZB*%M+AIin:,;C)Z'9S6W9IRDf,pKOWK@./_NG*5d*%K?d1h'U&]BDZu'S%u/uZiueS9KA4G[-\mr"RJ)h&S?\cLW9iuJB6W"GB5VYBRePapM-lS5aQN<lMq`WpR`pNV@O,+G4%cab(\WeK%lH/Zig6fFKm&L>Nc:n;._&nN$,@V@qe01T;rbG:LfTkI?_]tZq8Me@M$SC;Hjc:@P_7M^"0"tLtLua+`j02//E,&l&&2E)2:5T>Y%;\%-m\4O^eX+;JP;+F!M`%\O>p=WOs,_lC^N\,epiV)kX%O?DY4-Obpj<ko&d;XR4ZBL@(*)hZDi$.`R,*:nR%..W=J3SB8S7oKi%QbrM&7O%6Q1YPQ@@=uro(d%iDi9oA=@dW"m\aP>q%sud$m*W'MI,Y#)[87`crpnP=]4at,M<E!F+Xc.6$XY<r!$c>liBa+1g=>XJ%<n&=.:V-&iNuk![%i$:CEJp`N(m;*2c<0;n(C>uO%qFrM\]CL)7G$s?D)d)8H@cES#C*#X^etAmihK4@.@CW.#'QMlQJ]B+-S+Oj%GgK"dX@B9*8@S$#-`G+NG5,[H#>j(1MYJ3M5VYML0pn?/B`gS0Ui:7hV4/WEL'Jh?2HCIq-*!.,@1FJe?1qdi[n$^mfK5n1b8B*+%g%2A="N4/rHdE#>TL<sR`Z.DSfLG<VPAm3U)k7MSVtpkFl%n=I3=*5t8CHup,JgD5Ze<;bi#_OqGHZ(%f!9gHLm':UIM.WO?/aIL%gPu?FM!(VH+L'7FT1fd$@$q'14M,[P"1**bg4"qSo>[\khiVoEdIk5&EbnK\PPEW<6__fX3LtBV`_Y/L4Q0kNHJF/;In?`SCO%X\%=&&M)-]u'6Cudq^HluS1$QC&/63u64YZcq]*KB>3695i4VLY(j`1C&k`:F#,GAd*NB(Z2hGD,!?g`:;Z@&u]3r!58P)'8b2.)2N]%9Rp/),\Z:'_-pX3[0;LZr'=s)PdTT2!iajo7Uikj^ghK`Cg\nhc@?$/`i?Qc6_0;__l69Wg%=ec9BMV&p_]4VT590:KigcTJePCW%`P\5l*ZjcAOW1CiFmoJ)XR8HEY4Q,,JD3rZX5Fnr_>DA5*'(>[,Ui;V8Sr\1Vjq`</LDBX]N6=ZY#oWZMHcGH7:JJ1cbMcg4o-\#%%D$2T=9q\j.M$ZO4<+(lN*rO61FR(174.JK3]%q+p7h!RB]4jEJ*rG:fsh:aWFa@#<f7I\APEYZ%BhP0%gJ_p&?Z)A[EPYm+8AGl%Hcsu`K<5REYr25kU_j>PNGr[D-G3`?dUo.6Q^3/2\u_V5!t:<hs*SK]Q4P/AXZ<[POBdSe7NIPk*7QS!Tbi2k@#:-kk"';4$0;eP%U*7=,Hbm?1:r!OuS'2qAPULJQL1>]6+nFs?/mQsdA=.uI;G"'!'dL?#TJ!D_SQeHZ>/;FhBDsEo*[.TV84T.o&Vb$,XKlQ,V"5TG%0QdJ80lC5Bge'*(WkAI7G6X"JefJFlcV^L82Z0AKlOr1m>Au.?VW3`=79-tYn*T+G3TNK@70"2bIp@dX)4dN1i.iF86d?#^2E3/W%8OV:JG%79^iEt@Hi7lJ84:"OZ"Xm_A9pY.?er*Ed@R&dE1Lq8T8+-:gA9)8pjkkA2;5rp7[=U.f_jJFPK$>DiL"0$=cKHd`>'[.m%%3]$ZpC!3f@^*Xch/0Biogl%)%LhmoOG7)k2A^?2<krru^el)\(rabbr&WiIbGTu`TlHJF>1UVIPJCMLXSl9t18t?FR5RFiL"Gl1%?8u#'^h+XBAD6_),]gqc*n6D2q)C2hYQJd)&`?gH,VD&WAB@'AOk3(3aT`!T5(F,TP!h]ojAhD^"!&:`X;)/@rtu%7[LWIN2_<Pu%@NM%tA-L0\Ynl:&&4%AAOH95.*X6`[--KE"FE0p5'&lLM5jOga@;M7scl#[aL>p&Z$)rr`a^F)lW>C+`S;,1%n\G/Yk[o=d,,PcJ%&]h"R%6$9.eC1NA\g^SEm6>3),pVlBBF]``8WTAmC,f7h^)V-U$Vle10a=g4`C%kC\4l,c8o]t(P]tnqg9SH:l-e,ao,4ihG-t,7%S-#f6D<tr<euce[L4Rb.+#f2I6--)@cd&8$W_*lj&j-(P*;s0%)M>PMFZ(5-?n>)OE"fI<p)<A$Z^k;pW9-'-k8',-3pGM4g::eA%j5.B$\])S]Bt1XTG&@=!droY8mG*<&Q_&;;Z)SmmbTPAC=HLjiWqq=c,bbaT0(Sf6,)XK/!Y#(9!R`>1_@&@RH5,Yij"-qPfi,YQ%)Lpi/_C4>lEu6#b/@:Yj'<kHj\]7Cq.$Hh[^<YJb#))'s)?pQE&'=,l47A3\S6?=N3'9]cN&38hjhUTS^9TMn4cDI)-0^dJauic3%M=`#A``#!W]!8(CHUJ6AC5\!tk[I_NG',THke.LV3+*0Q5I&SUqj]5(hQ3AW\;NL*Z)q52F=fI5X?glfkPP?j0ZM8jJA8[jqX2rp%*ulpg"WN'CD!%VDXc\kL;Kt@fEmGMjVQodSrAJ]]Um)d;^@A8ce7g@C\<3:B/Z%B>_CaiuBdmVtgdY&0Q;W)]S5))`-%@rL&;H1R%]Kf4`(K'c8#%HJ-+fA(..Hj^AKq(1UV,.lB%HQ#Q.0]Fg:#sf<.E1DYPPP_^^K\#5gKNo*Uj,#[?B3^TR04>tM,&;4:FqOi_?6CZ%)e0SoaW>g?hqd0PDqk5`]Po+1!mDr63*GsJUZNF^m8kT=<R\*u&j`g:`fO_4*VBk:@\A^.`Y$7F-S^3s<8ARrH4g<I5kU\d(f#;)%mO-o$=aZHR<akWK^c)Y_ErN8_p#rK@)"u0?SE2tV&gR6)`P[$fI0I9PnWV;(-sj9J$%1fV<]OOT7F#O(mXdT[q/[o<_@;7tUuNM;%.E&DZXF?Y&(l5KVcXPC!@O`oi;0ik=@:U`?\3!bbibj-K<'#k%hB),]^bXW,GgRIgWL^u/IGY]#$!kK@CKJ9s=N0ueKeG\Z9h8qd%m5XXS8IWgf^n8T9EtZr6/QLZ.3>7&3=kE>9@pB]4@kA(]W[0hlHQ]CS'!,F/Pk0<8k913UOo!#bS%Wr"!UK%qUj=@6RtlN:p/Suc%p21om!+8X4]R2%/-FDeUW;K\X/KGe,VY_3)en&[G)Ahn*q$5d3eoP:8HRHi[Mj0gOF?/\lKF&?*fr>9%q*Y<:^X@B.Ya:/FjRq4%%7UX?X)ce$2]KFsgfRnn9lT<JJVI&?8&q$:SkVRi*;()U"(Pr_h=iLkNY3-i;Op`1T8O'a6!gYjP`dP1>2$ZoHr7E:o6\#49&1mhf%ph;DSflJu\<P])CB30g`XU_!TGGa.="^%hSrIQE0C6`(Ol6;h1(bB<i\o_te#O!^*"+1'89B6/?EM/7,Wf,e,M0tArX"=tY=H`15%OG4;4X',iP2-N9OoM#&W$Oj!^5_hWG?l,g[Y"%pYa!3:1It&?N_\;YM3GC-1pFApi8M9;jG]nO.-dV`>I(8Sk5Xtgj+qWb<>"e\5%N&0O=R")o%T!Rpj/`?c5HkHY1f]Tig!_.t6YIdK&*3EIJR912sLgE%7h9Aake\@ia"PmlXP#JgpHDR_Vjn*L-.u<daXT?L\nWZ9>%>t[FQaFpthq#!iH=R?d&/2dhA':ZW.+B9L6r';iGT08tImXETjL>^0U</V1:$]'1PA2".g[)(5A!X-+2&,7tr^5ul<Q459/XRNi&%c358X.5$YkCEBdLq\UAVlY,HRD,VNg#+Me/TNZ\?<53uf4Wbf#T!`fOmQ./580XiT>0:e+Ki$P]3mu!iKh*IS,kGToiEq(bE/)Oa%m\1`Bk[?+2S%5RF<l&'\"=&kGi[`>XQ)R`JZl:PdLWu/dp?p5E3scR9nMR?L+Xi>bc%M]ZmbX#uJc-$\cQTq9R;57gdNiAT4!e70%G<I%<fs!g1a`bG[Pi\+/rPUlH^sM'D?q4d`P(G.HQDV%<2]Hp5!NVt"`'`iNJ\+.ukWn$c%mPP7/gn4udLQ,(hsL,6C4nhSD]sA4%IkU`<J7rqi!FMqG>\^5]]oc?8#)2?9:O(EKJ4U^m7O$8"08RCrd,rl85n@Z/SK_AsDfJ#DYq.fTNAE9EDST%oNA.Tqf`NQO"6n_e%+0[q(#>4Upa"fE(J7P#_rFGFAJsCh,EBi./P(6p+K4#I!.4>;2=S](f`!bJJ)OFK08M$203M;9&i3b:N*!3&p5Uh'RK)O-dHEs3=%Sih8ZGMqmi2iWm0:Q;^U+j1<<6:m"Qno:m[q&u45pKXs3p5=h!T(i!:!Rl6giB:J@?c6<J6o>6)9&F,3%ZH:r:D(IR6SNthjR8-X%'PdaP=$D$:8IcI,+V6'Y2h=El-2F>>Cc-5bn7Idtkhu4.EoFo2H=<RG2T+b;4Fe=0B#9p"7;^KS"OIs)pU;jg+S+J"5+Hdp!H[$8%K,F[s@*Rm!!&9sBJJJH2F$Kd=PX'nNil:H5-efpaZh"=.dROkDlgY+NX;2;p!b;?+)SO#2+<LS>$^?15N5;Sbj#L9,'ckt7]X'pt%XOJO=pN:TC9`8n6P;,Cg^#;"QW.P]!1VQeh&2.X)?r&jo+oV7Er<i^\ecDLn57Sq:&+3%r"$G*5_T9KB3$+kW%-TAK**DRN4_+^U%=Lo:W7>U1^:#HKI(E"TV^T'rk[)3R^ZB-QO<5&C##N#IL&?t;J&Wl]V_5lN*"]XQ02intW^`NATOYs<VN"^\j*/=&!/&U+iTMcfP%!?8ol"I*(5"'Or:"gT_ID8)CBA\j"B8P(F#GLp;fl=V#a;g+uNIQpH5!g?VP!IpXA*\hh)A[1KREM+R^aU!i'1BP1VRMA`,Q4J;D%,OZj#3pCTnF31l,d^n5ck_.sPLGu$"&JB7f5Sui?BnV/A75bKpooF9FA."f/<MfC,:+7.iaO>UD)+&5*pes';-Wl_i-2r"cV>]J]%c/0f:VeXp]KB7iE5?60]6>h(T`1O&D5Jaqd0(GiSg<[[LUK8fA<)*7(YhUr&VeXp]5u53`i_S+3T*EIJ'7[$Zr<2]QG)8F`dsglb%jX,gK<RZC8/2p9#WLA3ua701NGW_OGo5r:(duAB.Lu`3pB/Q][lk=!']/&3?Nb"afpNg,V:E@P@+i`fiFJ&,7T*g2#@$.8TXM-WL%"8SAi#,9$&KgKW*k&*OXUJN%CTuh-)oZT/`+j$(-B88ad*0i)ORRAa99`nut"qED(1.c1T[b/fk[k4]kcm?=T5NtrY.X#nrM^".2%I.@5]\aWP+Ut`M3pt6OM)nj0M'^I.*iL\Ho!R)3KUY$lB[e!PE&%uIVN.Qf$EI/6Fm:9!]ZUUTAUbY>Tiu!?ilrLJN;q@<1$m&ub%\q14Z%<i#G1?-d%LX0&g31VGDXU9!7+gF][=(J9L2Y"74*$Ta?b[I'5QNd-/gi8[`=DRU1Q?29+=RdJXjM_C%S\dUmrQR[[]Arh9%1*4S/!6u7B#+tJh#mhh#Ibf^5p*>u5PPI:(#?.:.1r4X_^XG7p-hIm6`$0l%98D3G0;63rf*<hO_R9.G;!kGc'AE?X9.Dit7N\mS%_(eQn0VjDF8G"*hCkqmA\*]-Qjg'lY]/fCQqW6UI^&e1M[Ogfe3SoRq9X:&W_Q"7%?iP`jh(lmNDk%=oDsj:JN,X=RCf&@Ls%OA_%Th*BH\dQGc+YW6oh>*Z:F.0'_Zfu:Ok;FRo5,*_jXlXdr0f7^^s5&m=d=+A7GB`R=+7YLEQ(ifPN`KX.'Ls$Pc'b]/Et;7+d6u3X%.>EhSGq6jB`:SD$nSYS(_[FbQ#Ud(-I'WpC2jMDh1/)Ge/BhINL=rcN#!obcGV>3!?_]$!0++Q<j$_JhS#Zu6*F1\#,='.jYFit*%8o0uS(6`Sg[<`>b_3S^thD+SlH>?Ch`5>-F5@V-U(_(cA/4,Oilq0<JMd'9^@(r2f]OlOQ-g?KlLV@T]?d,0:`gKE!q*Yq7?Vdh,%kTN[>bg5<SYA>\c2WdG.2-LKI:J&3(O,`FbZp(Gii;DCY;7/a:U<Sa848WfQm\JV/3$M:[[):_K.3!_a<NKIl4X(ldaI\Le0%Zp#%4,c1.E*Z0B1_@tl+PU^i:^AfN;g]@ai'&5o?[^n3.P^DrWbCg,M!Cmo_4_$cr.[[?c\X^ohH,bG(kieSRQU9I+9/p5EIoJ0\,kkA%1\)`DHA=9J.[Vk^BJ+T=]aoHP8&*PX69QrME?n]O?Be,/+J^(aNAPDtLb%;1>aJ:M%r@q@,?W=b7f$q0[o)kHLVPfp5R":)qm)eQ%^#lg[p9oOm98eRP30lKG(4.d@.:c^qkB%Kc/8FJTQ]Q.V(__i@$O"%F=_EfJ_q.Ac""XrK(GSH?q%QN#*eG7UJG'"SA%Dh3`7B?E%^(:]UU>GA7T1L\X/5N&D)Jq#jl1su@,3:4d'07#aYg$L=lL-pT/Dj_##g2FGA4*P[*M5Aj(>]@9??*D4PeGRl()H(qKBd\:,o<$j%>SF)Em%^)q./4J0;72#m%n0Md4;hmmG3+Qg@m8CE.+4,MaJl3q:p=Akq,+/)!i's`A6jcsT_J+Q0'mr>@0>.9GqUj:@^Pd+Qh>oY%oH$2fEXrj=RZ=\57dWc0pg=WNl]u6T]Yo=0.WQb<./3M@bcrW^^=j85L's.M8Iio)<[NscmgaG\eL9])=*F#&3f3]H;WWQ"O&8#Y%MA/oM(0R:7lX](8K\r55UJTo/B_L^\_l6]+M85;OXVf.__gDuF.;U0+,:N_U"O!V7=ij=G3,8i2hdJ#',0.RY1O9cUJR*P3_gi5U%6@_UuVMSH'p)0EWIQH&7JZ7V=7>A7dWgrO75PZi`VGF_!3LH5`ND,d_#>fP\JV((%KKaLlFGOMU\Il^S`><)/,]^k"l<jWLjQ6Z(%XZ%En`Cc)"k5u)%Y6\(A+H/OOC!*c-T"O"fb'irpV%di-9#A?cn=MOac&m@ZY+<;c#eHFACPjPY@R)-pfG%7>`5$i4YplP\LiIu*%2`/L<$o'Zuj-HR0Os(&%j;XRt8qn/j=1G(UVIYLf:6SnN@S2@l$g]u4`@ej^6p5`O$W=Y\HaR&FC3Y>MPe@oK(DgYd4tCib_/`uX%lEbM4o9UAeS\=m$gsn(rj[Ik'ccTNF^oku-?@>lBC4>j%c<bp"mV3m=0?[[M<pj^I`Pk:!X3\po%2/tOPeHppA?iEsOd@DQe];$E%3ha"]A><c`eCL8*qQ/K&^j<[FHhCOPX'sr?7G4`fb$>JDb)<Q,T9W@kai[8^=.bbi)N<d4$$=^<=7Za+cd#jF<ha98K\DmJX8h>h%[C('Ws5,*N^Et20HL>N+%IjVTX3\po%HRM"frNHA>n&+N7G4`fb$?U#rjg^_cXJ\&ac:9^:h7,;:F'hl+s41^;U8"kXN%0GE`]SK%o3RNl>.%P1gsprH?^AD%XI3YYf!e=2YEZY&4r2u-X'OoLY%G^p62#%JG;Y.7Mki:Os3N]WaXIG@N9lChRCJ1"P]JVqg;l`Y!rI)f%,ADmPMienHfpIcGq(WJ&f"b;*X*<LD#`hG+q>8.9qoZQHo-^BI:40&Fd8]u59Qrf3lUW1k`WJ&+#FWLkL'nk`^4\I(L[],BFC_C)%8?k,C!O;6%./UW5>I"^T*6nb4Y3s,GbuYH;)0W6U2t_6\U\G)Yp!9-g&DjNRlX7-KDAYHhXSh&I=UXj?<Jlq=YIuIB[\Gb3:U&_b%#I%]*h!W`EAe2p?fHc+nfJ1<h37u7E1%>715PNiL<Cs2?8XlfNQ2G0tJ?u;WlYB)b<NFX7C,l+8jkt#3Q*VL']1pUmn<JIq7-E^3%997AHnpjaZA>CYSKSt>gl"scD?f-Ufo]+Ec=is*QlcI+]?_@8&X`iJ\#E=-#L>F&,S)S>;2b23/Fm%ufRnl5r+.E/k\*r<[coW^_%eW'L5!RQ`PoKJSp-1p9)0@&U5B&EU]"mq9Nc+huU5@"+5PtcSnI<t2`D@_,!5APQ9cBF=V`Uc=F<MP?>3F(sJ2cYL5s8D5(Fm8[c%%QCL2-kU(kn4(8@d`Ze#OU?sCiRYp7]42q12jG#&Id8H<JoAB7n<`OtQS"p1M*;/uj88kY2tlXH)ooJJFGmmMefB!kPrjQOs,DUr%XFfcrhd:g3V_`P[B0^B"3I9lYhd=cC[Si3i];Y5W<F7?IDrlPnGLqo$A"A[-dr)Hmmp2Rk0(447nbtIK5'hMIo6rdT7=;B3gfpDM%7ka$(NL0Fuk3Is":L='rI/Wa!iOAOEhHt21,eh!GO2B/BQ]Ae!YOmI#hl\^(GNAc!]C2AXdNiRo==mPU$1Pc?2=_hp[cX(U7,u_7%cNP$Sr=8P9%!q$`UNla8_lkP0H+EB8$!2qs3ETXD+/>&j2#>TJ5.8;R&\ihg2Jud;&4Y*c%p\CS]A$C_?2aK;UO->gGqi@nKAF3;%e)0rZad8?TDk=B7o6]?,;JmQ-reTl:%k^%O^3Jh3&+=pj[d@4=7p!tUJ+VR$\[NW)nDin>(%W+1]QEFOfDbL)itkdh4h^dXfmipb%C0tB=<]L't\(5oX\THtnhu"B[pZ]W6hdY7:a'W?OUb&sfEQ`dM+%1Jm`p0AVkhs1Aap/l1A,)I-k9%J/q.\\DEJG@Tj7m&<ksNSM%]Y4sD[uW3;#NfH#(MHf.Od5r9*DW]QM,e2[^O,d?+9-VG.U21N.1[JKHM#M+UXPPNI;Ak)@K#\<,j3mPP$4N'PJ)GK,OuhT-bQV.%O[&X=$[N)RT1XKUFH2tcS1QD)R6SC["1lgB?LLipcp:tAq=Ehu\+igVI$N]5HP?P"`KZ"hB0ElBUYG,.h.Mf<2:E@f7g/2q_7d=T%]\UpN&`oM=ZRaqjG]"[EHfNMma4EP)=dK6JHK4+PZ_'I2(N7[Xi99&"g!p6Q.d%jZ3V,W7a5u@M?f/b6ihq6O>7muclM:D/hn/k"%''\0to@=0(?X@'R]EreSY?n[?l^oeWF`dJ"h;A.NC\Go=lPF(=nb1#l*hA&lHL]i^ASt'cCp*_Kj\g@(;Ko_4'1XM.p&';(gq<r1%oZ=Pt3BDGYpQFo=SH?p"a0/hLKF7_(`T)`7:N"tdp%ZLDgR!Cjp]pg<o6rK0DnLiI*i1g`mEUg]IQP0VEO%ZKkPU#MY:`&Rs6B.G%PIiJsh7nlBS"JO3qNK,"GP=Q#%d:X956Funh>qIQF;?g>h17)hZWm/?i8:$=ls@U0^4:^:mac[j+T<+)HjYB$\2X:lp29o`rq:R%%rW/V\`U98jH!+5/p?-72bEe@F56L/=(6c%(dW5odN*D81QSiqhPBU2BU02:h@=Nd)V.Nq`cZ-->DJ<Ch$[Jq[=U&Mo2(rt@SS%BW%OppuZZD_:@>GQ;)@Sp<MT\]?d06McKeRuKIG@0h0rlj'oc#9895pn65_BmhK([H.^/p#]uqNdB<S9&jF.:\]I?VV21[D,S"M%oe8%Kn,V.E:[Hk3P-)<(1EC9(eS1,.>A*4K8\HVOst(,nhl:jC!,5ng0I_&-HFu;*LXtinEY4H*qs7*r_2ffqK;PcnL#[pNrK?5Du9-5%^3]e<fCg.t!@Q_$?jCSRrrpG$/=YI36d#s$?:hW57-gPe_If+l/9XVWMfFRX>^kL!(PhGOfIs>c_?O;.2f2..)CB`SP?JWceJQ&&%#&VG>hc<rIq'Yko?^N65"2riCVV^4$lu'PDHZ+E5ddrYE*hPPYH2.3k=-%%L/+hXN4(A)>?)V&Dmf*@g52;E]:d&tjNDGHK`*$br%6;;PG(fPPAOI"FOX[kBXH3kGJ4aA`mBj;I@[oe)cJobC'9U*HA/"?5,ZSgA]i3:TQ4:V3<gQ6a#YiIZ";]5Ea75%1l/ZtU0LZ@B1%1>77cm1KXHq#@XS/bOG:-JP]VDf/.9&Kl#-"1.+,E*BJ/O?r;n8Cf=rlC6l%#6!2Cj=N48W[<"(QFO=LGm>@TL*jGfTQg])4LE.5%Lpl([N+kSe#=9JcM/kR@"PAJ&^o2/2&:#*q2[kh(nT?r^*_(>%6f`4iH&-k=d+k<X0WGct%'1P+#_pt&&-WnQX+psjr5qA@+R#rF%&-WnN3t>,<OU]2>"W6.46Nm>lNE/a\0S5%7-s5]3@>FuDlA,Q&RYF*80Y3AO#sp>Q=guK2SLB59*,]SnM+kn8DLp)4c=VmHQQZ,;%QbeGSNd"<l6fTs"[RFrk)@Dgj_/P&_"BT[tP)dqk`2$/dYG!=d'D8/%MN--1RdaK'RG+a\lt/o7DM>%AXn3ODX"d%^7MLlh'%:):%1!MSOcs.9Qk09>K>p,R%9hG+4Q<Y?dK^YYRHuG=(ncHk5Db<?DZ,FT4O@">kfSJFd$24Udl-DsA!Q7lo!#e]YJC83FTGg`pJ.X(;%YS)]m[NqP36)mbS'O)u!eg).>,R9"",V_S9eX3!1,pnEda+S%t_L_bKQup1.C+Yh3>3@BE"!5A<i)6R\!H)Eo3[A1L8\cF3I>\Rh%p9mM?MQT>P\!?/bQQ\>]TT9O^77'AWlF;7UW1kFlLa%V/@SB4FL*qPGW^pB.AgAu7S;muOa)QZHl*+"C<)feG&eruW"9jLWJc[Gp%:aj=_9PAY`&rMR(#].MW!D>ia<g&88%&nd(YTt8('bq52N._:eVo"!5E]>Je<&A95&e(dt_u_j7Ys?.)=<Mo0$cnVD"Vjd$JuU#G%TUAZ.5k&k<&4I'3`L)Mb%8Xi+;,L2@c*Smlcr:]e22MCRPR7I$%:VTTK%9t.!YZK'XY1i*ZV:$D`teaGA8;Qbo!)`05kiNm.ZFb`%)jEe8^e$A9!0Zt/TIEGDJ-j4T5H(;"#`'Z0JSInJ!JZgmd$,dc1eSGd"B!2?dGm2_N9NUS&60uh8eMK`P(Wl?WBpV98gpXh<%MEJ%#mOC$70C!ZdK$2>!@p_uW0UCB?oWuJ<Cm>s[Nkl>6)oGXMB!2-2&-]?;F3]KP*j%N3$p%A'b`ur@mVoIK0hq);5#F1=D4""=:e"D%(.=;&6FE]M!^fRfW(JNpYb`*Q'VL<lX<s('g/=Vq!?j?\'>2ltC>7f!iG%^FEsCg./?bP,huN?N]^'4g8k`Fs%b=LiacqV2Q%5*4%OWpu7BRl^\>UY@f.):@n.fiAo#6gsVJc_@'Les3n*0e>\$ePI"!X5B/J^S>=!%k08:k0euPf"IB_uPPmN?fZ4'KH;X.H,bF@e.uV%@D3RtBg<9mM\7h<bR!Sd$?MdK$fT&)'4)miiK[js4IHhj=!XYh3QsT%"-)I^89h<0)UHfo,'a2%L6oeOD`/a1<_/,)9!Qd59F80Y%&eg`E$`h63A[TMi<f7m&RLBM!.h;&oo5kp)a5QG,&lTC/pBn`<f19[T,;Z]7bB,3n6=_^HCmr^@>KFE&OnEh)dn0Tj$*!m1'$s#K%WVs1:d&\[&gM%saQ%[tB>R=5_Rb`Er$)kj#_<nTB^e-q75HP'%84@SaXTUIrMWo:f$"uqgn%N!4cu=m2ITd%kQ5&HJZkC`M'_2./%&tgB_nbog-d&\\agM%saPp?G+E@!jpWX.O\Q%3UC#6?og"L+&B!^Edi-qG?cr3R*`XJol@Vj2e0Ugeot<WY+NM@"`8$#$bH=C=CU%,tC`Y=:8TW-B\u]&iA$:;+PPl:_=[#kul'q0P'c8:YC+/%J7qE2IDFmG)%fAD^rWk4D+0l:3/KmfmL'$W?&up^8VCCo9@L84@SU!%Ab4H>icQ*Eq5U/kS\&]E@jtIA.@[Mq'WK!;buYWKkr`PK)Ga3k:YC+QVAL>nCqckSTC\GpCH0;r4D"-'QDS^?Zh^IBABn+3YOFB:%o9@L$@uAH<biYs`@WENqH&\\gS>U2;RSlO+BLG>R@H4@J#Q^(`\E59cR,&u5_+!j]nnQ2"RRJ5C[3AO)O1BCqoVB\uDCq.m.lF'*%;X6%fo9``<U>f`*Ebf6c&[R+#@OaeiAfc#/JJ;k]+h(L<>T2OfRn?8^RE+)di.RYHaK:`(7aDR-l)>DcSpAP^"]>VpLYQ'9WXS8+%RA!fF)4JV$RLp9)o8m17,poUG'U!3"->=NBCOm1gjrq37Q3pDL5T"r?RiXs**$E3cMVuNuUPEjjL_X+*UMDl11rZ2c!NSoM>UV@@%1/4`6'M.<*I$[8(;>lmN>5H2h[IobRd<\pil%aXf")35\1#F9M6I#qVbcHSRQ@@&%4![6f5N]Ss'Q^Q'2+!VHMN(s*],cc<UEB*`%@YUl7:`9kf@7<LIk.;Xs,,$+Mh-u6ZfT7$Ml=&YC+7e4t89)t:q(>e_i`.+5>s0a'o4,M8OYl1tR-tehbdW>VaArd$VYNF5m;QH<%=(>^;#,@Y^),=G;`eCDM4C1fneJ`M()X^BVU^L]A?7)[\,HDCpQZD%hFp<0G5UXM?cBo+&U0<Zc(PZ2%8p]3F+Vtkd_Rst5(Y*iU%]J/E@JuJG\L0R\\&dkK<\YrC?$AK]?<KKPc0]\tNP"PnIiaNgI;7<:a(rfgFPnY[rR#?-LMNhi!7G4-hAJfJc;%e&L+W'MW'g'm3%M`,(6TOH&577h0]``uJ1C7;"S(M.B>WF=">=\8-@osn`@#bu7<%@nEo)D,g+7(*,q;!)/)CQj;0S5^]S;8Ik1drXSBf*q%8.@:Ve%pR]<V,D.0rVNrdufr>aSXa(f*R[9/;\PFfr$r^0B.B4j\VJ9EAVWMG8C@5"nAVPK1nV!g7-p5bt5h!B)/BrTXWQ_k/?jTCn8P#;:%JYRK..@U.`;OLsJC-5q';IkOEAKYYm7XjJ`[8^`V4Z/bV;s?#"o.mO+0-`JuT3@*iiMOIjgf00Tc+FJ7bfe)Ogo$I\9I6Q*ZS2L+%1nPI>)"fbiPulO]HEL`nRu+6)as!p8,K3qsF<cO[6qB3D1P$l-&XKW,?5EXackq=M9JN#MTV`f09YAM3`N55_S?+"&oOEcX&2cQJ%Qsqs`MOobTr+%)sW1Qs]%B0Wu`tX`>#t"lZ.GC"#7t$_5C,j105Gjfa8Ot=MbgNAaB^2K0;aW%'qD#s"CVj#$A>6Am0\)45VFFNY%oj`m4N%(b^U2ZB_KWKVp0bpK2Wuk86[O,f*8>^0$;LJ.)MQ$Vn>-,uO<s,Al^<5$tDM,i<fMlSL+G[%?"k?/U_D`U\$5k/<2$%l&%6^:+\+d=9G43^&L-CRXcco"OSjq`9GL4Q:sB5&7t9a.=qR\iId/SU)sJY/V`B:9H-NMOX`VF6VA.;"<cQD*JPl4QgNU,\R<7$GhC%6AC&NTr2@g&l"@]W0jGMP>!DHL4P#OB4)Vk9b!m8R&37b/SY'8JU=(<?CDL$KqsQlVF6VA.Fs3(EhVZ#)A5c(@j;CQl>](T"2/Tg%F?s5Z^M73m_D,WG<p%*A3m':YVG&%0`?OQ'PK-Xb/MVI<V!!cdA+&D4<FeM:TKK*/@Ym[P+b`=Y-mZrFW[NrqV*(W4@`bGI:=pga%_PTGmM?5/qb%%G"QC(\k;J;m@R9"T,'a7LVQ,cj$/2_lj7,aK\@t*Mo<FeM:Z95"ACe9G[+;N:g+qlPhWM2Wbh=?p_MP\HT!@5rm%QsnF4FiFG2%$LmmPbCVk28mHOO9Lh>AqlP0"<D-DMGV<R.9huEPjq\p<bs5)1cQXP;\?b=.:ptQMD'ENfr?d#$f`sGWer!Ymnu''%V9%YoPcYi:XtUViV5br@paKe'G`!r!9%g4!+U[6a:R[0f`/c@:L/Tr!;p&-W.@)eM+\>TENqb&7;g=`UIS/:n0qem5=e)87]WLIL%TMFq-`IilZ>`O[MPp@DUT.W$f$!t6KCh9suYA-=8jOP29mSkGp9Dk/=R5F&$9et'@9t=1[VKq1!gkh;L.;?qq1o+SQRW><<9i8l*%\PlF)A4^(pUu<"jdZcgN98Y<Mb+4uai_,_\-Om'MP,@$6=]:"D;sqRr6CB[m:)Zu,-;D$L25WCoVqd,oKJdJdSJ7l39q$+#Akg[-%+Ur<]V`0I%(>`5(BdIkOG;R,lMtPh*\.Gr]S(HkqJJX7mRB::3"-Q&u4iN"mE!p+TG]n5igp8=<PfXqQ^_MVUVFc*J-p?]cm`CUs%VW<aa@Xr0eOb>'U-oB%/8+Jp,gp'3T\29ia4%)ZmOaCj(JJYjAKc"2qBI"aT;Ii\dSe67@6ghH,"r\:7ODmMM0c+k+KKQI]G8+Ee%632e9.%h9B!kJ(*Jco=]iJ,.gE>(:5h\g_D[(\]gE9B*hpkn<bomF"1kRufs'4\RaJ=!m-mOq+uLel9#hXIpj;e/6N;C%h5Z]\/#%NQF_T$l!YZ1/a)\(,2HoJX(lrDG!ATUuHuqP*'?NkTGu2Lo-t=iOWPf_^SKn.2cicKGO^1e7_I3*H"J=1o+T9S!&nG9aDr)bRmkg%R^b'id>3Z,DG!Bu0uXhr'XFs+nAS,DLk=-(EDnX@X9iG@&oJ'Xgdu:tD.'3N(A`H)\Il>_K<84P?>dua?&N(f>1^8Mk[M(<P\u1$%d)B3(osF7!3mpu\1hfWRRUdO8RaR=-968+6kt"_b`hY%(d<LO'BhCmq0gupDVB])0d3Wr"LrN>78Q.ZJ%4Sa\0cd5CMCWC57l6gs%8t+1jC.qLDO6K26&Yc'U*RSh`-tu:DMCm'd5GfZ"79G_MF@>)%QD>rMWQ#WD4Du%[peWo2s2&WlDUm.^@q.":**0X<_"![2nDKMd%51DM_n$PcK]f(l'6':egS&Xe[/@"5M89%m3'ZWpXFs)n+\nT@u`0*aqSG968M=7;r3tOCAhDAgL@YroB6]1aj7<[QFAd8Ad%\1Q*%5V+c'eqi>%8rl+pNS+=W.N_DqG/0E^M%q9sm'`e<.q6UHg5?')R*(Ei8=_\HSTEg3!t^N[SFPEXlQCbuXTqgV$=AgmZ:&cN($dm-%K+a7Te+P++*8+'8G2,'X]GQ*@/mJmEs12puY*"tK\nTknVSma1&pl5O<c767BtHi3DX4064.-\QXXNP?FBEghS#5Qk8U7A+VX7nd%>dYc\T9dCSUi)^2CEV`7DOS#/-0:g(8DLNk(>j5_Zs=iK0IPn,70oZCp5Y8ViT5hH5R'g+cqrk.$L2X&9X(<#f9]+O.<MK!SHYfC%bAbG>Z7eatS/2u5mqI6@(PA],?JIr$Zc-WbgoMrSo@(@^.4MHYh7Qk-.BeZY]XV*BNp!<cEDod'(T2P`L/dRWVg39gVEE4$o3t`5%5E+X8=<f:[N75GL)UkkQH!ZGJfgMaGdUKY*&TBT6>p=+>&oFZ2IE:bS0]nes83+33k<Q*1(q7r%qBB3DU(mgdks9YS>T2aa,j8M`%%J*'(:%Q@Ol9.`R`M:j8De)!#V_lU:`JdFlQFN,,M*%PBhT/gY9PKkQMAc+6N@2H9'\Si$0Q1JanYA"c)oYKl,Rl,]V"E<%dP,TU%Dul`WC4amM3_l_+4ob]RMJ!+UWaA0_l@'ehiT>48$K/D!!T7+C#'sbeV(o*O36`3ffg/d07Rbc$&M&\_\S3,:7"Z_pBcbm-M'iTT%]2DR*^>ukNS;'tVjJI3-ZR!gAE9p:n8\(%Sk&D;;\W`NFEQssIP<cE@Z''?r)s;2Z;0eCqk&Jq=E[aIG=n:-Y/a+k!D3?05,)ROE%--WfU9,WL<&#/ss-rVj^L>l(8c,II-9R1sCj"s2>U;8_H1e$tf?]7`7GXUnq8/apB7%C,FIW1(i(C!BcdhG@u.7]3C'Zgkl0Y5%R%rc+GPBcrMV'd"r?4^^D&I%c\D=:>[Nn5m:G(N%tljR'P>NJtaP)bWCX/#2(G(($&\`R+T$$aV"F<r4^K,)W0<PVc,Z_V.^.g<Y4Q%6qPBENKXX!PL2t^,XO'P!,4tA+Jm-]Pf?:J5UMj?lH=d1nl,\rqeF*h<hCQ]3i2jr04mjb4?X[[R[t;\nWhih[!hO&7gugAhBQ1#%G(jeCjcP(^%Q<O-8QC?!3Db$TG1MXboX.)"6!R-`lgsQZ>?u`bfP3!ARW)]g[T*LJ@,X,$`<b),7d$PoU/G^T;jgUN_*"SWoat[Q%>e7'!.HT1[RSROt&YQh*S6QIOR/i+@/r\'FeTVK#QXs0pP,bonW[b"5LPiQGFqs?;q@+lEp"))@gEM)p;pRskQVYeFJ!FiF.$P#;%[,`G(bZ)7;"q"jc`>1SXQFlkEhWP(Ib-p-o8LYKc%,L<U&1uFs!$SHt4mf%a/QDV$V#7A;>`Q_?Vs0@sO4(&n>P"*'E<GIt,.-H`%8a*^/%SO9"$(H`tW6$.ndEg1N!n4O'PXJ.4b`aTc2ae2!E9g.3RDXX/IPs1Rd3_J+"h9hp[/I5YWiNPo0DK./]<o5<6"GDU>-NX/%TQ<A7YA^.EPV7>,.K_rQD>?ngoXOSep$./bFfL.P-^=ir/@;8%0M,Pc*Cs1#B[Me`$D!d:_WoL_d\X`4PLQFohs>@MN.Wl1kLkU?%$gYF&`e\,>.A'8hAn^U$QQB@d(YR84[KRtX,Wd98EujjV0L1rrAZ4L,Z$;u\S&MS**u=.5b'YeU-(PLli)EQee1"\#[$p@EH>]pP%42J,MOs6!BX[2QPBp;shQcj2MAeie7Y)7\aFi)6!k_oingi?J&rpN7[#eHX2m,[m&q`uA@oA)f<A(rC<18&TnG2QeCNIkIh56ujZ%[1]hXmMOB9<_9-c_Bed.+u5#(PGlbVT9e_I3%0dbfSc>E&X3d>'S<]Hh*coOQ@ZrLM[GlK38#WNiG5?r#%R(*&W3nN$Js+>bL0:,%e>"Fj)`j@e6e.tk3iQ3:?/nm'Bp)"/dU,3T^"t&+PkaZPrB.MJV5FqWFL<D?>T:Lbi2_]Mj5d)KL//lXWRq\ZnZCVK-CL"N=eo\;%#:-`G\6*B#g2rhF"<O&^`^\-T,RV9]D0GRR%Z+*VjB>s3@,:fW5d^T`Q?he)6/\/;YcW-[-"'_bQ<@+6.eB'?CVpueNVc>fR#nDY%1?'i?eSDEBG`c+:'a+MW/q`IY"Q7-t+IYYd^6dj^q-)iba]d^l*Ia6k:d5AmGTT<+"(OK\6)Q:epaG$&7n$%dX^Wod!8p4og0%)a%NO,If"0RrerP'u*4P+C5<7q"C"mA=MU??jNF4'6O1A0VseHa6%+"E%/f??ET=F7'^IBZ-6Tj$<.MLJ?d_%2eAT50B--q$7!.mI.a%I&q[DW&XWY62a':on2qi%i0&TWk0?$!C,1m5?(=*/io%bD02XB7%'l_>D(rPYd2)rPjm,h#KYXY8/O(lg`X-apo+p1M5-E4@>8SQ%?[c%m)*Nnp,UMTC.*<l16)\MEeWASI-3`u9,'@KL;@$FQg0?5J6uIim5TRs#:!9p)C`n_7p;#M1KcD$pK#?UQBY6ZaM<6<g%8J3O%>=79o^fS:o[gGC_EA[ijKpYCe,!=OT-']sVMoX(_VEHfY)\k,_nE)XQ7K]f98+KK8WE?Ks/dU?VV4*+"L9/D+E^=;?*Q9%`VVk(R%##Cp?2E3(D0)6iJDFd2'4d1a,>XHEm0DHP)O4>jR$6rCqmJ)-_U$k[jq8p2l9.A>J;(s`cn'Otm]!SM9=uP#BMeAEh>O#gH;WR.Y%Ik4Z^?S-;qG!2GWMdg]UPVKIu4q@[slsLZ,#.\^0>`g?)[+\5cXj:gFXkAr^g#\DgQu)taZmEDMC'/1BeYV7]H)4uU3,mH<k".h)%<2:Hc):X#6Thd9Y]U>ko?B%j_!.n+(mQ_P\F&qiDqEbcR4%V0FUFJG:>B.-JcRWlZTO*5>IGSXe-s#Bu[IL;5@2Rd;V$O?b>qhIh%,P``;6/s1AM5"=LKdCQJ2hi+KUKN#Ub_WNgLpZ-@l;eg<F.e$l*OSau>k"s/bGS&9>R(EC9N[C2QO763NK>hcZ%Xrhj;d"GJ9"b1%%tt3@']4,PV(5^qXAX$5]$_?]/H'C(es#DP49sJ>FN9bg@s=!bU?_K:ILdpC#F42!b3qXX57K),d!UOfUd4Mi9]iQ=iNqPACF2[-%Xh4gnftiQ%ZrRT6]bN>R-DaFqZt>_IN@-]6,@SH-(?"co(dQg9NXZ1W9'*Tbm/_NbIXaj$CeJ]jUNFCj'f7Bh;Z1*1!a;^Cj'3jI%CCfYPBo(jPnZtm!1k'0_2SM;CbADZcMS20RdR:f>n$p<g;UAkRVQ+pr!p?DW$1ZD?*Pbdk[>$Dsk0,50oFM?_^ot,m.,g=>/T0Q-%XXeg^%],"g80dl&M'l`8C[L!r;CKkqS3qLuKam+qV8B*/^?LC<DpW!jq,9A[rUR&M`l7NIbG17+oTdR?kB<auI=CqLnQ.C35(7hU%@e]BRh4Kc&G>Cu*^Uj=-pa8&,J,&$ujf@PtNqY1K4oY[3E(X%nFmA0D=*FTKeKIGQ~>%AI9_PrivateDataEnd
